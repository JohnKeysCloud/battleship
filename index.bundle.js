!function(){"use strict";var e,t,r;!function(e){e[e.Degrees0=0]="Degrees0",e[e.Degrees90=90]="Degrees90",e[e.Degrees180=180]="Degrees180",e[e.Degrees270=270]="Degrees270"}(e||(e={})),(r=t||(t={})).Battleship="battleship",r.Carrier="carrier",r.Cruiser="cruiser",r.Destroyer="destroyer",r.PatrolBoat="patrolBoat",r.Submarine="submarine";const o={[t.Carrier]:Symbol("CA"),[t.Battleship]:Symbol("BS"),[t.Cruiser]:Symbol("CR"),[t.Submarine]:Symbol("SB"),[t.Destroyer]:Symbol("DD"),[t.PatrolBoat]:Symbol("PB")},n={"battleship-1990":4,"battleship-2002":4,"carrier-1990":5,"carrier-2002":5,"cruiser-1990":3,"cruiser-2002":void 0,"destroyer-1990":2,"destroyer-2002":3,"patrolBoat-1990":void 0,"patrolBoat-2002":2,"submarine-1990":3,"submarine-2002":3};class i{seaworthy=!0;rotationalPivotConfigurations={transientAngleOfRotation:null,coordinatesArray:null,orientation:null};currentplacementConfigurations={coordinatesArray:null,orientation:null};isPlaced=()=>null!==this.currentplacementConfigurations.coordinatesArray;_hitCounter=0;constructor(e,t=2002){this.type=e,this.version=t,this.symbol=o[e];const r=`${e}-${t}`,i=n[r];if(void 0===i)throw new Error(`Invalid Command: ship type/version combination: ${r}.`);this.length=i}hit=()=>this.isSeaworthy()?(this._hitCounter++,`Hit registered. Hit count: ${this.hitCounter}.`):"This ship has already perished.";isSeaworthy=()=>this.hitCounter<this.length;resetConfigurations=e=>{const t={coordinatesArray:null,orientation:null};this.currentplacementConfigurations=t,!0===e&&(this.rotationalPivotConfigurations={...t,transientAngleOfRotation:null})};get hitCounter(){return this._hitCounter}}const a=(e,t)=>e.length===t.length&&e.every(((e,r)=>e===t[r])),s=(e,t,r)=>{const o=e.getAttribute(t);if(!o||!r(o))throw new Error(`Invalid or missing attribute: ${t}`);return o},l=(e,t)=>Math.floor(Math.random()*(t-e+1))+e,d=(e,t=[],r={})=>{const o=document.createElement(e);return t.forEach((e=>o.classList.add(e))),Object.entries(r).forEach((([e,t])=>o.setAttribute(e,t))),o},c=(e,t,r)=>{if("player"!==t&&"bot"!==t)throw new Error('`playerType` must be either "player" or "bot"');const o=e.split(t)[1].toLowerCase();return r?`${t}-${o}-${r}`:`${t}-${o}`};function h([e,t],r,o){return{bow:[e,t],stern:"horizontal"===r?[e+o-1,t]:[e,t+o-1]}}const u=(e,t)=>e>=0&&e<t,p=(e,t)=>e.every((e=>u(e,t))),g=(e,t)=>a(e.bow,t.bow)&&a(e.stern,t.stern),m=e=>!(!Array.isArray(e)||2!==e.length)&&e.every((e=>"number"==typeof e)),f=e=>"string"==typeof e&&["horizontal","vertical"].includes(e),b=e=>"outOfBounds"===e,y=e=>"object"==typeof e&&null!==e&&!!m(e.coordinates),S=e=>{if(!(e=>{if("object"!=typeof e||null===e)return!1;const t=Object.getPrototypeOf(e);return t===Object.prototype||null===t})(e))return!1;const{bow:t,stern:r}=e;return m(t)&&m(r)},C=e=>Object.values(t).includes(e);class v{constructor(e,t){this.fleet=e,this.version=t}static createFleet(e){const t={};for(const[r,o]of Object.entries(e))o&&C(r)&&(t[r]=new i(o.type,o.version));return t}static createHasbroFleet(){return new v(v.createFleet({carrier:{type:t.Carrier,version:2002},battleship:{type:t.Battleship,version:2002},destroyer:{type:t.Destroyer,version:2002},submarine:{type:t.Submarine,version:2002},patrolBoat:{type:t.PatrolBoat,version:2002}}),2002)}static createMBFleet(){return new v(v.createFleet({carrier:{type:t.Carrier,version:1990},battleship:{type:t.Battleship,version:1990},cruiser:{type:t.Cruiser,version:1990},submarine:{type:t.Submarine,version:1990},destroyer:{type:t.Destroyer,version:1990}}),1990)}getShip(e){const t=this.fleet[e];if(!t)throw new Error(`Invalid Command: Ship of type ${e} not found in fleet.`);return t}}class w{static vacant=Symbol("VC");_boardSize=10;_fillValue=w.vacant;constructor(){this._board=Array.from({length:this._boardSize},(()=>Array(this._boardSize).fill(this._fillValue)))}get board(){return this._board}get boardSize(){return this._boardSize}get fillValue(){return this._fillValue}}class B{constructor(e){this.playerState=e}getValidPositions({orientation:e,shipLength:t}){return function({shipLength:e,orientation:t,battleshipBoardBuilder:r}){const o=(e,t,r)=>"horizontal"===t?r[e]:r.map((t=>t[e])),n=(e,t,o,n)=>{let i=0,a=[];for(let s=0;s<e.length;s++)if(e[s]===r.fillValue){if(i++,i>=n){const e=t?[s-(n-1),o]:[o,s-(n-1)],r=t?[s,o]:[o,s];a.push({bow:e,stern:r})}}else i=0;return a},i={},a=r.board,s="horizontal"===t;for(let r=0;r<a.length;r++){const l=n(o(r,t,a),s,r,e);i[s?`row-${r}`:`column-${r}`]=l}return i}({orientation:e,shipLength:t,battleshipBoardBuilder:this.playerState.gameboardBuilder,battleshipBoardController:this})}getAllValidBowCoordinates(e,t){let r=new Set;const o=this.getValidPositions({orientation:e,shipLength:t});for(const e of Object.values(o)){if(n=e,!Array.isArray(n)||!n.every((e=>S(e))))throw new Error(`Expected each value of validPositions to be an array of IPosition objects, but received: ${typeof e}.`);e.forEach((e=>r.add(e.bow)))}var n;return r}movePiece(e,t){if(!e.isPlaced())return void console.warn(`Invalid Command: The ${e.type} has not been placed.`);const r=e.currentplacementConfigurations.orientation,o=h(t,r,e.length);if(n=o,i=this.playerState.gameboardBuilder.boardSize,!p(n.bow,i)||!p(n.stern,i))return void console.warn(`Invalid Command: Position - Bow: [${o.bow}] & Stern: [${o.stern}] is out of bounds for the ${e.type}.`);var n,i;const a=this.getValidPositions({orientation:r,shipLength:e.length}),s="horizontal"===r,[l,d]=t,c=function(e,t){return t?`row-${e}`:`column-${e}`}(s?d:l,s),u=a[c].some((e=>g(e,o)));if(u){const o={ship:e,coordinates:t,orientation:r},n=!0;this.relocateShip(e,o,n)}else console.warn(`Invalid Command: Position - Bow: [${o.bow}] & Stern: [${o.stern}] is unavailable for the ${e.type}.`)}placePiece({ship:t,coordinates:r,orientation:o}){!function({ship:t,coordinates:r,orientation:o,battleshipBoardController:n,battleshipBoardBuilder:i,battleshipBoardRepository:a}){const s=t.length,[l,d]=r,c="horizontal"===o;if(!u((c?l:d)+s-1,i.boardSize)){const e=`Invalid Command: The ship placement attempt with the following configurations is out of bounds - Coordinates: ${r}, Length: ${t.length}, Orientation: ${o}.`;throw new Error(e)}if(t.isPlaced())return void console.warn(`Invalid Command: The ${t.type} has already been placed.`);const p=h(r,o,s);if(!((e,t,r)=>n.getValidPositions(t)[r].some((t=>g(e,t))))(p,{shipLength:s,orientation:o},c?`row-${d}`:`column-${l}`)){const e=`Invalid Command: "${JSON.stringify(p)}" is unavailable for ship with Size: ${s} and Orientation: ${o}.`;throw new Error(e)}{const r=(e,t)=>{const r=[],[o,n]=e.bow,[i,a]=e.stern,s=t?n:o,l=t?i:a;for(let e=t?o:n;e<=l;e++)r.push(t?[e,s]:[s,e]);return r},n=(e,t)=>{const r=i.board,o=e.symbol;t.forEach((e=>{const[t,n]=e;r[n][t]=o}))},s=(t,r,o)=>{const n={coordinatesArray:r,orientation:o};t.currentplacementConfigurations=n,Object.values(t.rotationalPivotConfigurations).every((e=>null===e))&&(t.rotationalPivotConfigurations={...n,transientAngleOfRotation:e.Degrees0})},l=(e,t)=>{a.addShipToFleetCoordinates(e,t)},d=r(p,c);n(t,d),s(t,d,o),l(t.type,d)}}({ship:t,coordinates:r,orientation:o,battleshipBoardController:this,battleshipBoardBuilder:this.playerState.gameboardBuilder,battleshipBoardRepository:this.playerState.gameboardRepository}),this.setFleetRotatedPlacePieceParams(this.playerState.fleetBuilder.fleet)}prettyPrint(){console.table(this.playerState.gameboardBuilder.board.map((e=>e.map((e=>"VC"===e.description?null:e.description)))))}receiveAttack(e){const t=this.getShipAt(e);if(t)return t.hit(),t.isSeaworthy()||console.log(`You sunk the ${t.type} fam!`),t;console.warn("Missed me with that bitch!")}removePiece(e,t=!0){this.isShipValidForRemoval(e)&&((e=>{e.forEach((([e,t])=>{this.playerState.gameboardBuilder.board[t][e]=this.playerState.gameboardBuilder.fillValue}))})(e.currentplacementConfigurations.coordinatesArray),(e=>{this.playerState.gameboardRepository.nullifyShipCoordinatesValue(e)})(e.type),((e,t)=>{t&&this.playerState.gameboardRepository.nullifyShipValidRotationalParams(e.type),e.resetConfigurations(t)})(e,t))}removeAllPieces(e){if(Object.keys(e).length)for(const t of Object.values(e))this.removePiece(t);else console.error("Invalid Command: No ships to remove - Fleet is empty or uninitialized.")}rotatePiece(t){const r=(t,r)=>{const o=t.rotationalPivotConfigurations.transientAngleOfRotation,n=(t=>Array.from(t.keys()).pop()??e.Degrees0)(r);if(o===n){const r=t.rotationalPivotConfigurations.coordinatesArray[0],o=t.rotationalPivotConfigurations.orientation;return t.rotationalPivotConfigurations.transientAngleOfRotation=e.Degrees0,{ship:t,coordinates:r,orientation:o}}const i=((t,r)=>{if(null==r)throw new Error("Current angle doesn't exist");return Array.from(t.keys()).find((e=>e>r))??e.Degrees0})(r,o),a=r.get(i);return t.rotationalPivotConfigurations.transientAngleOfRotation=i,{ship:t,coordinates:a.coordinates,orientation:a.orientation}},o=this.playerState.gameboardRepository.inBoundRotationalPlacePieceForFleet[t.type],n=t.rotationalPivotConfigurations.transientAngleOfRotation,i=(e=>{let o=r(t,e);for(;t.rotationalPivotConfigurations.transientAngleOfRotation!==n&&!this.isRotatedPositionValid(o.coordinates,o.orientation,t.rotationalPivotConfigurations.transientAngleOfRotation,t.length);)o=r(t,e);return o})(o);t.rotationalPivotConfigurations.transientAngleOfRotation!==n?this.relocateShip(t,i,!1):console.warn("No valid rotational position found.")}areCoordinatesVacant(e){const[t,r]=e;return this.playerState.gameboardBuilder.board[r][t]===this.playerState.gameboardBuilder.fillValue}getShipAt(e){if(this.areCoordinatesVacant(e))return null;const t=this.playerState.gameboardBuilder.board,[r,o]=e,n=t[o][r],i=this.getShipTypeFromSymbol(n);return this.playerState.fleetBuilder.getShip(i)}getShipTypeFromSymbol=e=>{if("string"!=typeof(r=e.description)||!["CA","BS","CR","SB","DD","PB"].includes(r))throw new Error("Invalid ship symbol description");var r;switch(e.description){case"CA":return t.Carrier;case"DD":return t.Destroyer;case"SB":return t.Submarine;case"BS":return t.Battleship;case"CR":return t.Cruiser;case"PB":return t.PatrolBoat;default:throw new Error("The symbol description does not return valid ship type.")}};isRotatedPositionValid=([t,r],o,n,i)=>{const a="horizontal"===o,s=this.playerState.gameboardBuilder.boardSize,l=this.playerState.gameboardBuilder.board,d=this.playerState.gameboardBuilder.fillValue,c=a?t:r;let h,u;if(!a&&n===e.Degrees90||a&&n===e.Degrees270||n===e.Degrees0?(h=1,u=i):(h=0,u=i-1),c+i-1>=s)return!1;for(;h<u;h++)if((a?l[r][t+h]:l[r+h][t])!==d)return!1;return!0};getRotatedPlacePieceParams(t){const r=(e,t)=>e-(t-1),o=(t,r)=>r?t===e.Degrees180?"horizontal":"vertical":t===e.Degrees180?"vertical":"horizontal",n=(o,n,[a,s])=>{if(o===e.Degrees0||o===e.Degrees90&&n||o===e.Degrees270&&!n)return i;const l=n?o===e.Degrees180?[r(a,t.length),s]:[a,r(s,t.length)]:o===e.Degrees180?[a,r(s,t.length)]:[r(a,t.length),s];return p(l,this.playerState.gameboardBuilder.boardSize)?l:"outOfBounds"},i=t.rotationalPivotConfigurations.coordinatesArray[0],a=t.rotationalPivotConfigurations.orientation,s=((t,r)=>{const i="horizontal"===r,a={};return[e.Degrees0,e.Degrees90,e.Degrees180,e.Degrees270].forEach((s=>{const l=s===e.Degrees0?t:n(s,i,t);a[s]="outOfBounds"===l?"outOfBounds":{coordinates:l,orientation:s===e.Degrees0?r:o(s,i)}})),a})(i,a),l=(t=>{const r=new Map;for(const n of Object.keys(t)){const i=+n;if(o=i,!Object.values(e).includes(o))throw new Error(`Invalid Type: "${n}" doesn't conform to "AngleOfRotation".`);const a=t[i];if(!y(a)&&!b(a))throw new Error(`Invalid Type: "${a}" doesn't conform to "RotatedPlacePieceParams".`);if(!y(a))continue;const{coordinates:s,orientation:l}=a,d={coordinates:s,orientation:l};r.set(i,d)}var o;return r})(s);return l}isShipValidForRemoval(e){return!(!e.currentplacementConfigurations.coordinatesArray||!this.playerState.gameboardRepository.isShipPlaced(e.type))||(console.error(`Error removing ship: ${e.type} is missing coordinates or not in the fleet.`),!1)}relocateShip(e,t,r){this.removePiece(e,r),this.placePiece(t)}setFleetRotatedPlacePieceParams(e){for(const t of Object.values(e))t.isPlaced()&&this.setShipRotatedPlacePieceParams(t)}setShipRotatedPlacePieceParams(e){const t=this.getRotatedPlacePieceParams(e);this.playerState.gameboardRepository.setShipValidRotationalParams(e,t)}}class P{_fleetCoordinates={};_inBoundRotationalPlacePieceParamsForFleet={};get fleetCoordinates(){return this._fleetCoordinates}get inBoundRotationalPlacePieceForFleet(){return this._inBoundRotationalPlacePieceParamsForFleet}addShipToFleetCoordinates(e,t){this.fleetCoordinates[e]||(this.fleetCoordinates[e]=new Set),t.forEach((t=>{const[r,o]=t,n=`[${r}, ${o}]`;this.fleetCoordinates[e].add(n)}))}isShipPlaced(e){return null!==this.fleetCoordinates[e]}nullifyShipCoordinatesValue(e){this.fleetCoordinates[e]=null}nullifyShipValidRotationalParams(e){this.inBoundRotationalPlacePieceForFleet[e]=null}setShipValidRotationalParams(e,t){this._inBoundRotationalPlacePieceParamsForFleet[e.type]||(this._inBoundRotationalPlacePieceParamsForFleet[e.type]=t)}}const E=(e=2002)=>{const t=new w,r=new P,o=2002===e?v.createHasbroFleet():v.createMBFleet();return{gameboardBuilder:t,gameboardRepository:r,fleetBuilder:o,gameboardController:new B({gameboardBuilder:t,gameboardRepository:r,fleetBuilder:o})}},D={playerOne:E(),playerTwo:E()};function L(e,t){if(!e)throw new Error("Invalid Command: `gameboardController` is required to randomize the gameboard.");if(!t)throw new Error("Invalid Command: `fleet` is required to randomize the gameboard.");const r=(t,o,n,i=0)=>{if(i>100)throw new Error(`Max recursion depth exceeded when placing the ${t.type}.`);const s=((e,t)=>{const r=t-e;return[l(0,r),l(0,r)]})(t.length,n);return((t,r,o)=>{const n={shipLength:r.length,orientation:o},i=e.getValidPositions(n),[s,l]=t,d="horizontal"===o,c=d?l:s;return i[d?`row-${c}`:`column-${c}`].some((e=>a(e.bow,t)))})(s,t,o)?s:r(t,o,n,i+1)};for(const o in t){if(!C(o))throw new Error(`Invalid Type: "${o}" doesn't conform to "ShipType".`);const n=t[o],i=Math.random()<.5?"horizontal":"vertical",a={ship:n,coordinates:r(n,i,10),orientation:i};e.placePiece(a)}}class ${constructor(e,t){this.id=e,this.playerState=t,this.boardContainer=this.generateBoardContainer(this.playerState.gameboardBuilder.boardSize)}render(e){const t=document.querySelector(e);if(!t)throw new Error(`Target element not found with ID - ${this.id} and selector - "${e}".`);const r=this.generateBoardFragment(this.playerState.gameboardBuilder.boardSize);this.boardContainer.appendChild(r),t.appendChild(this.boardContainer)}createBackgroundCellsFragment(e){const t=new DocumentFragment;return e.forEach(((e,r)=>{e.forEach(((e,o)=>{const n=d("div",[`${c(this.id,"bot")}-cell`,"grid-cell"],{"data-x":o.toString(),"data-y":r.toString(),"aria-label":`Row ${r+1}, Column ${o+1}`,role:"gridCell"}),i=d("div",[c(this.id,"bot","grid-cell-container"),"grid-cell-container"]);i.appendChild(n),t.appendChild(i)}))})),t}generateBoardContainer(e){const t=d("div",["gameboard-container"],{id:c(this.id,"bot","gameboard-container")});return t.style.setProperty("--grid-size",e.toString()),t}generateBoardFragment(e){const t=d("div",["gameboard-background"],{id:c(this.id,"bot","gameboard-background")});t.appendChild(this.createBackgroundCellsFragment(this.playerState.gameboardBuilder.board));const r=d("div",["gameboard"],{id:c(this.id,"bot","gameboard")});r.style.setProperty("--grid-size",e.toString());const o=new DocumentFragment;return o.append(t,r),o}getId(){return this.id}}var T=new class{events={};on(e,t){this.events[e]=this.events[e]||[],this.events[e].push(t)}off(e,t){this.events[e]&&(this.events[e]=this.events[e].filter((e=>e!==t)))}emit(e,t){this.events[e]&&this.events[e].forEach((e=>e(t)))}};class R{fleetElements=new Set;constructor(e,t){this.id=e,this.playerState=t,this.boardContainer=this.generateBoardContainer(this.playerState.gameboardBuilder.boardSize),this.gameboard=this.generateBoardFragment(this.playerState.gameboardBuilder.boardSize),this.dragImage=this.createDragImage(),this.shipDragClone=this.createShipDragClone(),T.on("updateGameboard",(()=>{this.updateGameboard()}))}render(e){const t=document.querySelector(e);if(!t)throw new Error(`Target element not found with ID - ${this.id} and selector - "${e}".`);this.boardContainer.append(this.dragImage,this.shipDragClone,this.gameboard),this.handleFleetPlacement(this.playerState.fleetBuilder,this.fleetElements),t.appendChild(this.boardContainer)}createDragImage(){return d("img",["drag-image","accessibility"],{id:c(this.id,"player","drag-image"),src:"https://cyclone-studios.s3.us-east-2.amazonaws.com/s3_misc-images/1x1_transparent.png"})}createShipDragClone(){return d("div",["ship-container-clone"],{id:`${this.id}-ship-drag-clone`})}createBackgroundCellsFragment(e){const t=new DocumentFragment;return e.forEach(((e,r)=>{e.forEach(((e,o)=>{const n=e.description.toLowerCase(),i=d("div",[`${c(this.id,"player",n)}-cell`,`player-${n}-cell`,"grid-cell"],{"data-x":o.toString(),"data-y":r.toString(),"aria-label":`Row ${r+1}, Column ${o+1}`,role:"gridCell"}),a=d("div",[c(this.id,"player",`${n}-grid-cell-container`),"grid-cell-container"]);a.appendChild(i),t.appendChild(a)}))})),t}createShipElement(e,t,r,o,n){const i=this.generateShipUnitFragment(t,e,n,this.id),a=d("div",["ship-container"],{id:c(this.id,"player",`${e}-container`),"data-shipType":e,"data-length":t.toString(),"data-orientation":n,draggable:"true"});return a.appendChild(i),"horizontal"===n?(a.style.gridColumn=r,a.style.gridRow=o.toString(),a.style.gridTemplateColumns=`repeat(${t}, 1fr)`):(a.style.gridRow=r,a.style.gridColumn=o.toString(),a.style.gridTemplateRows=`repeat(${t}, 1fr)`),a}generateBoardContainer(e){const t=d("div",["gameboard-container"],{id:c(this.id,"player","gameboard-container")});return t.style.setProperty("--grid-size",e.toString()),this.handleDragListeners(t),this.handleClickListeners(t),t}generateBoardFragment(e){const t=d("div",["gameboard-background"],{id:c(this.id,"player","gameboard-background")});t.appendChild(this.createBackgroundCellsFragment(this.playerState.gameboardBuilder.board));const r=d("div",["gameboard"],{id:c(this.id,"player","gameboard")});r.style.setProperty("--grid-size",e.toString());const o=new DocumentFragment;return o.append(t,r),o}generateShipUnitFragment(e,t,r,o){const n=new DocumentFragment;for(let i=0;i<e;i++){const a=0===i,s=i===e-1,l=d("div",["ship-unit",`${t}-unit`,c(o,"player",`${t}-unit`)]);"horizontal"===r?l.classList.add("ship-unit-horizontal"):l.classList.add("ship-unit-vertical"),a&&(l.classList.add("ship-bow"),l.setAttribute("id",c(o,"player",`${t}-bow`))),s&&(l.classList.add("ship-stern"),l.setAttribute("id",c(o,"player",`${t}-stern`))),n.appendChild(l)}return n}getGridPlacementValue(e,t,r){const o="horizontal"===t,[n,i]=e;return[`${o?n+1:i+1} / span ${r}`,o?i+1:n+1]}handleFleetPlacement(e,t){this.updateFleetElements(e),this.placeFleetOnGameboard(t)}placeFleetOnGameboard(e){const t=this.boardContainer.querySelector(".gameboard");if(!t)throw new Error("Gameboard container not found.");e.forEach((e=>t.appendChild(e)))}updateFleetElements=e=>{this.fleetElements.size&&this.fleetElements.clear();for(const t of Object.values(e.fleet)){const e=t.type,r=t.length,o=t.currentplacementConfigurations.orientation;if(!o)throw new Error("Orientation not set.");const n=t.currentplacementConfigurations.coordinatesArray;if(!n||0===n.length){console.log(`The ${e} has not been placed. Continuing...`);continue}const[i,a]=n[0],[s,l]=this.getGridPlacementValue([i,a],o,r),d=this.createShipElement(e,r,s,l,o);this.fleetElements.add(d)}};updateGameboard(){const e=this.boardContainer.querySelector("#player-one-gameboard"),t=this.boardContainer.querySelector("#player-one-gameboard-background");if(!e||!t)throw new Error("fuck");this.boardContainer.removeChild(e),this.boardContainer.removeChild(t),this.shipDragClone.classList.remove("visible"),this.gameboard=this.generateBoardFragment(this.playerState.gameboardBuilder.boardSize),this.boardContainer.appendChild(this.gameboard),this.handleFleetPlacement(this.playerState.fleetBuilder,this.fleetElements)}handleDragListeners(e){const t={currentShipInstance:null,initialPlacementConfigurations:null,isValidDropTarget:!1,currentDragOverCell:null,cloneSnapOffset:null,shipBorderValueSplit:null};e.addEventListener("dragstart",(e=>this.handleShipDragStart(e,t))),e.addEventListener("drag",(e=>this.handleShipDrag(e,t))),e.addEventListener("dragenter",(e=>this.handleShipDragEnter(e))),e.addEventListener("dragleave",(e=>this.handleShipDragLeave(e))),e.addEventListener("dragover",(e=>this.handleShipDragOver(e,t))),e.addEventListener("drop",(e=>this.handleShipDrop(e,t))),e.addEventListener("dragend",(e=>this.handleShipDragEnd(e,t)))}handleShipDragStart(e,t){if(!(e.target instanceof HTMLDivElement))throw new Error("Target element not found or is not an HTMLElement.");if(!e.target.classList.contains("ship-container"))return;const r=e.target,o=s(r,"data-orientation",f),n=this.playerState.fleetBuilder.fleet,i=s(r,"data-shiptype",C),l=((e,t,r)=>{const o=(e=>{const t=e.querySelector(".ship-bow");if(!t)throw new Error("Ship bow not found.");return t})(e),n=getComputedStyle(document.documentElement).getPropertyValue("--ship-container-border-size").trim().match(/^(?<numberValue>\d+(\.\d+)?)(?<unitType>[a-z%]+)$/i);if(!n||!n.groups)throw new Error("No matches found when parsing");const i=n.groups;r.shipBorderValueSplit=i;const a="horizontal"===t,[s,l]=a?[o.getBoundingClientRect().width/2,o.getBoundingClientRect().height/2+Number(i.numberValue)]:[o.getBoundingClientRect().width/2+Number(i.numberValue),o.getBoundingClientRect().height/2];return{offsetX:s,offsetY:l}})(r,o,t);if(((e,t,r,o)=>{if(!t[r])throw new Error(`The ${r} is not present in the fleet.`);e.currentShipInstance=t[r],e.initialPlacementConfigurations=e.currentShipInstance.currentplacementConfigurations,e.cloneSnapOffset=o})(t,n,i,l),!t.currentShipInstance)throw new Error(`Drag state hasn't been updated with the current ship instance on drag start. Drag State: ${JSON.stringify(t)}`);this.playerState.gameboardController.removePiece(t.currentShipInstance),e.dataTransfer?.setDragImage(this.dragImage,0,0),((e,t)=>{const r=e.getBoundingClientRect();t.style.height=`${r.height}px`,t.style.width=`${r.width}px`})(r,this.shipDragClone),(e=>{e.classList.add("lower-opacity"),setTimeout((()=>{e.style.pointerEvents="none"}),0),this.shipDragClone.classList.add("visible")})(r),((e,t,r,o)=>{const n=Number(t.getAttribute("data-length"));if(!n||"number"!=typeof(i=n)||![2,3,4,5].includes(i))throw new Error("Invalid or missing ship type attribute.");var i;const s=n;((e,t,r)=>{const n=o.getAllValidBowCoordinates(r,t);e.forEach((e=>{const t=[Number(e.getAttribute("data-x")),Number(e.getAttribute("data-y"))];for(const r of n)a(r,t)&&e.classList.add("valid-bow-coordinates")}))})(e.querySelectorAll(".grid-cell"),s,r)})(this.boardContainer,r,o,this.playerState.gameboardController),this.snapCloneToCursor(e,l)}handleShipDrag(e,t){if(!(e.target instanceof HTMLDivElement))throw new Error("Target element not found or is not an HTMLElement.");if(!e.target.classList.contains("ship-container"))return;const r=t.cloneSnapOffset;if(!r)throw new Error("An error has occured during the `cloneSnapOffset` reading.");this.snapCloneToCursor(e,r)}handleShipDragEnter(e){if(!(e.target instanceof HTMLDivElement))throw new Error("Target element not found or is not an HTMLElement.");if(!e.target.classList.contains("grid-cell"))return;const t=e.target,r=t.classList.contains("valid-bow-coordinates");r?t.classList.add("placement-is-valid"):t.classList.add("placement-is-invalid"),r&&this.shipDragClone.classList.add("placement-is-valid")}handleShipDragLeave(e){if(!(e.target instanceof HTMLDivElement))throw new Error("Target element not found or is not an HTMLElement.");if(!e.target.classList.contains("grid-cell"))return;const t=e.target;t.classList.contains("placement-is-valid")?t.classList.remove("placement-is-valid"):t.classList.remove("placement-is-invalid"),this.shipDragClone.classList.contains("placement-is-valid")&&this.shipDragClone.classList.remove("placement-is-valid")}handleShipDragOver(e,t){if(e.preventDefault(),!(e.target instanceof HTMLDivElement))throw new Error("Target element not found or is not an HTMLElement.");if(!e.target.classList.contains("grid-cell"))return;const r=e.target;t.currentDragOverCell=r,r.classList.contains("valid-bow-coordinates")}handleShipDrop(e,t){if(e.preventDefault(),!(e.target&&e.target instanceof HTMLDivElement))throw new Error("Target element not found or is not an HTMLElement.");if(!e.target.classList.contains("valid-bow-coordinates"))return;const{coordinatesArray:r,orientation:o}=t.initialPlacementConfigurations||{};if(!r||!o)throw new Error("Initial placement configurations are incomplete.");t.isValidDropTarget=!0;const n=e.target,i=n.getAttribute("data-x"),a=n.getAttribute("data-y");if(!i||!a)throw new Error("Missing or invalid grid cell coordinates.");const s=[Number(i),Number(a)];this.playerState.gameboardController.placePiece({ship:t.currentShipInstance,coordinates:s,orientation:o}),this.updateGameboard(),t.isValidDropTarget=!1}handleShipDragEnd(e,t){if(!(e.target instanceof HTMLDivElement))throw new Error("Target element not found or is not an HTMLElement.");if(!e.target.classList.contains("ship-container"))return;const r=()=>{const{coordinatesArray:e,orientation:r}=t.initialPlacementConfigurations||{};if(!e||!r)throw new Error("Initial placement configurations are incomplete.");const o=e[0];this.playerState.gameboardController.placePiece({ship:t.currentShipInstance,coordinates:o,orientation:r})},o=(e,t,r)=>{const o=r?"placement-is-valid":"placement-is-invalid";t.classList.remove(o),e.classList.remove("lower-opacity"),this.shipDragClone.classList.remove("visible"),e.style.pointerEvents="auto"},n=e.target;try{const{currentDragOverCell:e,isValidDropTarget:i}=t;if(!e)throw new Error(`Current drag over cell is missing. Drag state: ${JSON.stringify(t)}`);o(n,e,i),i||r()}catch(e){console.error(e)}}snapCloneToCursor(e,t){const r=this.boardContainer.getBoundingClientRect(),o=r.left,n=r.top,i=e.clientX,a=e.clientY,{offsetX:s,offsetY:l}=t;document.documentElement.style.setProperty("--ship-clone-left",i-o-s+"px"),document.documentElement.style.setProperty("--ship-clone-top",a-n-l+"px")}handleClickListeners(e){e.addEventListener("click",(e=>{this.handleShipRotation(e)}))}handleShipRotation(e){if(!(e.target instanceof HTMLDivElement))throw new Error("Target element not found or is not an HTMLElement.");if(!e.target.classList.contains("ship-container"))return;const t=e.target,r=s(t,"data-shiptype",C),o=this.playerState.fleetBuilder.getShip(r);this.playerState.gameboardController.rotatePiece(o),this.updateGameboard()}getId(){return this.id}}class O{ShipShufflerButtonTextContent="Shuffle Ships";constructor(e,t,r,o="ship-shuffler-button",n=["ship-shuffler-button"]){this.gameboardController=e,this.fleet=t,this.gameboardTargetSelector=r,this.id=o,this.classes=n,this.validateGameboardTarget(this.gameboardTargetSelector),this.ShipShufflerButton=this.createShipShufflerButton(this.id,this.classes),this.ShipShufflerButton.classList.add(...this.classes),this.ShipShufflerButton.textContent=this.ShipShufflerButtonTextContent,this.addEventListener(this.ShipShufflerButton),this.ShipShufflerButtonContainer=this.createShipShufflerButtonContainer(),this.ShipShufflerButtonContainer.appendChild(this.ShipShufflerButton)}render(e){const t=document.querySelector(e);if(!t)throw new Error(`Target element not found: "${e}."`);t.appendChild(this.ShipShufflerButtonContainer)}addEventListener(e){e.addEventListener("click",(()=>{this.randomizeGameboard(),this.updateGameboard(this.gameboardTargetSelector)}))}createShipShufflerButton(e,t){return d("button",[...t],{id:e})}createShipShufflerButtonContainer(){return d("div",["ship-shuffler-button-container"])}randomizeGameboard(){this.gameboardController.removeAllPieces(this.fleet),L(this.gameboardController,this.fleet)}updateGameboard(e){T.emit("updateGameboard",e)}validateGameboardTarget(e){if(!document.querySelector(e))throw new Error(`Invalid gameboard target selector: "${e}"`)}getId(){return this.id}}console.time("init"),function(){console.time("randomizeBSGameboards"),L(D.playerOne.gameboardController,D.playerOne.fleetBuilder.fleet),L(D.playerTwo.gameboardController,D.playerTwo.fleetBuilder.fleet),console.timeEnd("randomizeBSGameboards");const e=document.getElementById("content");console.log(e);const t=d("h1",["main-heading"]);t.textContent="ShattleBips",e?.appendChild(t);const r=d("h2",["sub-heading"]);r.textContent="Configure your Bips!",e?.appendChild(r),new R("playerOne",D.playerOne).render("#content"),new O(D.playerOne.gameboardController,D.playerOne.fleetBuilder.fleet,"#content","player-one-ship-shuffler-button").render("#content"),new $("botOne",D.playerTwo).render("#content")}(),console.timeEnd("init")}();
//# sourceMappingURL=index.bundle.js.map