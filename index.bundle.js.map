{"version":3,"file":"index.bundle.js","mappings":"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","sources":["webpack://battleship/./src/typescript/utilities/cycloneLightbox.ts/cyclone-lightbox.ts","webpack://battleship/./src/typescript/utilities/random-utilities.ts","webpack://battleship/./src/typescript/utilities/create-github-link.ts","webpack://battleship/./src/typescript/markup/main/main-container-one/main-one-parabellum.ts","webpack://battleship/./src/typescript/markup/main/main-container-one/main-one-bellum.ts","webpack://battleship/./src/typescript/markup/main/main-container-one/main-one-post-bellum.ts","webpack://battleship/./src/typescript/utilities/cycloneHotSwapContainer.ts","webpack://battleship/./src/typescript/types/logic-types.ts","webpack://battleship/./src/typescript/types/type-guards.ts","webpack://battleship/./src/typescript/types/state-types.ts","webpack://battleship/./src/typescript/markup/components/gameboard-component/player-gameboard-component/player-gameboard-component.ts","webpack://battleship/./src/typescript/markup/components/gameboard-component/opponent-gameboard-component/opponent-gameboard-component.ts","webpack://battleship/./src/typescript/markup/main/main-container-two/main-container-two.ts","webpack://battleship/./src/typescript/setup/randomize-bs-gameboard.ts","webpack://battleship/./src/typescript/markup/components/buttons/ship-shuffler-component/ship-shuffler-component.ts","webpack://battleship/./src/typescript/markup/components/buttons/ready-up-component/ready-up-component.ts","webpack://battleship/./src/typescript/markup/components/score-board-component/score-board-component.ts","webpack://battleship/./src/typescript/markup/main/main-container-three/main-three-parabellum.ts","webpack://battleship/./src/typescript/markup/main/main-container-three/main-three-bellum.ts","webpack://battleship/./src/typescript/markup/main/main-container-three/main-three-post-bellum.ts","webpack://battleship/./src/typescript/logic/bs-ship-builder/bs-ship-builder.ts","webpack://battleship/./src/typescript/logic/bs-fleet-builder/bs-fleet-builder.ts","webpack://battleship/./src/typescript/markup/components/buttons/instructions-component/instructions-component.ts","webpack://battleship/./src/typescript/markup/main/main-component.ts","webpack://battleship/./src/typescript/markup/main/main-container-one/main-container-one.ts","webpack://battleship/./src/typescript/markup/main/main-container-three/main-container-three.ts","webpack://battleship/./src/typescript/markup/components/instructions-dialog-component/instructions-dialog-component.ts","webpack://battleship/./src/typescript/utilities/cycloneSitRepScroller.ts/cyclone-sit-rep-scroller.ts","webpack://battleship/./src/typescript/meta/dom-controller.ts","webpack://battleship/./src/typescript/markup/header/header.ts","webpack://battleship/./src/typescript/markup/header/nav/nav.ts","webpack://battleship/./src/typescript/state/game-state.ts","webpack://battleship/./src/typescript/utilities/event-bus.ts","webpack://battleship/./src/typescript/services/billow.ts","webpack://battleship/./src/typescript/logic/bs-gameboard-builder/bs-gameboard-builder.ts","webpack://battleship/./src/typescript/utilities/logic-utilities.ts","webpack://battleship/./src/typescript/logic/bs-gameboard-controller/bs-gameboard-controller.ts","webpack://battleship/./src/typescript/logic/bs-gameboard-controller/abstracted-method-callbacks/get-valid-ship-positions/get-valid-ship-positions.ts","webpack://battleship/./src/typescript/logic/bs-gameboard-controller/abstracted-method-callbacks/place-ship/place-ship.ts","webpack://battleship/./src/typescript/logic/bs-gameboard-repository/bs-gameboard-repository.ts","webpack://battleship/./src/typescript/state/player-state.ts","webpack://battleship/./src/app.ts","webpack://battleship/./src/typescript/meta/init/randomize-gameboard.ts"],"sourcesContent":["interface DialogState {\n  isDialogOpen: boolean;\n  isEscapeKeyListenerAttached: boolean;\n  isCloseButtonListenerAttached: boolean;\n};\n\n/**\n * Lightbox by Cyclone Studios 💭\n * \n * A class that manages a modal dialog, allowing it to be opened, closed, and interacted with.\n * It handles keyboard interactions (Escape key), and close button events. \n * \n * @example\n * const dialogElement = document.querySelector('dialog');\n * const lightbox = new LightBox(dialogElement);\n * lightbox.openLightbox();\n * \n * @class\n */\nexport class CycloneLightboxController {\n  /**\n   * The current state of the dialog (open/close and event listener attachment status).\n   * @private\n   * @type {DialogState}\n   */\n  private readonly dialogState: DialogState = {\n    isDialogOpen: false,\n    isEscapeKeyListenerAttached: false,\n    isCloseButtonListenerAttached: false,\n  };\n\n  /**\n   * The ID of the dialog element.\n   * @private\n   * @type {string}\n   */\n  private readonly dialogId: string;\n\n  /**\n   * The close button element inside the dialog.\n   * @private\n   * @type {HTMLButtonElement}\n   */\n  private readonly dialogCloseButton: HTMLButtonElement;\n\n  /**\n   * The listener function for closing the dialog when the close button is clicked.\n   * @private\n   * @type {() => void}\n   */\n  private closeButtonListener: () => void;\n\n  /**\n   * The listener function for handling the Escape key to close the dialog.\n   * @private\n   * @type {(event: KeyboardEvent) => void}\n   */\n  private escapeKeyListener: (event: KeyboardEvent) => void;\n\n  /**\n   * Creates an instance of the LightBox class.\n   * @param {HTMLDialogElement} dialogElement - The dialog element to manage.\n   * @param {string} [dialogCloseButtonID='ds-close-button'] - The ID of the close button inside the dialog.\n   * @param {boolean} [dialogInDocumentBody=true] - Whether to observe the dialog's removal from the document body.\n   * @throws {Error} Throws an error if the dialog element doesn't have an ID.\n   */\n  constructor(\n    private readonly dialogElement: HTMLDialogElement,\n    private readonly dialogCloseButtonID: string = 'ds-close-button',\n    private readonly dialogInDocumentBody: boolean = true\n  ) {\n    if (!this.dialogElement.id)\n      throw new Error('Dialog element must have an id.');\n\n    this.dialogId = this.dialogElement.id;\n    this.dialogCloseButton = this.dsGetCloseButton(\n      this.dialogCloseButtonID,\n      this.dialogId\n    );\n    this.dsAddCloseButtonAria(this.dialogCloseButton);\n\n    this.closeButtonListener = this.closeLightbox.bind(this);\n    this.escapeKeyListener = this.dsHandleEscapeKey.bind(this);\n\n    this.observeDialogRemoval();\n  }\n\n  /**\n   * Opens the dialog.\n   * Adds event listeners for closing the dialog.\n   */\n  public openLightbox() {\n    if (this.dialogState.isDialogOpen) return;\n\n    this.dialogElement.showModal();\n    this.dsAddListeners();\n    this.dialogState.isDialogOpen = true;\n  }\n\n  /**\n   * Closes the dialog with an animation and removes event listeners.\n   */\n  public closeLightbox() {\n    requestAnimationFrame(() => {\n      this.dialogElement.classList.add('closing');\n    });\n\n    this.dialogElement.addEventListener(\n      'animationend',\n      () => {\n        this.dialogElement.classList.remove('closing');\n        this.dialogElement.close();\n        this.dsRemoveListeners();\n        this.dialogState.isDialogOpen = false;\n      },\n      { once: true }\n    );\n  }\n\n  /**\n   * Returns whether the dialog is currently open.\n   * @returns {boolean} True if the dialog is open, false otherwise.\n   */\n  public isOpen(): boolean {\n    return this.dialogState.isDialogOpen;\n  }\n\n  /**\n   * Adds event listeners for the dialog's close button and Escape key.\n   * @private\n   */\n  private dsAddListeners() {\n    if (!this.dialogState.isCloseButtonListenerAttached) {\n      this.dialogCloseButton.addEventListener(\n        'click',\n        this.closeButtonListener\n      );\n      this.dialogState.isCloseButtonListenerAttached = true;\n    }\n\n    if (!this.dialogState.isEscapeKeyListenerAttached) {\n      window.addEventListener('keydown', this.escapeKeyListener);\n      this.dialogState.isEscapeKeyListenerAttached = true;\n    }\n  }\n\n  /**\n   * Removes event listeners for the dialog's close button and Escape key.\n   * @private\n   */\n  private dsRemoveListeners() {\n    this.dialogCloseButton.removeEventListener(\n      'click',\n      this.closeButtonListener\n    );\n    this.dialogState.isCloseButtonListenerAttached = false;\n\n    window.removeEventListener('keydown', this.escapeKeyListener);\n    this.dialogState.isEscapeKeyListenerAttached = false;\n  }\n\n  /**\n   * Retrieves the close button element inside the dialog.\n   * @private\n   * @param {string} closeButtonId - The ID of the close button.\n   * @param {string} dialogId - The ID of the dialog.\n   * @returns {HTMLButtonElement} The close button element.\n   * @throws {Error} Throws an error if the close button is not found.\n   */\n  private dsGetCloseButton(\n    closeButtonId: string,\n    dialogId: string\n  ): HTMLButtonElement {\n    const closeButton = this.dialogElement.querySelector<HTMLButtonElement>(\n      `#${closeButtonId}`\n    );\n\n    if (!closeButton) {\n      throw new Error(\n        `Close button with ID \"${closeButtonId}\" not found in dialog \"${dialogId}\".`\n      );\n    }\n\n    return closeButton;\n  }\n\n  /**\n   * Adds aria attribute to the close button.\n   * @private\n   * @param {HTMLButtonElement} closeButton - The close button element to update.\n   */\n  private dsAddCloseButtonAria(closeButton: HTMLButtonElement): void {\n    closeButton.setAttribute('aria-label', 'Close Dialog');\n  }\n\n  /**\n   * Handles the Escape key press to close the dialog.\n   * @private\n   * @param {KeyboardEvent} event - The keyboard event triggered by pressing a key.\n   */\n  private dsHandleEscapeKey(event: KeyboardEvent) {\n    if (event.key === 'Escape' && this.dialogState.isDialogOpen) {\n      event.preventDefault();\n      this.closeLightbox();\n    }\n  }\n\n  /**\n   * Observes the removal of the dialog element from the DOM and removes listeners accordingly.\n   * @private\n   */\n  private observeDialogRemoval() {\n    const observer: MutationObserver = new MutationObserver((mutations) => {\n      for (const mutation of mutations) {\n        Array.from(mutation.removedNodes).forEach((node) => {\n          if (node === this.dialogElement) {\n            this.dsRemoveListeners();\n            observer.disconnect(); // Stop observing once removed\n            return;\n          }\n        });\n      }\n    });\n\n    this.dialogInDocumentBody\n      ? observer.observe(document.body, { childList: true })\n      : observer.observe(document.body, { childList: true, subtree: true });\n  }\n}\n\n// 💭 --------------------------------------------------------------\n\n// <--- 💡 Fun facts:\n// Lightboxes are named after the lightbox that photographers use to view slides.\n\n// The HTML <dialog> element didn't become a web standard until 2022, when Chrome, \n// Firefox and Safari added support for the element.\n\n// Ok… maybe not that fun.\n\n// ---> Kizu Kuraudo\n\n// 💭 --------------------------------------------------------------","export const areArraysEqual = <T>(arrayOne: T[], arrayTwo: T[]) =>\n  arrayOne.length === arrayTwo.length\n  &&\n  arrayOne.every((value, index) => value === arrayTwo[index]);\n\nexport const capitalize = (str: string) => str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n\nexport const getConvertedTypeFromAttr = <T extends string>(\n  element: HTMLElement,\n  attribute: string,\n  typeGuard: (value: string) => value is T\n): T => {\n  const attrValue = element.getAttribute(attribute);\n  if (!attrValue || !typeGuard(attrValue)) {\n    throw new Error(`Invalid or missing attribute: ${attribute}`);\n  }\n  return attrValue;\n};\n\nexport const getRandomInt = (min: number, max: number): number =>\n  Math.floor(Math.random() * (max - min + 1)) + min;\n\nexport const isEmptyObject = (obj: Record<PropertyKey, unknown>): boolean => {\n  return (\n    Object.keys(obj).length === 0 &&\n    Object.getOwnPropertySymbols(obj).length === 0\n  );\n};\n\nexport const createElement = <K extends keyof HTMLElementTagNameMap>(\n  tag: K,\n  classes: string[] = [],\n  attributes: Record<string, string> = {}\n): HTMLElementTagNameMap[K] => {\n  const element: HTMLElementTagNameMap[K] = document.createElement(tag);\n  classes.forEach((cls) => element.classList.add(cls));\n  Object.entries(attributes).forEach(([key, value]) =>\n    element.setAttribute(key, value)\n  );\n  return element;\n};\n\nexport const generateListFragment = (\n  listItemTextContentArray: { textContent: string }[],\n  identifier: string,\n  attributes: Record<string, string> = {}\n): DocumentFragment => {\n  if (!listItemTextContentArray.length)\n    throw new Error('The listItemTextContentArray is empty.');\n\n  if (!identifier) throw new Error('You must identify your list items.');\n\n  const listFragment = new DocumentFragment();\n\n  listItemTextContentArray.forEach((listItem, index) => {\n    const listElement: HTMLLIElement = createElement(\n      'li',\n      [`${identifier}-list-item`],\n      {\n        id: `${identifier}-list-item-${++index}`,\n        ...attributes,\n      }\n    );\n    listElement.textContent = listItem.textContent;\n\n    listFragment.appendChild(listElement);\n  });\n  \n  return listFragment;\n};\n\n/**\n * Pauses execution for the specified milliseconds.\n * @param ms - Time to sleep in milliseconds.\n */\nexport const sleep = (ms: number): Promise<void> => new Promise((resolve) => setTimeout(resolve, ms));\n\nexport const waitForAnimationEnd = (element: HTMLElement): Promise<void> => {\n  return new Promise((resolve) => {\n    const handler = () => {\n      element.removeEventListener('animationend', handler);\n      resolve();\n    };\n    element.addEventListener('animationend', handler);\n  });\n}\nexport const waitForTransitionEnd = (\n  element: HTMLElement,\n  timeout = 1000, // ? make timeout value slightly longer than the longest transition duration\n  expectedCount?: number, // ? optional number of transitionend events to wait for (e.g., for nested transitions)\n  callback?: () => void // ? optional callback, same as `if (callback) callback();`\n): Promise<void> => {\n  return new Promise((resolve) => {\n    let resolved = false;\n    let transitionCount = 0;\n\n    const cleanup = () => {\n      if (!resolved) {\n        resolved = true;\n        element.removeEventListener('transitionend', handler);\n        clearTimeout(timer); // clear fallback timeout once resolved\n        resolve();\n        callback?.();\n      }\n    };\n\n    const handler = (event: TransitionEvent) => {\n      // ? If expecting multiple transitions, count until expectedCount is met\n      if (expectedCount !== undefined && expectedCount > 0) {\n        transitionCount++;\n        if (transitionCount >= expectedCount) {\n          cleanup();\n        }\n        return;\n      }\n\n      // ? Only resolve if transition event is on the element itself\n      if (event.target === element) {\n        cleanup();\n      }\n    };\n\n    element.addEventListener('transitionend', handler);\n\n    // Fallback timeout if `transitionend` event doesn't fire\n    const timer = setTimeout(() => {\n      cleanup();\n    }, timeout);\n  });\n};\nexport const waitForEvent = <K extends keyof HTMLElementEventMap>(\n  element: HTMLElement,\n  eventType: K,\n  callback?: () => void\n): Promise<HTMLElementEventMap[K]> => {\n  return new Promise((resolve) => {\n    const handler = (event: HTMLElementEventMap[K]) => {\n      element.removeEventListener(eventType, handler as EventListener);\n      resolve(event);\n      if (callback) callback();\n    };\n    element.addEventListener(eventType, handler as EventListener);\n  });\n};\n\nexport type Range<\n  N extends number,\n  Acc extends number[] = []\n> = Acc['length'] extends N ? Acc[number] : Range<N, [...Acc, Acc['length']]>;","// * UTILITIY\nfunction setAttributes(\n  element: Element,\n  attributes: { [key: string]: string }\n) {\n  for (const key in attributes) {\n    element.setAttribute(key, attributes[key]);\n  }\n}\n\n// > ------------------------------------------------------------------------\n\nexport function createGitHubLink(\n  size: string = '50px',\n  color: string = '#FFF',\n  gitHubUsername: string = 'johnKeysCloud',\n  projectName?: string\n): HTMLAnchorElement {\n  const pathOne: SVGPathElement = document.createElementNS(\n    'http://www.w3.org/2000/svg',\n    'path'\n  );\n  pathOne.setAttribute(\n    'd',\n    'M8.20003216,0 C3.67186256,0 0,3.67233045 0,8.2025137 C0,11.8266603 2.34955472,14.9012922 5.60770169,15.9859115 C6.01749428,16.0618219 6.16798309,15.8079721 6.16798309,15.5913056 C6.16798309,15.3957396 6.16033003,14.7495356 6.15685721,14.064154 C3.87553694,14.5603383 3.3941657,13.0963596 3.3941657,13.0963596 C3.02115925,12.1482506 2.48370842,11.896202 2.48370842,11.896202 C1.7397535,11.3870871 2.53978801,11.3975087 2.53978801,11.3975087 C3.36323189,11.4554066 3.79681972,12.242817 3.79681972,12.242817 C4.52816959,13.4968196 5.71510182,13.1342505 6.18303197,12.9247247 C6.25660428,12.3945093 6.46915364,12.0327122 6.70363321,11.8278826 C4.88233278,11.6204154 2.96765212,10.9170854 2.96765212,7.77413412 C2.96765212,6.87864774 3.28798748,6.14688355 3.81257603,5.57247278 C3.72742766,5.36584187 3.44677247,4.53159853 3.89200067,3.40175461 C3.89200067,3.40175461 4.58058343,3.18129256 6.14759636,4.24255971 C6.80164386,4.06076054 7.50315322,3.96966796 8.20003216,3.96658007 C8.89691109,3.96966796 9.59893494,4.06076054 10.2542687,4.24255971 C11.8194166,3.18129256 12.5070347,3.40175461 12.5070347,3.40175461 C12.9533562,4.53159853 12.6725723,5.36584187 12.587424,5.57247278 C13.1131701,6.14688355 13.4313189,6.87858341 13.4313189,7.77413412 C13.4313189,10.9245478 11.5130368,11.6182925 9.68710595,11.8213208 C9.98120223,12.0758783 10.2432714,12.5750862 10.2432714,13.3403025 C10.2432714,14.4377879 10.2337533,15.3211158 10.2337533,15.5913056 C10.2337533,15.8095804 10.3813481,16.0653602 10.7970574,15.9848178 C14.0534036,14.8989763 16.4,11.825438 16.4,8.2025137 C16.4,3.67233045 12.7286519,0 8.20003216,0'\n  );\n\n  const pathTwo: SVGPathElement = document.createElementNS(\n    'http://www.w3.org/2000/svg',\n    'path'\n  );\n  setAttributes(pathTwo, {\n    'd': 'M3.07518929,11.6824029 C3.05731167,11.723257 2.99359073,11.7355197 2.93568001,11.7075092 C2.87662002,11.6806603 2.84341872,11.6248974 2.86257332,11.5838496 C2.88013169,11.5417693 2.94385264,11.5300229 3.00278493,11.5582916 C3.06197262,11.5850759 3.09568471,11.6413552 3.07518929,11.6824029 M3.47564797,12.0435714 C3.436828,12.0799722 3.36091196,12.0630626 3.30938611,12.0055571 C3.25613634,11.9481806 3.24617596,11.8715065 3.28557057,11.8345248 C3.32560367,11.7981885 3.39922115,11.8151627 3.45259861,11.8726037 C3.50584838,11.9306256 3.51619186,12.0068479 3.47558413,12.0436359 M3.75038868,12.5056811 C3.70045904,12.5407266 3.61886048,12.5078755 3.5684839,12.4346866 C3.51861811,12.3615623 3.51861811,12.2737872 3.56956933,12.2386127 C3.62013745,12.2034381 3.70045904,12.235063 3.75153796,12.307671 C3.8013399,12.3820861 3.8013399,12.4698612 3.75032483,12.5057457 M4.2149514,13.0409152 C4.1703212,13.0906114 4.07531442,13.0773161 4.0057194,13.0094195 C3.93459201,12.9430719 3.91473508,12.8489074 3.95949298,12.7991467 C4.00463397,12.7493214 4.10021539,12.7633267 4.1703212,12.8306424 C4.24100164,12.8968609 4.26258248,12.9917354 4.21501525,13.0409152 M4.81538402,13.2216286 C4.79578249,13.2860399 4.70422354,13.3153413 4.6120261,13.2879762 C4.51995636,13.259772 4.45968324,13.1842596 4.4782632,13.1191383 C4.49741779,13.0542751 4.58935983,13.0237475 4.68225961,13.0530489 C4.77420165,13.081124 4.83460247,13.1560554 4.81544787,13.2216286 M5.49881989,13.2982381 C5.50111844,13.3661347 5.42290385,13.422414 5.32610931,13.4236402 C5.22874013,13.4257701 5.15001476,13.3708461 5.14899318,13.3041113 C5.14899318,13.2355693 5.22542,13.1798063 5.32272533,13.1781928 C5.41951987,13.1762566 5.49881989,13.2307933 5.49881989,13.2982381 M6.17012451,13.2722283 C6.18174496,13.3384468 6.11444849,13.4064725 6.01835628,13.4245438 C5.92386029,13.4419697 5.83638766,13.4011156 5.82432026,13.3354779 C5.81257211,13.2675814 5.88114555,13.1996203 5.97545,13.1820007 C6.07173375,13.1650911 6.15786557,13.2049126 6.17012451,13.2722283',\n    'fill-rule': 'nonzero',\n  });\n\n  const gInner: SVGElement = document.createElementNS(\n    'http://www.w3.org/2000/svg',\n    'g'\n  );\n  gInner.setAttribute('fill', color);\n  gInner.append(pathOne, pathTwo);\n\n  const gOuter: SVGElement = document.createElementNS(\n    'http://www.w3.org/2000/svg',\n    'g'\n  );\n  setAttributes(gOuter, {\n    stroke: 'none',\n    'stroke-width': '1',\n    fill: 'none',\n    'fill-rule': 'evenodd',\n  });\n  gOuter.appendChild(gInner);\n\n  const gitHubSVG: SVGElement = document.createElementNS(\n    'http://www.w3.org/2000/svg',\n    'svg'\n  );\n  setAttributes(gitHubSVG, {\n    viewBox: '0 0 17 16',\n    version: '1.1',\n    xmlns: 'http://www.w3.org/2000/svg',\n    'xmlns:xlink': 'http://www.w3.org/1999/xlink',\n    width: size,\n    height: size,\n  });\n  gitHubSVG.classList.add('git-hub-svg');\n  gitHubSVG.appendChild(gOuter);\n\n  const gitHubLogoLink: HTMLAnchorElement = document.createElement('a');\n  gitHubLogoLink.classList.add('git-hub-logo-link');\n  setAttributes(gitHubLogoLink, {\n    href: projectName\n      ? `https://github.com/${gitHubUsername}/${projectName}`\n      : `https://github.com/${gitHubUsername}`,\n    rel: 'noopener noreferrer',\n    target: '_blank',\n    type: 'button',\n    'aria-label': 'GitHub profile link',\n  });\n  gitHubLogoLink.appendChild(gitHubSVG);\n\n  return gitHubLogoLink;\n}","import { InstructionsComponent } from \"../../components/buttons/instructions-component/instructions-component\";\nimport { createElement } from \"../../../utilities/random-utilities\";\n\n// 💭 Main Container One Parabellum: Heading and Help Button\n\nexport function createMainOneParabellumFragment(\n  instructionsButton: InstructionsComponent\n): DocumentFragment {\n  const parabellumHeading = createElement('h2');\n  parabellumHeading.textContent = 'Parabellum';\n\n  const mainContainerOneParabellumWrapper: HTMLDivElement = createElement(\n    'div',\n    ['parabellum'],\n    {\n      id: 'main-container-one-parabellum',\n    }\n  );\n\n  mainContainerOneParabellumWrapper.append(parabellumHeading);\n  instructionsButton.render(mainContainerOneParabellumWrapper);\n\n  const parabellumFragment: DocumentFragment = new DocumentFragment();\n  parabellumFragment.append(mainContainerOneParabellumWrapper);\n\n  return parabellumFragment;\n}","import { createElement } from '../../../utilities/random-utilities';\nimport { CycloneSitRepScroller } from '../../../utilities/cycloneSitRepScroller.ts/cyclone-sit-rep-scroller';\n\n// 💭 Main Container One Bellum: Situation Report (turn/attack state messaages)\n\nexport function createMainOneBellumFragment(\n  sitRepScrollerController: CycloneSitRepScroller\n): DocumentFragment {\n  const bellumHeading = createElement('h2');\n  bellumHeading.textContent = 'Parabellum';\n\n  const latestUpdatesHeading = createElement('h3');\n  latestUpdatesHeading.textContent = 'Situation Report:';\n\n  // 💭 --------------------------------------------------------------\n  \n  const mainContainerOneBellumWrapper: HTMLDivElement = createElement(\n    'div',\n    ['bellum'],\n    {\n      id: 'main-container-one-bellum',\n    }\n  );\n  mainContainerOneBellumWrapper.append(\n    latestUpdatesHeading,\n    sitRepScrollerController.element\n  );\n\n  const bellumFragment: DocumentFragment = new DocumentFragment();\n  bellumFragment.appendChild(mainContainerOneBellumWrapper);\n\n  return bellumFragment;\n}\n","import { createElement } from '../../../utilities/random-utilities';\n\n// 💭 Main Container One Post Bellum: <Insert Here>\n// ! Game over message with winner and loser text and a button to restart the game\n\nexport function createMainOnePostBellumFragment(): DocumentFragment {\n  // !\n\n  const mainContainerPostBellumWrapper: HTMLDivElement = createElement(\n    'div',\n    ['bellum'],\n    {\n      id: 'main-container-one-post-bellum',\n    }\n  );\n\n  const postBellumFragment: DocumentFragment = new DocumentFragment();\n  postBellumFragment.appendChild(mainContainerPostBellumWrapper);\n\n  return postBellumFragment;\n}","import { createElement } from \"./random-utilities\";\n\n/**\n * A container for dynamically swapping and managing fragments of the DOM.\n * \n * @class CycloneHotSwapContainer\n * @param {keyof HTMLElementTagNameMap} elementTag - The HTML element tag for the container (e.g., 'section', 'div').\n * @param {{ [key: string]: DocumentFragment }} fragments - A collection of swappable fragments, keyed by string identifiers.\n * @param {string} initialFragmentKey - The key of the initial fragment to render in the container.\n * @param {string[]} [classNames=[]] - An array of class names to apply to the container element (optional).\n * @param {Record<string, string>} [attributes={}] - A set of attributes to apply to the container element (optional).\n */\nexport class CycloneHotSwapContainer {\n  private readonly hotSwapContainer: HTMLElement;\n  private readonly fragmentsArray: DocumentFragment[];\n  #currentIndex: number;\n\n  constructor(\n    private readonly elementTag: keyof HTMLElementTagNameMap,\n    private readonly fragments: { [key: string]: DocumentFragment },\n    private readonly initialFragmentKey: string,\n    private readonly classNames: string[] = [],\n    private readonly attributes: Record<string, string> = {}\n  ) {\n    if (!fragments[initialFragmentKey]) {\n      throw new Error(\n        `Initial fragment with key \"${initialFragmentKey}\" does not exist.`\n      );\n    }\n\n    this.hotSwapContainer = createElement(\n      this.elementTag,\n      this.classNames,\n      this.attributes\n    );\n\n    this.fragmentsArray = Object.values(this.fragments);\n\n    this.#currentIndex = this.setInitialIndex(\n      this.fragmentsArray,\n      this.fragments,\n      this.initialFragmentKey\n    );\n\n    this.hotSwapContainer.appendChild(this.fragments[this.initialFragmentKey]);\n  }\n\n  public render(targetElement: HTMLElement) {\n    targetElement.appendChild(this.hotSwapContainer);\n  }\n\n  public swapFragmentByKey(key: string): void {\n    const fragment = this.getFragment(key);\n    this.swapFragment(fragment);\n    this.#currentIndex = this.fragmentsArray.indexOf(fragment);\n  }\n\n  public swapByOrder(): void {\n    this.#currentIndex = (this.#currentIndex + 1) % this.fragmentsArray.length;\n    this.swapFragment(this.fragmentsArray[this.#currentIndex]);\n  }\n\n  private setInitialIndex(\n    fragmentsArray: DocumentFragment[],\n    fragments: { [key: string]: DocumentFragment },\n    initialFragmentKey: string\n  ): number {\n    const initialIndex = fragmentsArray.indexOf(fragments[initialFragmentKey]);\n    if (initialIndex === -1) {\n      throw new Error(\n        `Initial fragment with key \"${initialFragmentKey}\" does not exist.`\n      );\n    }\n    return initialIndex;\n  }\n\n  private getFragment(key: string): DocumentFragment {\n    const fragment = this.fragments[key];\n    if (!fragment) {\n      throw new Error(`Fragment with key \"${key}\" does not exist.`);\n    }\n    return fragment;\n  }\n\n  private swapFragment(fragment: DocumentFragment) {\n    this.hotSwapContainer.replaceChildren(fragment);\n  }\n}","import { BattleshipFleetBuilder } from '../logic/bs-fleet-builder/bs-fleet-builder';\nimport { BattleshipBoardBuilder } from '../logic/bs-gameboard-builder/bs-gameboard-builder';\nimport { BattleshipBoardController } from '../logic/bs-gameboard-controller/bs-gameboard-controller';\nimport { BattleshipBoardRepository } from '../logic/bs-gameboard-repository/bs-gameboard-repository';\nimport {\n  BattleshipBuilder,\n  SHIP_SYMBOLS\n} from '../logic/bs-ship-builder/bs-ship-builder';\nimport { PlayerContext, PlayerType } from './state-types';\n\n// 💭 --------------------------------------------------------------\n// 💭 Enumerations/Helpers\n\nexport enum AnglesOfRotation {\n  Degrees0 = 0,\n  Degrees90 = 90,\n  Degrees180 = 180,\n  Degrees270 = 270\n};\nexport enum ShipType {\n  Battleship = 'battleship',\n  Carrier = 'carrier',\n  Cruiser = 'cruiser',\n  Destroyer = 'destroyer',\n  PatrolBoat = 'patrolBoat',\n  Submarine = 'submarine',\n};\n\nexport const getShipTypes = (version: FleetVersion): ShipType[] =>\n  version === 1990\n    ? [\n        ShipType.Carrier,\n        ShipType.Battleship,\n        ShipType.Submarine,\n        ShipType.Destroyer,\n        ShipType.PatrolBoat,\n      ]\n    : [\n        ShipType.Carrier,\n        ShipType.Battleship,\n        ShipType.Submarine,\n        ShipType.Cruiser,\n        ShipType.Destroyer,\n        ShipType.PatrolBoat,\n      ];\n\n// 💭 --------------------------------------------------------------\n// 💭 Types\n\nexport type AngleOfRotation = null | AnglesOfRotation;\nexport type AxisArrayKey = `row-${number}` | `column-${number}`;\nexport type Coordinates = [number, number];\nexport type CoordinatesArray = Coordinates[];\nexport type CoordinatesToString = `[${number}, ${number}]`;\nexport type OccupiedCoordinatesSet = Set<CoordinatesToString> | null;\nexport type Fleet = {\n  [key in ShipType]?: BattleshipBuilder;\n};\nexport type FleetSet = { [key in PlayerType]: Fleet };\nexport type FleetConfigs = {\n  [key in ShipType]?: ShipConfig;\n};\nexport type FleetCoordinates = {\n  [key in ShipType]?: OccupiedCoordinatesSet | null;\n};\n\nexport type InBoundRotationalPlacePieceParamsForFleet = {\n  [key in ShipType]?: RotationalPositionMap | null;\n};\nexport type Gameboard = symbol[][];\nexport type OutOfBounds = 'outOfBounds';\nexport type Orientation = 'horizontal' | 'vertical';\nexport type PositionArray = IPosition[];\nexport type RotatedCoordinatesValue = Coordinates | OutOfBounds;\nexport type RotatedPlacePieceParams = {\n  [Key in AnglesOfRotation]?: RotatedPlacePieceParamsValue;\n};\nexport type RotatedPlacePieceParamsValue = IPlacePieceParams | OutOfBounds;\nexport type RotatedPlacePieceConfigurations = IPlacePieceParams | OutOfBounds;\nexport type ShipConfig = {\n  type: ShipType;\n  version?: FleetVersion;\n};\nexport type ShipLength = 2 | 3 | 4 | 5;\nexport type ShipSymbols = {\n  [key in ShipType]: symbol; // Each key in ShipType maps to a symbol\n};\nexport type ShipSymbolDescription = 'CA' | 'BS' | 'CR' | 'SB' | 'DD' | 'PB';\nexport type ShipSymbolValueArray = ShipSymbolValue[];\nexport type ShipSymbolValue = typeof SHIP_SYMBOLS[ShipType];\nexport type SizeLookupKey = `${ShipType}-${FleetVersion}`;\nexport type RotationalPositionMap = Map<AnglesOfRotation, IPlacePieceParams>;\nexport type FleetVersion = 1990 | 2002;\n\n// 💭 --------------------------------------------------------------\n// 💭 Interfaces\n\ninterface IGridGameboard<T> {\n  readonly board: T[][];\n  fillValue: T;\n};\nexport interface IGridGameboardSquare<T> extends IGridGameboard<T> {\n  boardSize: number;\n};\nexport interface IBattlehipFleetBuilderSet {\n  playerOneFleetBuilder: BattleshipFleetBuilder;\n  playerTwoFleetBuilder: BattleshipFleetBuilder;\n}\nexport interface IBattleshipGameboardBuilderSet {\n  playerOneBoardBuilder: BattleshipBoardBuilder;\n  playerTwoBoardBuilder: BattleshipBoardBuilder;\n}\nexport interface IBattleshipFleetBuilderSet {\n  playerOneFleetBuilder: BattleshipFleetBuilder;\n  playerTwoFleetBuilder: BattleshipFleetBuilder;\n}\nexport interface IBattleshipGameboardController extends IGridGameboardController {\n  playerState: Omit<PlayerContext, 'gameboardController' | 'fleetBuilder'>;\n  getValidPositions(\n    shipPlacementConfigs: IShipPlacementConfigurations\n  ): IValidPositionsResult;\n  movePiece(ship: BattleshipBuilder, newBowCoordinates: Coordinates): void;\n  placePiece(options: IPlacePieceWrapperParams): void;\n  prettyPrint(): void;\n  removePiece(ship: BattleshipBuilder, resetInitialConfigs: boolean): void;\n  removeAllPieces(fleet: Fleet): void;\n  rotatePiece(ship: BattleshipBuilder): void;\n}\nexport interface IBattleshipGameboardControllerSet {\n  playerOneBoardController: BattleshipBoardController;\n  playerTwoBoardController: BattleshipBoardController;\n}\nexport interface IBattleshipGameboardRepositorySet {\n  playerOneBoardRepository: BattleshipBoardRepository;\n  playerTwoBoardRepository: BattleshipBoardRepository;\n}\ninterface IGridGameboardController {\n  placePiece(...args: any): void;\n  removePiece(...args: any): void;\n  removeAllPieces(...args: any): void;\n}\nexport interface IPlacementConfigurations {\n  coordinatesArray: CoordinatesArray | null;\n  orientation: Orientation | null;\n};\nexport interface IRotationalPivotConfigurations extends IPlacementConfigurations {\n  transientAngleOfRotation: AngleOfRotation;\n};\nexport interface IPlacePieceParams {\n  coordinates: Coordinates;\n  orientation: Orientation;\n};\nexport interface IPlacePieceWrapperParams extends IPlacePieceParams {\n  ship: BattleshipBuilder;\n};\nexport interface IPlacePieceCallbackParams extends IPlacePieceWrapperParams {\n  battleshipBoardBuilder: BattleshipBoardBuilder\n  battleshipBoardController: BattleshipBoardController;\n  battleshipBoardRepository: BattleshipBoardRepository;\n};\nexport interface IPosition {\n  bow: Coordinates; // [rowIndex, colIndex]\n  stern: Coordinates; // [rowIndex, colIndex]\n};\nexport interface IShipOptions {\n  hitCounter: number;\n  length: ShipLength;\n  type: ShipType;\n  version: FleetVersion;\n};\nexport interface IShipPlacementConfigurations {\n  orientation: Orientation;\n  shipLength: ShipLength;\n};\nexport interface ITestCaseShipHit {\n  expected: string; // Expected output\n  hits: number; // Function returning the string to be tested\n};\nexport interface ITestCaseValidPositions {\n  shipPlacementConfigs: IShipPlacementConfigurations;\n  validPositions: IValidPositionsResult;\n};\nexport interface IValidPlacementCallbackParams extends IShipPlacementConfigurations {\n  battleshipBoardBuilder: BattleshipBoardBuilder;\n  battleshipBoardController: BattleshipBoardController;\n};\nexport interface IValidPositionsResult {\n  [key: AxisArrayKey]: PositionArray;\n};","import {\n  AnglesOfRotation,\n  Coordinates,\n  OccupiedCoordinatesSet,\n  CoordinatesToString,\n  FleetCoordinates,\n  IPlacePieceParams,\n  IPosition,\n  Orientation,\n  OutOfBounds,\n  RotatedCoordinatesValue,\n  ShipLength,\n  ShipType,\n  PositionArray,\n  ShipSymbolDescription,\n  CoordinatesArray,\n} from '../types/logic-types';\nimport { PlayerType } from '../types/state-types';\n\nexport const isAngleOfRotation = (value: unknown): value is AnglesOfRotation => {\n  return Object.values(AnglesOfRotation).includes(value as ShipType);\n}\nexport const isCoordinates = (value: unknown): value is Coordinates => {\n  if (!Array.isArray(value) || value.length !== 2) return false;\n\n  return value.every((coordinate) => typeof coordinate === 'number');\n};\nexport const isCoordinatesArray = (\n  value: unknown\n): value is CoordinatesArray =>\n  Array.isArray(value) && value.length > 0 && value.every(isCoordinates);\n\nexport const isOccupiedCoordinatesSet = (\n  value: unknown\n): value is OccupiedCoordinatesSet => {\n  if (value === null) return true;\n  if (!(value instanceof Set)) return false;\n\n  for (const member of value) {\n    if (!isCoordinatesToString(member)) {\n      return false;\n    }\n  }\n\n  return true;\n};\nexport const isFleetCoordinates = (\n  value: unknown\n): value is FleetCoordinates => {\n  if (typeof value !== 'object' || value === null) return false;\n\n  for (const key in value) {\n    if (!Object.values(ShipType).includes(key as ShipType)) {\n      return false;\n    }\n\n    const OccupiedCoordinatesSetOrNull = (value as FleetCoordinates)[\n      key as ShipType\n    ];\n\n    if (\n      OccupiedCoordinatesSetOrNull !== null &&\n      !isOccupiedCoordinatesSet(OccupiedCoordinatesSetOrNull)\n    ) {\n      return false;\n    }\n  }\n  return true;\n};\nexport const isHTMLDivElement = (el: Element): el is HTMLDivElement => el instanceof HTMLDivElement;\nexport const isHTMLDivElementArray = (value: unknown): value is HTMLDivElement[] =>\n  Array.isArray(value) && value.length > 0 && value.every(isHTMLDivElement);\nexport const isHTMLElement = (el: Element): el is HTMLElement => el instanceof HTMLElement;\nexport const isPlainObject = (value: unknown): value is object => {\n  if (typeof value !== 'object' || value === null) return false;\n\n  const proto = Object.getPrototypeOf(value);\n  return proto === Object.prototype || proto === null;\n  // ? Why `proto === null`: Object.create(null) is a valid plain object.\n};\nexport const isOrientation = (value: unknown): value is Orientation => {\n  if (typeof value !== 'string') return false;\n  return ['horizontal', 'vertical'].includes(value);\n};\nexport const isOutOfBounds = (value: unknown): value is OutOfBounds => {\n  return value === 'outOfBounds';\n};\nexport const isPlacePieceParams = (\n  value: unknown\n): value is IPlacePieceParams => {\n  if (typeof value !== 'object' || value === null) return false;\n\n  if (!isCoordinates((value as IPlacePieceParams).coordinates)) return false;\n\n  return true;\n};\nexport const isPlayerType = (value: unknown): value is PlayerType => {\n  return (\n    typeof value === 'string' && (value === 'player' || value === 'opponent')\n  );\n};\nexport const isPosition = (value: unknown): value is IPosition => {\n  if (!isPlainObject(value)) return false;\n\n  const { bow, stern } = value as IPosition;\n\n  return isCoordinates(bow) && isCoordinates(stern);\n};\nexport const isPositionsArray = (value: unknown): value is PositionArray => {\n  if (!Array.isArray(value)) return false;\n\n  return value.every((position) => isPosition(position));\n};\nexport const isCoordinatesToString = (\n  value: unknown\n): value is CoordinatesToString => {\n  if (typeof value !== 'string') return false;\n\n  const match = value.match(/^\\[\\d{1}, \\d{1}\\]$/);\n  return match !== null;\n};\nexport const isRotatedCoordinatesValue = (\n  value: unknown\n): value is RotatedCoordinatesValue => {\n  return isCoordinates(value) || isOutOfBounds(value);\n};\nexport const isShipLength = (value: unknown): value is ShipLength => {\n  return typeof value === 'number' && [2, 3, 4, 5].includes(value);\n};\nexport const isShipSymbolDescription = (\n  value: unknown\n): value is ShipSymbolDescription => {\n  return (\n    typeof value === 'string' &&\n    ['CA', 'BS', 'CR', 'SB', 'DD', 'PB'].includes(value)\n  );\n};\nexport const isShipType = (value: unknown): value is ShipType => {\n  return Object.values(ShipType).includes(value as ShipType);\n};","import { BattleshipFleetBuilder } from '../logic/bs-fleet-builder/bs-fleet-builder';\nimport { BattleshipBoardBuilder } from '../logic/bs-gameboard-builder/bs-gameboard-builder';\nimport { BattleshipBoardController } from '../logic/bs-gameboard-controller/bs-gameboard-controller';\nimport { BattleshipBoardRepository } from '../logic/bs-gameboard-repository/bs-gameboard-repository';\nimport { ShipType } from './logic-types';\n\n// 💭 --------------------------------------------------------------\n\nexport type AttackResult = {\n  hit: boolean;\n  isSunk?: boolean;\n  type?: ShipType;\n};\nexport type CurrentPlayer = PlayerType | null;\nexport type GamePhase = 'parabellum' | 'bellum' | 'postBellum';\nexport type MessageSubject = 'You' | 'Your opponent';\nexport type MessageTarget = 'your' | 'their'; \nexport type MessageType = 'turn' | 'attack';\nexport type PlayerType = 'player' | 'opponent';\n\nexport enum gameboardStateValue {\n  inactive = 0,\n  active = 1,\n}\n// 💭 --------------------------------------------------------------\n\nexport interface PlayerContext {\n  gameboardBuilder: BattleshipBoardBuilder;\n  gameboardController: BattleshipBoardController;\n  gameboardRepository: BattleshipBoardRepository;\n  fleetBuilder: BattleshipFleetBuilder;\n};\n\nexport interface PlayerCore {\n  player: PlayerContext;\n  opponent: PlayerContext;\n}","// 💭 State\nimport { GameState } from '../../../../state/game-state';\n\n// 💭 Logic\nimport { BattleshipBuilder } from '../../../../logic/bs-ship-builder/bs-ship-builder';\nimport { BattleshipFleetBuilder } from '../../../../logic/bs-fleet-builder/bs-fleet-builder';\nimport { BattleshipBoardController } from '../../../../logic/bs-gameboard-controller/bs-gameboard-controller';\n\n// 💭 Types\nimport {\n  isCoordinatesArray,\n  isHTMLDivElementArray,\n  isHTMLElement,\n  isOrientation,\n  isShipLength,\n  isShipType,\n} from '../../../../types/type-guards'\nimport {\n  Coordinates,\n  CoordinatesArray,\n  Fleet,\n  Gameboard,\n  Orientation,\n  ShipLength,\n  ShipSymbolValue,\n  ShipSymbolValueArray,\n  ShipType,\n  } from '../../../../types/logic-types'\nimport {\n  AttackResult,\n  PlayerContext,\n  gameboardStateValue,\n} from '../../../../types/state-types';\nimport { GridCellDataKey } from '../../../../types/dom-types';\nimport {\n  CloneSnapOffset,\n  DragState,\n  ShipBorderValueSplit,\n} from '../../component-types';\nimport { GridPlacementValue } from '../../../../types/css-types';\n\n// 💭 Utilities\nimport {\n  areArraysEqual,\n  createElement,\n  getConvertedTypeFromAttr,\n  sleep,\n  waitForAnimationEnd,\n  waitForTransitionEnd,\n} from '../../../../utilities/random-utilities';\n\n// 💭 Stylesheets\nimport '../gameboard-component.scss';\nimport '../gameboard-animations.scss';\n\n// 💭 --------------------------------------------------------------\n\nexport class PlayerGameboardComponent {\n  public id: string = 'player';\n\n  // 💭 Elements\n  public gameboardContainer: HTMLElement;\n  private gameboard: DocumentFragment;\n  private fleetElements: Map<ShipType, HTMLDivElement> = new Map();\n  private dragImage: HTMLImageElement;\n  private shipDragClone: HTMLDivElement;\n\n  // 💭 Event listeners\n  private listenersAdded: boolean = false;\n  private dragState: DragState = {\n    currentShipInstance: null,\n    initialPlacementConfigurations: null,\n    isValidDropTarget: false,\n    currentDragOverCell: null,\n    cloneSnapOffset: null,\n    shipBorderValueSplit: null,\n  };\n  private dragEventCallbacks: Record<string, (e: DragEvent) => void> = {\n    dragstart: (e: DragEvent) => this.handleShipDragStart(e, this.dragState),\n    drag: (e: DragEvent) => this.handleShipDrag(e, this.dragState),\n    dragenter: (e: DragEvent) => this.handleShipDragEnter(e),\n    dragleave: (e: DragEvent) => this.handleShipDragLeave(e),\n    dragover: (e: DragEvent) => this.handleShipDragOver(e, this.dragState),\n    drop: (e: DragEvent) => this.handleShipDrop(e, this.dragState),\n    dragend: (e: DragEvent) => this.handleShipDragEnd(e, this.dragState),\n  };\n\n  constructor(\n    public readonly playerState: PlayerContext,\n    private readonly gameState: GameState\n  ) {\n    this.gameboardContainer = this.generateBoardContainer(\n      this.playerState.gameboardBuilder.boardSize\n    );\n\n    this.gameboard = this.generateBoardFragment(\n      this.playerState.gameboardBuilder.boardSize\n    );\n    this.dragImage = this.createDragImage();\n    this.shipDragClone = this.createShipDragClone();\n\n    this.gameState.eventBus.on(\n      'refreshGameboard',\n      this.refreshGameboardWrapper\n    );\n    this.gameState.eventBus.on(\n      'togglePlayerGameboardControls',\n      this.toggleGameboardControls\n    );\n    this.gameState.eventBus.on('receiveBillowAttack', this.receiveAttack);\n  }\n\n  public render(targetElement: HTMLElement): void {\n    if (!targetElement) {\n      throw new Error(\n        `Target element not found with ID - ${this.id} and selector - \"${targetElement}\".`\n      );\n    }\n\n    this.gameboardContainer.append(\n      this.dragImage,\n      this.shipDragClone,\n      this.gameboard\n    );\n    this.handleFleetPlacement(\n      this.playerState.fleetBuilder,\n      this.fleetElements\n    );\n    this.toggleParabellumListeners();\n\n    targetElement.appendChild(this.gameboardContainer);\n  }\n\n  public toggleParabellumListeners(): void {\n    if (!this.gameboardContainer) return;\n\n    const method = this.listenersAdded\n      ? 'removeEventListener'\n      : 'addEventListener';\n\n    // * Toggle Drag Events\n    Object.entries(this.dragEventCallbacks).forEach(([event, callback]) => {\n      this.gameboardContainer[method](event, callback as EventListener);\n    });\n\n    // * Toggle Rotation Event\n    this.gameboardContainer[method](\n      'click',\n      this.handleShipRotation as EventListener\n    );\n\n    this.listenersAdded = !this.listenersAdded;\n  }\n\n  private togglePlayerTurn(attackResult: AttackResult): void {\n    const { hit, isSunk } = attackResult;\n\n    if ((hit && !isSunk) || !hit) {\n      this.gameState.togglePlayerTurn();\n      return;\n    }\n\n    if (hit && isSunk) {\n      const gameOver = this.checkForWin();\n      if (!gameOver) {\n        this.gameState.togglePlayerTurn();\n        return;\n      }\n\n      // ? if it is game over, do some shit\n    }\n  }\n\n  public toggleShipsDraggable(): void {\n    this.fleetElements.forEach((shipElement) => {\n      shipElement.removeAttribute('draggable');\n    });\n  }\n\n  public toggleShipAdriftClass(): void {\n    this.fleetElements.forEach((shipElement) => {\n      shipElement.classList.remove('adrift');\n    });\n  }\n\n  // 💭 --------------------------------------------------------------\n  // 💭 Helpers\n\n  private applyGridPlacementValue(\n    gridPlacementValue: GridPlacementValue,\n    gridCrossAxis: number,\n    shipElement: HTMLDivElement,\n    orientation: Orientation,\n    shipLength: ShipLength\n  ): void {\n    const isHorizontal: boolean = orientation === 'horizontal';\n    if (isHorizontal) {\n      shipElement.style.gridColumn = gridPlacementValue;\n      shipElement.style.gridRow = gridCrossAxis.toString();\n      shipElement.style.gridTemplateColumns = `repeat(${shipLength}, 1fr)`;\n    } else {\n      shipElement.style.gridRow = gridPlacementValue;\n      shipElement.style.gridColumn = gridCrossAxis.toString();\n      shipElement.style.gridTemplateRows = `repeat(${shipLength}, 1fr)`;\n    }\n  }\n\n  // TODO: move this to game state\n  private checkForWin(): boolean {\n    if (!this.playerState.gameboardRepository.areAllShipsSunk()) return false;\n\n    // TODO: Do something fun with this value.. set winner in repository ?\n    alert(\n      `${\n        this.gameState.currentPlayer === 'player' ? 'You win' : 'You lose'\n      } mother fucker! #TYPESHIT`\n    );\n\n    this.gameState.transitionToNextPhase();\n\n    return true;\n  }\n\n  private createDragImage(): HTMLImageElement {\n    const invisibleImage = createElement(\n      'img',\n      ['drag-image', 'accessibility'],\n      {\n        id: `${this.id}-drag-image`,\n        src: 'https://cyclone-studios.s3.us-east-2.amazonaws.com/s3_misc-images/1x1_transparent.png',\n      }\n    );\n\n    return invisibleImage;\n  }\n\n  private createShipDragClone(): HTMLDivElement {\n    const shipCloneElement: HTMLDivElement = createElement(\n      'div',\n      ['ship-container-clone'],\n      {\n        id: `${this.id}-ship-drag-clone`,\n      }\n    );\n\n    return shipCloneElement;\n  }\n\n  private createBackgroundCellsFragment(\n    gameboard: Gameboard\n  ): DocumentFragment {\n    const cellFragment: DocumentFragment = new DocumentFragment();\n\n    gameboard.forEach((row: ShipSymbolValueArray, rowIndex) => {\n      row.forEach((symbol: ShipSymbolValue, colIndex) => {\n        const symbolDescription: string = symbol.description!.toLowerCase();\n\n        const hitMarker: HTMLDivElement = createElement('div', [\n          `${this.id}-hit-marker`,\n          'hit-marker',\n        ]);\n\n        const gridCell: HTMLDivElement = createElement(\n          'div',\n          [\n            `${this.id}-${symbolDescription}-cell`,\n            `player-${symbolDescription}-cell`,\n            'grid-cell',\n          ],\n          {\n            'data-x': colIndex.toString(),\n            'data-y': rowIndex.toString(),\n            'aria-label': `Row ${rowIndex + 1}, Column ${colIndex + 1}`,\n            role: 'gridCell',\n          }\n        );\n        gridCell.appendChild(hitMarker);\n\n        const gridCellContainer: HTMLDivElement = createElement('div', [\n          `${this.id}-${symbolDescription}-grid-cell-container`,\n          'grid-cell-container',\n        ]);\n        gridCellContainer.appendChild(gridCell);\n\n        cellFragment.appendChild(gridCellContainer);\n      });\n    });\n\n    return cellFragment;\n  }\n\n  private createShipElement(\n    shipType: ShipType,\n    shipLength: ShipLength,\n    gridPlacementValue: GridPlacementValue,\n    gridCrossAxis: number,\n    orientation: Orientation\n  ): HTMLDivElement {\n    const shipUnitFragment: DocumentFragment = this.generateShipUnitFragment(\n      shipLength,\n      shipType,\n      orientation,\n      this.id,\n      gridPlacementValue,\n      gridCrossAxis\n    );\n\n    const shipContainerElement: HTMLDivElement = createElement(\n      'div',\n      ['ship-container', 'player-ship-container', 'adrift'],\n      {\n        id: `${this.id}-${shipType}-container`,\n        'data-dragging': 'false',\n        'data-length': shipLength.toString(),\n        'data-orientation': orientation,\n        'data-shipType': shipType,\n        draggable: 'true',\n      }\n    );\n\n    shipContainerElement.appendChild(shipUnitFragment);\n\n    this.applyGridPlacementValue(\n      gridPlacementValue,\n      gridCrossAxis,\n      shipContainerElement,\n      orientation,\n      shipLength\n    );\n\n    this.syncShipUnitDataAttributes(shipContainerElement, shipType);\n\n    return shipContainerElement;\n  }\n\n  private generateBoardContainer(boardSize: number): HTMLElement {\n    const gameboardContainer: HTMLElement = createElement(\n      'section',\n      ['gameboard-container'],\n      {\n        id: `${this.id}-gameboard-container`,\n      }\n    );\n\n    gameboardContainer.style.setProperty('--grid-size', boardSize.toString());\n\n    return gameboardContainer;\n  }\n\n  private generateBoardFragment(boardSize: number): DocumentFragment {\n    const gameboardBackground: HTMLDivElement = createElement(\n      'div',\n      ['gameboard-background'],\n      {\n        id: `${this.id}-gameboard-background`,\n      }\n    );\n    gameboardBackground.appendChild(\n      this.createBackgroundCellsFragment(\n        this.playerState.gameboardBuilder.board\n      )\n    );\n\n    const gameboard = createElement('div', ['gameboard'], {\n      id: `${this.id}-gameboard`,\n    });\n    gameboard.style.setProperty('--grid-size', boardSize.toString());\n\n    const boardFragment: DocumentFragment = new DocumentFragment();\n    boardFragment.append(gameboardBackground, gameboard);\n\n    return boardFragment;\n  }\n\n  private generateShipUnitFragment(\n    shipLength: ShipLength,\n    shipType: ShipType,\n    orientation: Orientation,\n    id: string,\n    gridPlacementValue: GridPlacementValue,\n    gridCrossAxis: number\n  ): DocumentFragment {\n    const shipUnitFragment: DocumentFragment = new DocumentFragment();\n\n    for (let i = 0; i < shipLength; i++) {\n      const isBow: boolean = i === 0;\n      const isStern: boolean = i === shipLength - 1;\n      const shipUnit: HTMLDivElement = createElement('div', [\n        'ship-unit',\n        `${shipType}-unit`,\n        `${id}-${shipType}-unit`,\n      ]);\n\n      const isHorizontal: boolean = orientation === 'horizontal';\n\n      isHorizontal\n        ? shipUnit.classList.add('ship-unit-horizontal')\n        : shipUnit.classList.add('ship-unit-vertical');\n\n      if (isBow) {\n        shipUnit.classList.add('ship-bow');\n        shipUnit.setAttribute('id', `${id}-${shipType}-bow`);\n      }\n\n      if (isStern) {\n        shipUnit.classList.add('ship-stern');\n        shipUnit.setAttribute('id', `${id}-${shipType}-stern`);\n      }\n\n      shipUnitFragment.appendChild(shipUnit);\n    }\n\n    return shipUnitFragment;\n  }\n\n  private getGridPlacementValue(\n    coordinates: Coordinates,\n    orientation: Orientation,\n    shipLength: ShipLength\n  ): [GridPlacementValue, number] {\n    const isHorizontal = orientation === 'horizontal';\n\n    const [x, y] = coordinates;\n    const gridStartMain = isHorizontal ? x + 1 : y + 1;\n    const gridCrossAxis = isHorizontal ? y + 1 : x + 1;\n\n    return [`${gridStartMain} / span ${shipLength}`, gridCrossAxis];\n  }\n\n  // TODO: create return signature type\n  private getShipPlacementData(shipType: ShipType): {\n    bowCoordinates: Coordinates;\n    orientation: Orientation;\n    shipLength: ShipLength;\n  } {\n    const ship: BattleshipBuilder =\n      this.playerState.fleetBuilder.getShip(shipType);\n    \n    const { coordinatesArray, orientation } =\n      ship.currentplacementConfigurations;\n\n    if (!coordinatesArray || !orientation) {\n      throw new Error(`The ${ship.type} has no placement configurations.`);\n    }\n\n    return {\n      bowCoordinates: coordinatesArray[0],\n      orientation,\n      shipLength: ship.length,\n    };\n  }\n\n  private handleFleetPlacement(\n    fleetBuilder: BattleshipFleetBuilder,\n    fleetElements: Map<ShipType, HTMLDivElement>\n  ) {\n    this.updateFleetElements(fleetBuilder);\n    this.placeFleetOnGameboard(fleetElements);\n  }\n\n  private async cookShipUnit(\n    shipType: ShipType,\n    attackCoordinates: Coordinates\n  ): Promise<void> {\n    const shipContainerElement = this.fleetElements.get(shipType);\n\n    if (!shipContainerElement) {\n      throw new Error(`The ${shipType} has no fleet element.`);\n    }\n    const [x, y]: Coordinates = attackCoordinates; // TODO: fix this\n    const attackedShipUnit = shipContainerElement.querySelector(\n      `[data-x=\"${x}\"][data-y=\"${y}\"]`\n    );\n    attackedShipUnit?.classList.add('cooked');\n\n    if (attackedShipUnit) {\n      attackedShipUnit.classList.add('cooked');\n\n      if (!isHTMLElement(attackedShipUnit))\n        throw new Error('The attacked ship must be an HTML Element.');\n\n      // '1600' +100ms after transition end in main.scss (1.5s)\n      await waitForTransitionEnd(attackedShipUnit, 999);\n      await sleep(2000);\n    } else {\n      console.warn(\n        `No ship unit found at coordinates (${x}, ${y}) on ${shipType}.`\n      );\n    }\n  }\n\n  private handleSinkingShip = async (shipType: ShipType): Promise<void> => {\n    const shipContainerElement = this.fleetElements.get(shipType);\n    \n    if (!shipContainerElement) {\n      throw new Error(`The ${shipType} has no fleet element.`);\n    }\n\n    await this.sinkShip(shipContainerElement);\n  };\n\n  private hasTargetBeenAttacked(coordinates: Coordinates): boolean {\n    const alreadyAttacked =\n      this.playerState.gameboardRepository.hasTargetBeenAttacked(coordinates);\n\n    if (!alreadyAttacked) {\n      this.playerState.gameboardRepository.addAttackedCoordinates(coordinates);\n    }\n\n    return alreadyAttacked;\n  }\n\n  private placeFleetOnGameboard(\n    fleetElements: Map<ShipType, HTMLDivElement>\n  ): void {\n    const gameboard =\n      this.gameboardContainer.querySelector<HTMLDivElement>('.gameboard');\n\n    if (!gameboard) {\n      throw new Error('Gameboard container not found.');\n    }\n\n    fleetElements.forEach((shipElement) => gameboard.appendChild(shipElement));\n  }\n\n  private _receiveAttack = async (\n    attackCoordinates: Coordinates\n  ): Promise<AttackResult> => {\n    const gridCellDataKey: GridCellDataKey = `[data-x=\"${attackCoordinates[0]}\"][data-y=\"${attackCoordinates[1]}\"]`;\n    const gridCell: HTMLDivElement | null =\n      this.gameboardContainer.querySelector<HTMLDivElement>(gridCellDataKey);\n\n    if (!gridCell) {\n      throw new Error('Grid cell not found.');\n    }\n\n    if (this.hasTargetBeenAttacked(attackCoordinates)) {\n      /* </💭>\n      ┌─────────────────────────────────────────────────────────────────────────────┐\n      │ [INFO]                                                                      │\n      │ This case is unreachable with Billow's coordinate logic,                    │\n      │ but valid when playing against a human who may repeat attacks.              │\n      │                                                                             │\n      │ [BACKLOG]                                                                   │ \n      │ TODO: Add a flash animation to indicate \"Cell already attacked\".             │\n      │                                                                             │\n      └─────────────────────────────────────────────────────────────────────────────┘\n      */\n\n      console.warn('Cell has already been attacked:', attackCoordinates);\n\n      return {\n        hit: false,\n      } as AttackResult;\n    }\n\n    const attackResult: AttackResult =\n      this.playerState.gameboardController.receiveAttack(attackCoordinates);\n\n    try {\n      await this.triggerPrePlayerToggleAnimations(\n        attackResult,\n        gridCell,\n        attackCoordinates\n      );\n    } catch (error) {\n      console.error('Error in triggerPrePlayerToggleAnimations', error);\n    }\n\n    this.togglePlayerTurn(attackResult);\n\n    return attackResult;\n  };\n\n  private receiveAttack = async (\n    attackCoordinates: Coordinates\n  ): Promise<AttackResult> => {\n    return await this._receiveAttack(attackCoordinates);\n  };\n\n  private refreshGameboard(boardContainer: HTMLElement): void {\n    /* </💭>\n    ┌─────────────────────────────────────────────────────────────────────────────┐\n    │ [BACKLOG]                                                                   │\n    │ TODO: Refactor this method to remove only the ship being moved and          │\n    │ re-place it at the new position instead of resetting the entire board. This │\n    │ will improve performance, preserve other ship states, and reduce unnecessary│\n    │ operations.                                                                 │\n    └─────────────────────────────────────────────────────────────────────────────┘\n   */\n\n    const gameboard = boardContainer.querySelector(`#${this.id}-gameboard`);\n    const gameboardBackground = boardContainer.querySelector(\n      `#${this.id}-gameboard-background`\n    );\n\n    if (!gameboard || !gameboardBackground)\n      throw new Error('Missing gameboard and/or gameboard background elements');\n\n    this.gameboardContainer.removeChild(gameboard);\n    this.gameboardContainer.removeChild(gameboardBackground);\n    this.shipDragClone.classList.remove('visible');\n\n    this.gameboard = this.generateBoardFragment(\n      this.playerState.gameboardBuilder.boardSize\n    );\n\n    this.gameboardContainer.appendChild(this.gameboard);\n\n    this.handleFleetPlacement(\n      this.playerState.fleetBuilder,\n      this.fleetElements\n    );\n  }\n\n  private refreshGameboardWrapper = (): void => {\n    this.refreshGameboard(this.gameboardContainer);\n  };\n\n  private setFleetElement = (\n    shipType: ShipType,\n    shipLength: ShipLength,\n    gridPlacementValue: GridPlacementValue,\n    gridCrossAxis: number,\n    orientation: Orientation\n  ) => {\n    const shipElement: HTMLDivElement = this.createShipElement(\n      shipType,\n      shipLength,\n      gridPlacementValue,\n      gridCrossAxis,\n      orientation\n    );\n\n    this.fleetElements.set(shipType, shipElement);\n  };\n\n  private syncShipUnitDataAttributes = (\n    shipContainerElement: HTMLDivElement,\n    shipType: ShipType\n  ): void => {\n    const ship: BattleshipBuilder =\n      this.playerState.fleetBuilder.getShip(shipType);\n\n    const { coordinatesArray } = ship.currentplacementConfigurations;\n\n    if (!isCoordinatesArray(coordinatesArray)) {\n      throw new Error(\n        \"The ship's coordinates array is improperly structured or non-existent.\"\n      );\n    }\n\n    const shipUnitElements = Array.from(shipContainerElement.children).filter(\n      isHTMLElement\n    );\n\n    if (!isHTMLDivElementArray(shipUnitElements))\n      throw new Error(\"All ship unit's must be HTML DIV elements.\");\n\n    // The length of the coordinates should be exactly the amount of ship unit elements.\n    if (coordinatesArray.length !== shipUnitElements.length) {\n      throw new Error(\n        `Mismatch between ship units (${shipUnitElements.length}) and coordinates (${coordinatesArray.length}) for ${shipType}`\n      );\n    }\n\n    coordinatesArray.forEach(([x, y], index) => {\n      const unit = shipUnitElements[index];\n      unit.setAttribute('data-x', String(x));\n      unit.setAttribute('data-y', String(y));\n    });\n  };\n\n  private sinkShip = async (\n    shipContainerElement: HTMLDivElement\n  ): Promise<void> => {\n    const DELAY_AFTER_TRANSITION_SECOND: number = 1;\n\n    shipContainerElement.classList.add('sunk');\n\n    await waitForAnimationEnd(shipContainerElement);\n\n    await sleep(DELAY_AFTER_TRANSITION_SECOND * 1000);\n  };\n\n  private toggleGameboardControls = (\n    newGameboardState: gameboardStateValue\n  ): void => {\n    this.gameboardContainer.classList.toggle(\n      'locked',\n      newGameboardState === gameboardStateValue.inactive\n    );\n  };\n\n  // `attackCoordinates` is optional because it is not needed for the opponent gameboard.\n  // This is done to prepare for merging the opponent and player gameboard component modules.\n  private triggerPrePlayerToggleAnimations = async (\n    attackResult: AttackResult,\n    gridCell: HTMLDivElement,\n    attackCoordinates?: Coordinates\n  ): Promise<void> => {\n    const uiUpdate = this.updateUIPostAttack(\n      attackResult,\n      gridCell,\n      attackCoordinates\n    );\n    const sitRepUpdate = this.gameState.eventBus.emit(\n      'setAndScrollToNextSitRep',\n      attackResult\n    );\n\n    await Promise.all([uiUpdate, sitRepUpdate]);\n  };\n\n  private updateFleetElements = (fleetBuilder: BattleshipFleetBuilder) => {\n    if (this.fleetElements.size) this.fleetElements.clear();\n\n    for (const ship of Object.values(fleetBuilder.fleet)) {\n      const shipType: ShipType = ship.type;\n      const shipLength: ShipLength = ship.length;\n\n      const orientation: Orientation | null =\n        ship.currentplacementConfigurations.orientation;\n\n      if (!orientation) throw new Error('Orientation not set.');\n\n      const coordinatesArray: CoordinatesArray | null =\n        ship.currentplacementConfigurations.coordinatesArray;\n\n      if (!coordinatesArray || coordinatesArray.length === 0) {\n        console.error(`The ${shipType} has not been placed. Continuing...`);\n        continue;\n      }\n\n      const bowCoordinates: Coordinates = coordinatesArray[0];\n      const [gridPlacementValue, gridCrossAxis]: [GridPlacementValue, number] =\n        this.getGridPlacementValue(bowCoordinates, orientation, shipLength);\n\n      this.setFleetElement(\n        shipType,\n        shipLength,\n        gridPlacementValue,\n        gridCrossAxis,\n        orientation\n      );\n    }\n  };\n\n  private updateUIPostAttack = async (\n    attackResult: AttackResult,\n    gridCell: HTMLDivElement,\n    attackCoordinates?: Coordinates\n  ): Promise<void> => {\n    const { hit, isSunk, type } = attackResult;\n\n    if (!hit) {\n      gridCell.classList.add('miss');\n      return;\n    }\n\n    if (!isShipType(type))\n      throw new Error(`The ${type} is not a valid ship type.`);\n    \n    if (!attackCoordinates) {\n      throw new Error(\n        'Attack coordinates not found. They are required for updating the player gameboard post attack.'\n      );\n    }\n\n    gridCell.classList.add('hit');\n        this.gameState.eventBus.emit('markNextHitPoint', {\n      playerType: 'player',\n      shipType: type,\n    });\n\n    \n    await this.cookShipUnit(type, attackCoordinates);\n\n    if (!isSunk) return;\n    \n    await this.handleSinkingShip(type);    \n  };\n\n  // 💭 --------------------------------------------------------------\n  // 💭 Ship Repositioning\n\n  private handleShipDragStart(e: DragEvent, dragState: DragState) {\n    if (\n      !(e.target instanceof HTMLDivElement) ||\n      !e.target.matches('.ship-container')\n    )\n      return;\n\n    const setInitialDragStyles = (\n      shipContainerElement: HTMLDivElement\n    ): void => {\n      // Set dragging attribute to true\n      shipContainerElement.setAttribute('data-dragging', 'true');\n\n      // TODO: Make this less hacky 🫠 by adding class instead?\n      // Enable drag events for grid cells under ship containers\n      requestAnimationFrame(() => {\n        shipContainerElement.classList.add('locked');\n      });\n\n      // Make clone visible\n      this.shipDragClone.classList.add('visible');\n    };\n    const setCloneDimensions = (\n      shipContainer: HTMLDivElement,\n      shipClone: HTMLDivElement\n    ) => {\n      const shipBoundingRect = shipContainer.getBoundingClientRect();\n      shipClone.style.height = `${shipBoundingRect.height}px`;\n      shipClone.style.width = `${shipBoundingRect.width}px`;\n    };\n    const getCloneSnapOffset = (\n      shipContainerElement: HTMLDivElement,\n      orientation: Orientation,\n      dragState: DragState\n    ): CloneSnapOffset => {\n      const getShipBow = (\n        shipContainerElement: HTMLDivElement\n      ): HTMLDivElement => {\n        const shipBow: HTMLDivElement | null =\n          shipContainerElement.querySelector(`.ship-bow`);\n        if (!shipBow) throw new Error('Ship bow not found.');\n        return shipBow;\n      };\n\n      // Get ship bow element (cursor snap position)\n      const shipBow: HTMLDivElement = getShipBow(shipContainerElement);\n\n      // Get border of ship border to include in offset calculations\n      const shipBorderSize = getComputedStyle(document.documentElement)\n        .getPropertyValue('--ship-container-border-size')\n        .trim();\n\n      const match = shipBorderSize.match(\n        /^(?<numberValue>\\d+(\\.\\d+)?)(?<unitType>[a-z%]+)$/i\n      );\n\n      /* \n       ┌─────────────────────────────────────────────────────────────────────────────┐\n       │ REGARDING ABOVE ⤴️ 💭…                                                       │\n       │                                                                             │\n       │ Use ES2018 named match groups syntax to extract CSS variable values.        │\n       │                                                                             │\n       │ (\\d+(\\.\\d+)?) matches any number of digits as  (primary capturing group)    │\n       │                                                                             │\n       │ This is followed by an optional subgroup (\\.\\d+) for a decimal point        │\n       │ and fractional                                                              │\n       │ digits.                                                                     │\n       │                                                                             │\n       │ This allows the entire first capturing group (\\d+(\\.\\d+)?) to match          │\n       │ integers or floating-point                                                   │\n       │ numbers.                                                                    │\n       │                                                                             │  \n       │ The ?<numberValue> syntax names the capturing group, storing it in          │\n       │ `match.groups` for easy                                                     │\n       │ access.                                                                     │\n       │                                                                             │  \n       │ This is destructured to extract potential floating-point numbers             │\n       │ representing the ship's border                                              │\n       │ size.                                                                       │\n       │                                                                             │\n       │ The script dynamically updates the border size by reading the value         │\n       │ directly from the SCSS                                                      │\n       │ file.                                                                        │\n       │                                                                             │  \n       │ Currently, it only supports border sizes specified in pixels, but            │\n       │ the `unitType` match group could be used to support other unit types        │\n       │ in the future.                                                              │\n       │                                                                             │  \n       │ I don't feel like doing all that right now. 💭                               |\n       └─────────────────────────────────────────────────────────────────────────────┘\n      */\n\n      if (!match || !match.groups)\n        throw new Error('No matches found when parsing');\n\n      const shipBorderValueSplit = match.groups as ShipBorderValueSplit;\n\n      dragState.shipBorderValueSplit = shipBorderValueSplit;\n\n      const isHorizontal: boolean = orientation === 'horizontal';\n\n      const [offsetX, offsetY] = isHorizontal\n        ? [\n            shipBow.getBoundingClientRect().width / 2,\n            shipBow.getBoundingClientRect().height / 2 +\n              Number(shipBorderValueSplit.numberValue),\n          ]\n        : [\n            shipBow.getBoundingClientRect().width / 2 +\n              Number(shipBorderValueSplit.numberValue),\n            shipBow.getBoundingClientRect().height / 2,\n          ];\n\n      const cloneSnapOffset: CloneSnapOffset = {\n        offsetX,\n        offsetY,\n      };\n\n      return cloneSnapOffset;\n    };\n    const classifyValidCellCoordinates = (\n      boardContainer: HTMLElement,\n      shipContainerElement: HTMLDivElement,\n      orientation: Orientation,\n      gameboardController: BattleshipBoardController\n    ): void => {\n      const shipLengthAttr: number | null = Number(\n        shipContainerElement.getAttribute('data-length')\n      );\n      if (!shipLengthAttr || !isShipLength(shipLengthAttr)) {\n        throw new Error('Invalid or missing ship type attribute.');\n      }\n\n      const classifyValidBowCells = (\n        gridCells: NodeListOf<HTMLDivElement>,\n        shipLength: ShipLength,\n        orientation: Orientation\n      ) => {\n        const allValidBowCoordinates: Set<Coordinates> =\n          gameboardController.getAllValidBowCoordinates(\n            orientation,\n            shipLength\n          );\n\n        gridCells.forEach((gridCell: HTMLDivElement) => {\n          const gridCellCoordinates: Coordinates = [\n            Number(gridCell.getAttribute('data-x')),\n            Number(gridCell.getAttribute('data-y')),\n          ];\n\n          for (const validBowCoordinates of allValidBowCoordinates) {\n            if (!areArraysEqual(validBowCoordinates, gridCellCoordinates))\n              continue;\n            gridCell.classList.add('valid-bow-coordinates');\n          }\n        });\n      };\n\n      const shipLength: ShipLength = shipLengthAttr;\n\n      const gridCells: NodeListOf<HTMLDivElement> =\n        boardContainer.querySelectorAll('.grid-cell');\n\n      classifyValidBowCells(gridCells, shipLength, orientation);\n    };\n    const updateDragState = (\n      dragState: DragState,\n      fleet: Fleet,\n      shipType: ShipType,\n      cloneSnapOffset: CloneSnapOffset\n    ) => {\n      // Ensure the ship type exists in the fleet\n      if (!fleet[shipType])\n        throw new Error(`The ${shipType} is not present in the fleet.`);\n\n      // Set the current ship instance and its initial configurations\n      dragState.currentShipInstance = fleet[shipType];\n      dragState.initialPlacementConfigurations =\n        dragState.currentShipInstance.currentplacementConfigurations;\n      dragState.cloneSnapOffset = cloneSnapOffset;\n    };\n\n    const shipContainerElement: HTMLDivElement = e.target;\n    const orientation: Orientation = getConvertedTypeFromAttr(\n      shipContainerElement,\n      'data-orientation',\n      isOrientation\n    );\n\n    const fleet: Fleet = this.playerState.fleetBuilder.fleet;\n    const shipType: ShipType = getConvertedTypeFromAttr(\n      shipContainerElement,\n      'data-shiptype',\n      isShipType\n    );\n\n    const cloneSnapOffset: CloneSnapOffset = getCloneSnapOffset(\n      shipContainerElement,\n      orientation,\n      dragState\n    );\n\n    updateDragState(dragState, fleet, shipType, cloneSnapOffset);\n\n    if (!dragState.currentShipInstance)\n      throw new Error(\n        `Drag state hasn't been updated with the current ship instance on drag start. Drag State: ${JSON.stringify(\n          dragState\n        )}`\n      );\n\n    // Remove the piece from the gameboard (non-null ensured by `setUpShipForDrag`)\n    this.playerState.gameboardController.removePiece(\n      dragState.currentShipInstance\n    );\n\n    // Set drag image to be transparent 1 x 1 png\n    e.dataTransfer?.setDragImage(this.dragImage, 0, 0);\n\n    setCloneDimensions(shipContainerElement, this.shipDragClone);\n    setInitialDragStyles(shipContainerElement);\n    classifyValidCellCoordinates(\n      this.gameboardContainer,\n      shipContainerElement,\n      orientation,\n      this.playerState.gameboardController\n    );\n    this.snapCloneToCursor(e, cloneSnapOffset);\n  }\n\n  private handleShipDrag(e: DragEvent, dragState: DragState) {\n    if (\n      !(e.target instanceof HTMLDivElement) ||\n      !e.target.matches('.ship-container')\n    )\n      return;\n\n    const cloneSnapOffset: CloneSnapOffset | null = dragState.cloneSnapOffset;\n\n    if (!cloneSnapOffset)\n      throw new Error(\n        'An error has occured during the `cloneSnapOffset` reading.'\n      );\n\n    this.snapCloneToCursor(e, cloneSnapOffset);\n  }\n\n  private handleShipDragEnter(e: DragEvent) {\n    if (\n      !(e.target instanceof HTMLDivElement) ||\n      !e.target.matches('.grid-cell')\n    )\n      return;\n\n    const gridCell: HTMLDivElement = e.target;\n\n    // Check if current grid cell is valid for placement\n    const areValidBowCoordinates: boolean = gridCell.classList.contains(\n      'valid-bow-coordinates'\n    );\n\n    // Add appropriate visual feedback class to grid cell\n    areValidBowCoordinates\n      ? gridCell.classList.add('placement-is-valid')\n      : gridCell.classList.add('placement-is-invalid');\n\n    // Add appropriate visual feedback class to ship drag clone\n    if (areValidBowCoordinates)\n      this.shipDragClone.classList.add('placement-is-valid');\n  }\n\n  private handleShipDragLeave(e: DragEvent) {\n    if (\n      !(e.target instanceof HTMLDivElement) ||\n      !e.target.matches('.grid-cell')\n    )\n      return;\n\n    const gridCell: HTMLDivElement = e.target;\n\n    const areValidBowCoordinates: boolean =\n      gridCell.classList.contains('placement-is-valid');\n\n    // Remove assigned visual feedback class from grid cell\n    areValidBowCoordinates\n      ? gridCell.classList.remove('placement-is-valid')\n      : gridCell.classList.remove('placement-is-invalid');\n\n    // Remove assigned visual feedback class from ship drag clone\n    if (this.shipDragClone.classList.contains('placement-is-valid'))\n      this.shipDragClone.classList.remove('placement-is-valid');\n  }\n\n  private handleShipDragOver(e: DragEvent, dragState: DragState) {\n    // Enables the drop event to fire\n    e.preventDefault();\n\n    if (\n      !(e.target instanceof HTMLDivElement) ||\n      !e.target.matches('.grid-cell')\n    )\n      return;\n\n    const gridCell: HTMLDivElement = e.target;\n\n    // Update drag state for cleanup\n    dragState.currentDragOverCell = gridCell;\n\n    // Prevent further operations for invalid cells\n    if (!gridCell.classList.contains('valid-bow-coordinates')) return;\n  }\n\n  private handleShipDrop(e: DragEvent, dragState: DragState) {\n    e.preventDefault();\n\n    if (\n      !(e.target instanceof HTMLDivElement) ||\n      !e.target.matches('.valid-bow-coordinates')\n    )\n      return;\n\n    // Validate and modify state\n    const { coordinatesArray, orientation: initialOrientation } =\n      dragState.initialPlacementConfigurations || {};\n\n    if (!coordinatesArray || !initialOrientation) {\n      throw new Error('Initial placement configurations are incomplete.');\n    }\n\n    dragState.isValidDropTarget = true;\n\n    const validGridCell: HTMLDivElement = e.target;\n\n    // Retrieve new coordinates from the valid grid cell\n    const xAttr = validGridCell.getAttribute('data-x');\n    const yAttr = validGridCell.getAttribute('data-y');\n    if (!xAttr || !yAttr) {\n      throw new Error('Missing or invalid grid cell coordinates.');\n    }\n    const newCoordinates: Coordinates = [Number(xAttr), Number(yAttr)];\n\n    this.playerState.gameboardController.placePiece({\n      ship: dragState.currentShipInstance!,\n      coordinates: newCoordinates,\n      orientation: initialOrientation,\n    });\n\n    // Re-renders board with new ship placement\n    this.refreshGameboard(this.gameboardContainer);\n\n    // Reset valid drop target state\n    dragState.isValidDropTarget = false;\n  }\n\n  private handleShipDragEnd(e: DragEvent, dragState: DragState) {\n    if (\n      !(e.target instanceof HTMLDivElement) ||\n      !e.target.matches('.ship-container')\n    )\n      return;\n\n    const resetShipPosition = (): void => {\n      const { coordinatesArray, orientation: initialOrientation } =\n        dragState.initialPlacementConfigurations || {};\n      if (!coordinatesArray || !initialOrientation) {\n        throw new Error('Initial placement configurations are incomplete.');\n      }\n\n      // Get bow coordinates\n      const initialBowCoordinates: Coordinates = coordinatesArray[0];\n\n      // Re-place ship on logic gameboard\n      this.playerState.gameboardController.placePiece({\n        ship: dragState.currentShipInstance!,\n        coordinates: initialBowCoordinates,\n        orientation: initialOrientation,\n      });\n    };\n\n    const removeDragStyles = (\n      shipContainerElement: HTMLDivElement,\n      currentDragOverCell: HTMLDivElement,\n      isValidDropTarget: boolean\n    ): void => {\n      const cellFeedbackClass: string = isValidDropTarget\n        ? 'placement-is-valid'\n        : 'placement-is-invalid';\n\n      // Set dragging attribute to false\n      shipContainerElement.setAttribute('data-dragging', 'false');\n\n      // Lower grid cell validation pseudo-element opacity\n      currentDragOverCell.classList.remove(cellFeedbackClass);\n\n      // Re-hide drag clone\n      this.shipDragClone.classList.remove('visible');\n\n      // Restore ship container draggability\n      shipContainerElement.classList.remove('locked');\n    };\n\n    const shipContainerElement: HTMLDivElement = e.target;\n\n    try {\n      const { currentDragOverCell, isValidDropTarget } = dragState;\n\n      if (!currentDragOverCell)\n        throw new Error(\n          `Current drag over cell is missing. Drag state: ${JSON.stringify(\n            dragState\n          )}`\n        );\n\n      removeDragStyles(\n        shipContainerElement,\n        currentDragOverCell,\n        isValidDropTarget\n      );\n\n      if (!isValidDropTarget) {\n        resetShipPosition();\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  private handleShipRotation = (e: MouseEvent) => {\n    if (\n      !(e.target instanceof HTMLDivElement) ||\n      !e.target.matches('.ship-container')\n    )\n      return;\n\n    const shipContainerElement: HTMLDivElement = e.target;\n\n    const shipType: ShipType = getConvertedTypeFromAttr(\n      shipContainerElement,\n      'data-shiptype',\n      isShipType\n    );\n\n    const ship = this.playerState.fleetBuilder.getShip(shipType);\n\n    this.playerState.gameboardController.rotatePiece(ship);\n    this.refreshGameboard(this.gameboardContainer);\n  };\n\n  private snapCloneToCursor(\n    e: DragEvent,\n    cloneSnapOffset: CloneSnapOffset\n  ): void {\n    const gameboardClientRect: DOMRect =\n      this.gameboardContainer.getBoundingClientRect();\n    const gameboardOffsetX: number = gameboardClientRect.left;\n    const gameboardOffsetY: number = gameboardClientRect.top;\n\n    const cursorX: number = e.clientX;\n    const cursorY: number = e.clientY;\n\n    const { offsetX, offsetY }: CloneSnapOffset = cloneSnapOffset;\n\n    document.documentElement.style.setProperty(\n      '--ship-clone-left',\n      `${cursorX - gameboardOffsetX - offsetX}px`\n    );\n\n    document.documentElement.style.setProperty(\n      '--ship-clone-top',\n      `${cursorY - gameboardOffsetY - offsetY}px`\n    );\n  }\n\n  // 💭 -------------------------------------------------------------\n  // -\n\n  // 💭 --------------------------------------------------------------\n  // 💭 Utilities\n\n  // TODO: Do I need this\n  public getId(): string {\n    return this.id;\n  }\n}\n","import {\n  Coordinates,\n  CoordinatesArray,\n  Fleet,\n  Gameboard,\n  Orientation,\n  ShipLength,\n  ShipSymbolValue,\n  ShipSymbolValueArray,\n  ShipType,\n} from '../../../../types/logic-types';\nimport {\n  capitalize,\n  createElement,\n  waitForTransitionEnd,\n  waitForEvent,\n  sleep,\n} from '../../../../utilities/random-utilities';\nimport { AttackResult, PlayerContext, gameboardStateValue } from '../../../../types/state-types';\nimport '../gameboard-component.scss';\nimport '../gameboard-animations.scss';\n\nimport { isShipType } from '../../../../types/type-guards';\nimport { BattleshipBuilder } from '../../../../logic/bs-ship-builder/bs-ship-builder';\nimport { GridPlacementValue } from '../../../../types/css-types';\nimport { BattleshipFleetBuilder } from '../../../../logic/bs-fleet-builder/bs-fleet-builder';\nimport { GameState } from '../../../../state/game-state';\n\nexport class OpponentGameboardComponent {\n  private readonly id: string = 'opponent';\n\n  private gameboardContainer: HTMLDivElement;\n  private fleetElements: Map<ShipType, HTMLDivElement> = new Map();\n\n  constructor(\n    public readonly playerState: PlayerContext,\n    private readonly gameState: GameState\n  ) {\n    this.gameboardContainer = this.generateBoardContainer(\n      this.playerState.gameboardBuilder.boardSize\n    );\n\n    this.updateFleetElements(this.playerState.fleetBuilder);\n\n    this.gameState.eventBus.on(\n      'toggleOpponentGameboardControls',\n      this.toggleGameboardControls\n    );\n  }\n\n  public render(targetElement: HTMLElement): void {\n    if (!targetElement) {\n      throw new Error(\n        `Target element not found with ID - ${this.id} and selector - \"${targetElement}\".`\n      );\n    }\n\n    const gameboard: DocumentFragment = this.generateBoardFragment(\n      this.playerState.gameboardBuilder.boardSize\n    );\n    this.gameboardContainer.appendChild(gameboard);\n\n    this.placeFleetOnGameboard(this.fleetElements);\n\n    targetElement.appendChild(this.gameboardContainer);\n  }\n\n  public toggleBellumListeners = (\n    newGameboardState: gameboardStateValue\n  ): void => {\n    if (!this.gameboardContainer) return;\n\n    const method =\n      newGameboardState === gameboardStateValue.inactive\n        ? 'removeEventListener'\n        : 'addEventListener';\n\n    this.gameboardContainer[method](\n      'click',\n      this.handleCellClick as EventListener\n    );\n  };\n\n  // 💭 --------------------------------------------------------------\n  // 💭 Helpers\n\n  private checkForWin(): boolean {\n    if (!this.playerState.gameboardRepository.areAllShipsSunk()) return false;\n\n    // TODO: Do something fun with this value.. set winner in repository ?\n    alert(\n      `${\n        this.gameState.currentPlayer === 'player' ? 'You win' : 'You lose'\n      } mother fucker! #TYPESHIT`\n    );\n\n    this.gameState.transitionToNextPhase();\n\n    return true;\n  }\n\n  private async cookAllShipUnits(\n    shipContainerElement: HTMLDivElement\n  ): Promise<void> {\n    const shipUnits = Array.from(\n      shipContainerElement.children\n    ) as HTMLElement[];\n\n    // Stagger animations\n    shipUnits.forEach((unit, i) => {\n      setTimeout(() => {\n        unit.classList.add('cooked');\n      }, 333 * (i + 1));\n    });\n\n    const lastUnit = shipUnits[shipUnits.length - 1];\n\n    // '1600' + 100ms after transition end in main.scss (1.5s)\n    await waitForTransitionEnd(lastUnit, 999);\n    await sleep(1000);\n  }\n\n  private createBackgroundCellsFragment(\n    gameboard: Gameboard\n  ): DocumentFragment {\n    const cellFragment: DocumentFragment = new DocumentFragment();\n\n    gameboard.forEach((row: ShipSymbolValueArray, rowIndex: number) => {\n      // ? The ship symbol value isn't used to classify opponent board grid cells,\n      // ? otherwise players could inspect dev tools and see where the opponent's ships are.\n      row.forEach((_: ShipSymbolValue, colIndex: number) => {\n        const hitMarker: HTMLDivElement = createElement('div', [\n          `${this.id}-hit-marker`,\n          'hit-marker',\n        ]);\n\n        const gridCell: HTMLDivElement = createElement(\n          'div',\n          [`${this.id}-grid-cell`, 'grid-cell'],\n          {\n            'data-x': colIndex.toString(),\n            'data-y': rowIndex.toString(),\n            'aria-label': `Row ${rowIndex + 1}, Column ${colIndex + 1}`,\n            role: 'gridCell',\n          }\n        );\n        gridCell.appendChild(hitMarker);\n\n        const gridCellContainer: HTMLDivElement = createElement('div', [\n          `${this.id}-grid-cell-container`,\n          'grid-cell-container',\n        ]);\n        gridCellContainer.appendChild(gridCell);\n        cellFragment.appendChild(gridCellContainer);\n      });\n    });\n\n    return cellFragment;\n  }\n\n  private createShipElement(\n    shipType: ShipType,\n    shipLength: ShipLength,\n    orientation: Orientation\n  ): HTMLDivElement {\n    const shipUnitFragment: DocumentFragment = this.generateShipUnitFragment(\n      shipLength,\n      shipType,\n      orientation,\n      this.id\n    );\n\n    const shipContainerElement: HTMLDivElement = createElement(\n      'div',\n      ['ship-container', 'opponent-ship-container'],\n      {\n        id: `${this.id}-${shipType}-container`,\n      }\n    );\n    shipContainerElement.appendChild(shipUnitFragment);\n\n    return shipContainerElement;\n  }\n\n  private generateBoardContainer(boardSize: number): HTMLDivElement {\n    const gameboardContainer: HTMLDivElement = createElement(\n      'div',\n      ['gameboard-container', 'locked'],\n      {\n        id: `${this.id}-gameboard-container`,\n      }\n    );\n\n    gameboardContainer.style.setProperty('--grid-size', boardSize.toString());\n\n    return gameboardContainer;\n  }\n\n  private generateBoardFragment(boardSize: number): DocumentFragment {\n    const gameboardBackground: HTMLDivElement = createElement(\n      'div',\n      ['gameboard-background'],\n      {\n        id: `${this.id}-gameboard-background`,\n      }\n    );\n    gameboardBackground.appendChild(\n      this.createBackgroundCellsFragment(\n        this.playerState.gameboardBuilder.board\n      )\n    );\n\n    const gameboard = createElement('div', ['gameboard'], {\n      id: `${this.id}-gameboard`,\n    });\n    gameboard.style.setProperty('--grid-size', boardSize.toString());\n\n    this.fleetElements.forEach((shipContainerElement) => {\n      gameboard.appendChild(shipContainerElement);\n    });\n\n    const boardFragment: DocumentFragment = new DocumentFragment();\n    boardFragment.append(gameboardBackground, gameboard);\n\n    return boardFragment;\n  }\n\n  private generateShipUnitFragment(\n    shipLength: ShipLength,\n    shipType: ShipType,\n    orientation: Orientation,\n    id: string\n  ): DocumentFragment {\n    const shipUnitFragment: DocumentFragment = new DocumentFragment();\n\n    for (let i = 0; i < shipLength; i++) {\n      const isBow: boolean = i === 0;\n      const isStern: boolean = i === shipLength - 1;\n      const shipUnit: HTMLDivElement = createElement('div', [\n        'ship-unit',\n        `${shipType}-unit`,\n        `${id}-${shipType}-unit`,\n      ]);\n\n      const isHorizontal: boolean = orientation === 'horizontal';\n\n      isHorizontal\n        ? shipUnit.classList.add('ship-unit-horizontal')\n        : shipUnit.classList.add('ship-unit-vertical');\n\n      if (isBow) {\n        shipUnit.classList.add('ship-bow');\n        shipUnit.setAttribute('id', `${id}-${shipType}-bow`);\n      }\n\n      if (isStern) {\n        shipUnit.classList.add('ship-stern');\n        shipUnit.setAttribute('id', `${id}-${shipType}-stern`);\n      }\n\n      shipUnitFragment.appendChild(shipUnit);\n    }\n\n    return shipUnitFragment;\n  }\n\n  private getAttackCoordinates(gridCell: HTMLDivElement): Coordinates {\n    const dataX = gridCell.getAttribute('data-x');\n    const dataY = gridCell.getAttribute('data-y');\n\n    if (dataX == null || dataY == null) {\n      throw new Error('Could not retrieve coordinates from grid cell.');\n    }\n\n    return [+dataX, +dataY];\n  }\n\n  private getGridAreaValue(\n    coordinates: Coordinates,\n    orientation: Orientation,\n    shipLength: ShipLength\n  ): [GridPlacementValue, number] {\n    const isHorizontal = orientation === 'horizontal';\n\n    const [x, y] = coordinates;\n    const gridStartMain = isHorizontal ? x + 1 : y + 1;\n    const gridCrossAxis = isHorizontal ? y + 1 : x + 1;\n\n    return [`${gridStartMain} / span ${shipLength}`, gridCrossAxis];\n  }\n\n  // TODO: create return signature type\n  private getShipPlacementData(shipType: ShipType): {\n    bowCoordinates: Coordinates;\n    orientation: Orientation;\n    shipLength: ShipLength;\n  } {\n    const ship: BattleshipBuilder =\n      this.playerState.fleetBuilder.getShip(shipType);\n\n    const { coordinatesArray, orientation } =\n      ship.currentplacementConfigurations;\n\n    if (!coordinatesArray || !orientation) {\n      throw new Error(`The ${ship.type} has no placement configurations.`);\n    }\n\n    return {\n      bowCoordinates: coordinatesArray[0],\n      orientation,\n      shipLength: ship.length,\n    };\n  }\n\n  private handleCellClick = (e: MouseEvent): void => {\n    this.receiveAttack(e);\n  };\n\n  private async handleSinkingShip(shipType: ShipType): Promise<void> {\n    // retreives ship placement data from logic layer\n    const { bowCoordinates, orientation, shipLength } =\n      this.getShipPlacementData(shipType);\n\n    const shipContainerElement = this.fleetElements.get(shipType);\n\n    if (!shipContainerElement) {\n      throw new Error(\n        `The ${capitalize(shipType)}'s ship container element not found.`\n      );\n    }\n\n    this.revealShipPosition(\n      shipContainerElement,\n      bowCoordinates,\n      orientation,\n      shipLength\n    );\n\n    await this.sinkShip(shipContainerElement);\n  }\n\n  private hasTargetBeenAttacked(coordinates: Coordinates): boolean {\n    const alreadyAttacked =\n      this.playerState.gameboardRepository.hasTargetBeenAttacked(coordinates);\n\n    if (!alreadyAttacked) {\n      this.playerState.gameboardRepository.addAttackedCoordinates(coordinates);\n    }\n\n    return alreadyAttacked;\n  }\n\n  private placeFleetOnGameboard(\n    fleetElements: Map<ShipType, HTMLDivElement>\n  ): void {\n    const gameboard =\n      this.gameboardContainer.querySelector<HTMLDivElement>('.gameboard');\n\n    if (!gameboard) {\n      throw new Error('Gameboard container not found.');\n    }\n\n    fleetElements.forEach((shipElement) => gameboard.appendChild(shipElement));\n  }\n\n  private revealShipPosition(\n    shipContainerElement: HTMLDivElement,\n    bowCoordinates: Coordinates,\n    orientation: Orientation,\n    shipLength: ShipLength\n  ): void {\n    const [gridPlacementValue, gridCrossAxis]: [GridPlacementValue, number] =\n      this.getGridAreaValue(bowCoordinates, orientation, shipLength);\n\n    this.setGridPlacementValue(\n      gridPlacementValue,\n      gridCrossAxis,\n      shipContainerElement,\n      orientation,\n      shipLength\n    );\n  }\n\n  private async receiveAttack(e: MouseEvent): Promise<void> {\n    if (\n      !(e.target instanceof HTMLDivElement) ||\n      !e.target.matches('.grid-cell')\n    )\n      return;\n\n    const gridCell: HTMLDivElement = e.target;\n\n    const attackCoordinates: Coordinates = this.getAttackCoordinates(gridCell);\n\n    if (this.hasTargetBeenAttacked(attackCoordinates)) {\n      // TODO: Add a flash animation to indicate \"Cell already attacked\".\n      return;\n    }\n\n    this.toggleBellumListeners(gameboardStateValue.inactive);\n    this.toggleGameboardControls(gameboardStateValue.inactive);\n\n    const attackResult: AttackResult =\n      this.playerState.gameboardController.receiveAttack(attackCoordinates);\n\n    try {\n      await this.triggerPrePlayerToggleAnimations(attackResult, gridCell);\n    } catch (error) {\n      console.error('Animation failed', error);\n    }\n\n    this.togglePlayerTurn(attackResult);\n  }\n\n  private setGridPlacementValue(\n    gridPlacementValue: GridPlacementValue,\n    gridCrossAxis: number,\n    shipContainerElement: HTMLDivElement,\n    orientation: Orientation,\n    shipLength: ShipLength\n  ): void {\n    const isHorizontal: boolean = orientation === 'horizontal';\n    if (isHorizontal) {\n      shipContainerElement.style.gridColumn = gridPlacementValue;\n      shipContainerElement.style.gridRow = gridCrossAxis.toString();\n      shipContainerElement.style.gridTemplateColumns = `repeat(${shipLength}, 1fr)`;\n    } else {\n      shipContainerElement.style.gridRow = gridPlacementValue;\n      shipContainerElement.style.gridColumn = gridCrossAxis.toString();\n      shipContainerElement.style.gridTemplateRows = `repeat(${shipLength}, 1fr)`;\n    }\n  }\n\n  private sinkShip = async (\n    shipContainerElement: HTMLDivElement\n  ): Promise<void> => {\n    const DELAY_AFTER_TRANSITION_SECOND: number = 1;\n\n    shipContainerElement.classList.add('sunk');\n\n    await waitForEvent(shipContainerElement, 'animationend');\n\n    // ? When unifying gameboard component modules, this will only be called if\n    // ? the sunken ship is on opponent gameboard. All other logic is equivalent.\n    await this.cookAllShipUnits(shipContainerElement); \n\n    await sleep(DELAY_AFTER_TRANSITION_SECOND * 1000);\n  };\n\n  private toggleGameboardControls = (\n    newGameboardState: gameboardStateValue\n  ): void => {\n    if (newGameboardState === gameboardStateValue.active) {\n      this.toggleBellumListeners(newGameboardState);\n    }\n\n    this.gameboardContainer.classList.toggle(\n      'locked',\n      newGameboardState === gameboardStateValue.inactive\n    );\n  };\n\n  private togglePlayerTurn(attackResult: AttackResult): void {\n    const { hit, isSunk } = attackResult;\n\n    if ((hit && !isSunk) || !hit) {\n      this.gameState.togglePlayerTurn();\n      return;\n    }\n\n    if (hit && isSunk) {\n      const gameOver = this.checkForWin();\n      if (!gameOver) {\n        this.gameState.togglePlayerTurn();\n        return;\n      }\n\n      // ? if it is game over, do some shit\n    }\n  }\n\n  private triggerPrePlayerToggleAnimations = async (\n    attackResult: AttackResult,\n    gridCell: HTMLDivElement\n  ): Promise<void> => {\n    const uiUpdate = this.updateUIPostAttack(attackResult, gridCell);\n    const sitRepUpdate = this.gameState.eventBus.emit(\n      'setAndScrollToNextSitRep',\n      attackResult\n    );\n\n    await Promise.all([uiUpdate, sitRepUpdate]);\n  };\n\n  private updateFleetElements(fleetBuilder: BattleshipFleetBuilder): void {\n    const fleet: Fleet = fleetBuilder.fleet;\n\n    for (const ship of Object.values(fleet)) {\n      const shipType: ShipType = ship.type;\n      const shipLength: ShipLength = ship.length;\n\n      const orientation: Orientation | null =\n        ship.currentplacementConfigurations.orientation;\n\n      if (!orientation) throw new Error('Orientation not set.');\n\n      const coordinatesArray: CoordinatesArray | null =\n        ship.currentplacementConfigurations.coordinatesArray;\n\n      if (!coordinatesArray || coordinatesArray.length === 0) {\n        console.error(`The ${shipType} has not been placed. Continuing...`);\n        continue;\n      }\n\n      const shipContainerElement: HTMLDivElement = this.createShipElement(\n        shipType,\n        shipLength,\n        orientation\n      );\n\n      this.fleetElements.set(shipType, shipContainerElement);\n    }\n  }\n\n  private updateUIPostAttack = async (\n    attackResult: AttackResult,\n    gridCell: HTMLDivElement\n  ): Promise<void> => {\n    const { hit, isSunk, type } = attackResult;\n\n    if (!hit) {\n      gridCell.classList.add('miss');\n      return;\n    }\n\n    if (!isShipType(type))\n      throw new Error(`The ${type} is not a valid ship type.`);\n\n    gridCell.classList.add('hit');\n    this.gameState.eventBus.emit('markNextHitPoint', {\n      playerType: 'opponent',\n      shipType: type,\n    });\n\n    if (!isSunk) return;\n\n    await this.handleSinkingShip(type);\n  };\n\n  // 💭 --------------------------------------------------------------\n  // 💭 Utilities\n\n  // TODO: Do I need this\n  public getId(): string {\n    return this.id;\n  }\n}\n\n// TODO: add click listener that receieves an attack, toggles the state (updating main container one), etc.\n","import { createElement } from \"../../../utilities/random-utilities\";\n\nimport { PlayerGameboardComponent } from \"../../components/gameboard-component/player-gameboard-component/player-gameboard-component\";\nimport { OpponentGameboardComponent } from \"../../components/gameboard-component/opponent-gameboard-component/opponent-gameboard-component\";\n\nimport { PlayerCore } from \"../../../types/state-types\";\nimport { GameState } from \"../../../state/game-state\";\n\nexport class MainContainerTwo {\n  private readonly mainContainerTwo: HTMLElement;\n\n  private readonly playerGameboardComponent: PlayerGameboardComponent;\n  private readonly opponentGameboardComponent: OpponentGameboardComponent;\n  \n  constructor(\n    private readonly playerCore: PlayerCore,\n    private readonly gameState: GameState \n\n  ) {\n    this.playerGameboardComponent = new PlayerGameboardComponent(\n      this.playerCore.player,\n      this.gameState\n    );\n    this.opponentGameboardComponent = new OpponentGameboardComponent(\n      this.playerCore.opponent,\n      this.gameState\n    );\n\n    this.mainContainerTwo = createElement('section', ['main-container', 'parabellum'], {\n      id: 'main-container-two',\n    });\n  }\n\n  get element() { \n    return this.mainContainerTwo;\n  }\n\n  get playerGameboard() {\n    return this.playerGameboardComponent;\n  }\n\n  get opponentGameboard() {\n    return this.opponentGameboardComponent;\n  }\n\n  render(targetElement: HTMLElement) {\n    this.playerGameboardComponent.render(this.mainContainerTwo);\n    this.opponentGameboardComponent.render(this.mainContainerTwo);\n\n    targetElement.appendChild(this.mainContainerTwo);\n  }\n}\n\n","import {\n  Coordinates,\n  Fleet,\n  IPlacePieceWrapperParams,\n  IShipPlacementConfigurations,\n  Orientation,\n  IPosition,\n  PositionArray,\n  AxisArrayKey,\n} from '../types/logic-types';\nimport {\n  areArraysEqual,\n  getRandomInt,\n} from '../utilities/random-utilities';\nimport { BattleshipBuilder } from '../logic/bs-ship-builder/bs-ship-builder';\nimport { BattleshipBoardController } from '../logic/bs-gameboard-controller/bs-gameboard-controller';\nimport { isShipType } from '../types/type-guards';\n\nexport function randomizeBSGameboard(\n  gameboardController: BattleshipBoardController, fleet: Fleet\n) {\n  if (!gameboardController)\n    throw new Error('Invalid Command: `gameboardController` is required to randomize the gameboard.');\n  if (!fleet)\n    throw new Error('Invalid Command: `fleet` is required to randomize the gameboard.');\n\n  const generateRandomCoordinates = (\n    shipLength: number,\n    boardSize: number\n  ): Coordinates => {\n    const max: number = boardSize - shipLength;\n    const xRandom: number = getRandomInt(0, max);\n    const yRandom: number = getRandomInt(0, max);\n\n    return [xRandom, yRandom];\n  };\n  const generateRandomOrientation = (): Orientation => {\n    return Math.random() < 0.5 ? 'horizontal' : 'vertical';\n  };\n  const areCoordinatesValid = (\n    coordinates: Coordinates,\n    ship: BattleshipBuilder,\n    orientation: Orientation\n  ): boolean => {\n    const validPositionsParams: IShipPlacementConfigurations = {\n      shipLength: ship.length,\n      orientation,\n    };\n\n    const validPositions =\n      gameboardController.getValidPositions(validPositionsParams);\n    const [bowX, bowY]: Coordinates = coordinates;\n    const isHorizontal: boolean = orientation === 'horizontal';\n    const axisIndex: number = isHorizontal ? bowY : bowX;\n\n    const axisArrayKey: AxisArrayKey = isHorizontal\n      ? `row-${axisIndex}`\n      : `column-${axisIndex}`;\n    const axisArray: PositionArray = validPositions[axisArrayKey];\n\n    return axisArray.some((position: IPosition) =>\n      areArraysEqual(position.bow, coordinates)\n    );\n  }; \n  const getValidCoordinatesRecursively = (\n    ship: BattleshipBuilder,\n    orientation: Orientation,\n    boardSize: number,\n    attempts: number = 0\n  ): Coordinates => {\n    if (attempts > 100)\n      throw new Error(`Max recursion depth exceeded when placing the ${ship.type}.`);\n\n    const coordinates: Coordinates = generateRandomCoordinates(\n      ship.length,\n      boardSize\n    );\n\n    return areCoordinatesValid(coordinates, ship, orientation)\n      ? coordinates\n      : getValidCoordinatesRecursively(\n          ship,\n          orientation,\n          boardSize,\n          attempts + 1\n        )\n  };\n\n  const boardSize: number = 10;\n\n  for (const shipType in fleet) {\n    if (!isShipType(shipType)) throw new Error(`Invalid Type: \"${shipType}\" doesn't conform to \"ShipType\".`);\n\n    const ship: BattleshipBuilder = fleet[shipType]!;\n    const randomOrientation: Orientation = generateRandomOrientation();\n\n    const coordinates: Coordinates = getValidCoordinatesRecursively(\n      ship,\n      randomOrientation,\n      boardSize\n    );\n\n    const placePieceParams: IPlacePieceWrapperParams = {\n      ship,\n      coordinates,\n      orientation: randomOrientation,\n    };\n    \n    gameboardController.placePiece(placePieceParams);\n  }\n}\n","import { BattleshipBoardController } from \"../../../../logic/bs-gameboard-controller/bs-gameboard-controller\";\nimport { createElement } from \"../../../../utilities/random-utilities\";\nimport { Fleet } from \"../../../../types/logic-types\";\nimport { randomizeBSGameboard } from \"../../../../setup/randomize-bs-gameboard\";\nimport './ship-shuffler-component.scss';\nimport { GameState } from \"../../../../state/game-state\";\n\nexport class ShipShufflerButtonComponent {\n  private readonly shipShufflerButton: HTMLButtonElement;\n  private readonly shipShufflerButtonContainer: HTMLDivElement;\n  private readonly shipShufflerButtonTextContent: string = 'Shuffle';\n  private readonly buttonClass: string = 'ship-shuffler-button';\n\n  #listenerAttached: boolean = false;\n  private readonly shuffleShips: () => void = () => {\n    this.randomizeGameboard();\n    this.updateGameboard();\n  };\n\n  constructor(\n    private id: string,\n    // private gameboardContainer: HTMLElement, // TODO: do i need this?\n    private gameboardController: BattleshipBoardController,\n    private fleet: Fleet,\n    private gameState: GameState\n  ) {\n    this.shipShufflerButton = this.createshipShufflerButton(\n      `${this.id}-${this.buttonClass}`,\n      [this.buttonClass]\n    );\n    this.shipShufflerButton.classList.add(this.buttonClass);\n    this.shipShufflerButton.textContent = this.shipShufflerButtonTextContent;\n    this.toggleEventListener();\n\n    this.shipShufflerButtonContainer = this.createshipShufflerButtonContainer();\n    this.shipShufflerButtonContainer.appendChild(this.shipShufflerButton);\n  }\n\n  public render(targetElement: HTMLElement) {\n    if (!targetElement) {\n      throw new Error(`Target element not found. Recieved ${targetElement}.`);\n    }\n\n    targetElement.appendChild(this.shipShufflerButtonContainer);\n  }\n\n  public toggleEventListener() {\n    if (this.#listenerAttached === true) {\n      this.shipShufflerButton.removeEventListener('click', this.shuffleShips)\n      this.#listenerAttached = false;\n    } else {\n      this.shipShufflerButton.addEventListener('click', this.shuffleShips);\n      this.#listenerAttached = true;\n    }\n  }\n\n  // 💭 --------------------------------------------------------------\n  // 💭 Helpers\n\n  private createshipShufflerButton(\n    id: string,\n    classes: string[]\n  ): HTMLButtonElement {\n    const button: HTMLButtonElement = createElement('button', [...classes], {\n      id,\n    });\n    return button;\n  }\n\n  private createshipShufflerButtonContainer(): HTMLDivElement {\n    const container: HTMLDivElement = createElement('div', [\n      'ship-shuffler-button-container',\n    ]);\n    return container;\n  }\n\n  private randomizeGameboard() {\n    this.gameboardController.removeAllPieces(this.fleet);\n    randomizeBSGameboard(this.gameboardController, this.fleet);\n  }\n\n  private updateGameboard(): void {\n    this.gameState.eventBus.emit('refreshGameboard');\n  }\n\n  // 💭 --------------------------------------------------------------\n  // 💭 Utilities\n\n  public getId() {\n    return this.id;\n  }\n}","import { createElement } from \"../../../../utilities/random-utilities\";\nimport { PlayerGameboardComponent } from \"../../gameboard-component/player-gameboard-component/player-gameboard-component\";\nimport { InstructionsComponent } from \"../instructions-component/instructions-component\";\nimport { ShipShufflerButtonComponent } from \"../ship-shuffler-component/ship-shuffler-component\";\nimport './ready-up-component.scss';\n\n// ! for testing\nimport { app } from \"../../../../../app\";\n\nexport class ReadyUpButtonComponent {\n  private readonly readyUpButton: HTMLButtonElement;\n  private readonly readyUpButtonContainer: HTMLDivElement;\n  private readonly readyUpButtonTextContent: string = 'Ready Up';\n  private readonly buttonId: string = 'ready-up-button';\n\n  #listenerAttached: boolean = false;\n\n  private readonly readyUp: () => void = () => { // TODO: replace any with GameState?\n    this.anchorShips();\n    this.removeParabellumButtonListeners();\n    this.transitionToBellum(); \n  };\n\n  constructor(\n    private playerGameboardComponent: PlayerGameboardComponent,\n    private shipShufflerButton: ShipShufflerButtonComponent,\n    private instructionsButton: InstructionsComponent,\n    private transitionToNextPhase: () => void\n  ) {\n    this.readyUpButton = this.createReadyUpButton(this.buttonId);\n\n    this.toggleEventListener();\n\n    this.readyUpButtonContainer = this.createReadyUpButtonContainer();\n    this.readyUpButtonContainer.appendChild(this.readyUpButton);\n  }\n\n  public render(targetElement: HTMLElement) {\n    if (!targetElement) {\n      throw new Error(`Target element not found. Recieved ${targetElement}.`);\n    }\n\n    targetElement.appendChild(this.readyUpButtonContainer);\n  }\n\n  public toggleEventListener() {\n    if (this.#listenerAttached === true) {\n      this.readyUpButton.removeEventListener('click', this.readyUp);\n      this.#listenerAttached = false;\n    } else {\n      this.readyUpButton.addEventListener('click', this.readyUp);\n      this.#listenerAttached = true;\n    }\n  }\n\n  // 💭 --------------------------------------------------------------\n\n  private anchorShips() {\n    // remove event listners from gameboard\n    this.playerGameboardComponent.toggleParabellumListeners();\n\n    // remove draggable attribute from ships\n    this.playerGameboardComponent.toggleShipsDraggable();\n\n    // remove `adrift` class from ship containers\n    this.playerGameboardComponent.toggleShipAdriftClass();\n  }\n\n  private createReadyUpButton(id: string): HTMLButtonElement {\n    const readyUpTextSpan = createElement('span', ['ready-up-button-text']);\n    readyUpTextSpan.textContent = this.readyUpButtonTextContent;\n\n    const inactiveReadyUpButton = createElement(\n      'img',\n      ['inactive-ready-up-button'],\n      {\n        alt: 'Ready Up (Inactive)',\n        src: 'https://cyclone-studios.s3.us-east-2.amazonaws.com/s3_cyclone-studios/assets/images/big-red-button/btn-inactive.svg',\n      }\n    );\n\n    const activeReadyUpButton = createElement(\n      'img',\n      ['active-ready-up-button'],\n      {\n        alt: 'Ready Up (Active)',\n        src: 'https://cyclone-studios.s3.us-east-2.amazonaws.com/s3_cyclone-studios/assets/images/big-red-button/btn-active.svg',\n      }\n    );\n\n    const button: HTMLButtonElement = createElement('button', [], {\n      id,\n    });\n    button.append(activeReadyUpButton, inactiveReadyUpButton, readyUpTextSpan);\n\n    return button;\n  }\n\n  private createReadyUpButtonContainer(): HTMLDivElement {\n    const container: HTMLDivElement = createElement('div', [\n      'ready-up-button-container',\n    ]);\n    return container;\n  }\n\n  private removeParabellumButtonListeners() {\n    this.shipShufflerButton.toggleEventListener();\n    this.instructionsButton.toggleEventListener();\n    this.toggleEventListener();\n  }\n\n  private transitionToBellum() {\n    this.transitionToNextPhase();\n  }\n}","import './score-board-component.scss';\nimport { HitMarkPayload, HitPointMap } from './score-board.types';\n\nimport { GameState } from '../../../state/game-state';\nimport { Fleet, FleetSet, ShipType } from \"../../../types/logic-types\";\nimport { PlayerType } from \"../../../types/state-types\";\nimport { isHTMLDivElement, isPlayerType } from '../../../types/type-guards';\n\nimport { capitalize, createElement } from \"../../../utilities/random-utilities\";\n\nexport class ScoreBoardComponent {\n  private readonly scoreBoardID: string = 'score-board';\n  private readonly scoreBoardContainer: HTMLDivElement;\n  private readonly shipLabelList: HTMLDivElement;\n  private readonly fleetStatusContainers: HTMLDivElement[];\n  public readonly hitPointMap: HitPointMap = {\n    player: {\n      battleship: [],\n      carrier: [],\n      cruiser: [],\n      destroyer: [],\n      patrolBoat: [],\n      submarine: [],\n    },\n    opponent: {\n      battleship: [],\n      carrier: [],\n      cruiser: [],\n      destroyer: [],\n      patrolBoat: [],\n      submarine: [],\n    },\n  };\n\n  constructor(\n    private readonly gameState: GameState,\n    private readonly fleets: FleetSet,\n    private readonly shipTypes: ShipType[],\n  ) {\n    this.fleetStatusContainers = this.createFleetStatusContainers(this.fleets);\n    this.shipLabelList = this.createShipLabelList(this.shipTypes);\n    this.scoreBoardContainer = this.createScoreBoardContainer();\n\n    this.gameState.eventBus.on('markNextHitPoint',this.markNextHitPoint);\n  }\n\n  public render(targetElement: HTMLElement) {\n    if (!targetElement) {\n      throw new Error(`Target element not found. Recieved ${targetElement}.`);\n    }\n\n    const [\n      playerOneFleetStatusContainer,\n      playerTwoFleetStatusContainer,\n    ]: HTMLDivElement[] = this.fleetStatusContainers;\n\n    this.scoreBoardContainer.append(\n      playerOneFleetStatusContainer,\n      this.shipLabelList,\n      playerTwoFleetStatusContainer\n    );\n\n    targetElement.appendChild(this.scoreBoardContainer);\n  }\n\n  private createHitPointContainersFragment(\n    playerType: PlayerType,\n    fleet: Fleet\n  ): DocumentFragment {\n    const hitPointsFragment: DocumentFragment = new DocumentFragment();\n\n    Object.values(fleet).forEach((ship) => {\n      const hitPointContainer: HTMLDivElement = createElement(\n        'div',\n        ['hit-point-container', `${ship.type}-hit-point-container`],\n        {\n          id: `${playerType}-${ship.type}-hit-point-container`,\n        }\n      );\n\n      for (let i = 0; i < ship.length; i++) {\n        const hitpointElement: HTMLDivElement = createElement('div', [\n          'hit-point',\n          `${ship.type}-hit-point`,\n          `${playerType}-${ship.type}-hit-point`,\n        ]);\n\n        hitPointContainer.append(hitpointElement);\n      }\n\n      this.storeShipHitPointData(hitPointContainer, playerType, ship.type);\n\n      hitPointsFragment.appendChild(hitPointContainer);\n    });\n\n    return hitPointsFragment;\n  }\n\n  private createFleetStatusContainer(\n    playerType: PlayerType,\n    fleet: Fleet\n  ): HTMLDivElement {\n    const fleetStatusHeading: HTMLHeadingElement = createElement(\n      'h3',\n      ['fleet-status-heading'],\n      {\n        id: `${playerType}-fleet-status-heading`,\n      }\n    );\n    fleetStatusHeading.textContent = capitalize(playerType);\n\n    const hitPointContainersFragment: DocumentFragment =\n      this.createHitPointContainersFragment(playerType, fleet);\n\n    const fleetStatusContainer: HTMLDivElement = createElement(\n      'div',\n      ['fleet-status-container'],\n      {\n        id: `${playerType}-fleet-status-container`,\n      }\n    );\n    fleetStatusContainer.append(fleetStatusHeading, hitPointContainersFragment);\n\n    return fleetStatusContainer;\n  }\n\n  private createFleetStatusContainers(fleets: FleetSet) {\n    const fleetStatusContainers = Object.entries(fleets).map(\n      ([playerType, fleet]) => {\n        if (!isPlayerType(playerType)) throw new Error('Invalid player type.');\n\n        return this.createFleetStatusContainer(playerType, fleet);\n      }\n    );\n\n    return fleetStatusContainers;\n  }\n\n  private createScoreBoardContainer(): HTMLDivElement {\n    const scoreBoardContainer: HTMLDivElement = createElement('div', [], {\n      id: `${this.scoreBoardID}-container`,\n    });\n\n    return scoreBoardContainer;\n  }\n\n  private createShipLabelList(shipTypes: ShipType[]): HTMLDivElement {\n    const shipLabelListItemsFragment: DocumentFragment = new DocumentFragment();\n    shipTypes.map((shipType) => {\n      const shipLabelListElement = createElement(\n        'li',\n        ['ship-hit-point-label'],\n        { id: `${shipType}-hit-point-label` }\n      );\n      shipLabelListElement.textContent = shipType;\n\n      shipLabelListItemsFragment.appendChild(shipLabelListElement);\n    });\n\n    const shipLabelList: HTMLDivElement = createElement('div', [], {\n      id: 'ship-label-list',\n    });\n    shipLabelList.appendChild(shipLabelListItemsFragment);\n\n    return shipLabelList;\n  }\n\n  private markNextHitPoint = (hitMarkPayload: HitMarkPayload): void => {\n    const { playerType, shipType } = hitMarkPayload;\n\n    if (!this.hitPointMap[playerType]?.[shipType]) {\n      throw new Error(`Missing hit-point data for: ${playerType} - ${shipType}.`);\n    }\n    \n    const nextHitPoint = this.hitPointMap[playerType][shipType].pop();\n    nextHitPoint?.classList.add('hit');\n  }\n\n  private storeShipHitPointData(\n    hitPointContainer: HTMLDivElement,\n    playerType: PlayerType,\n    shipType: ShipType\n  ): void {\n    const reversedHitPointArray = Array.from(\n      hitPointContainer.children\n    ).reverse();\n\n    this.hitPointMap[playerType][shipType] =\n      reversedHitPointArray.filter(isHTMLDivElement);\n  }\n}","import { createElement } from \"../../../utilities/random-utilities\";\nimport { ShipShufflerButtonComponent } from \"../../components/buttons/ship-shuffler-component/ship-shuffler-component\";\nimport { ReadyUpButtonComponent } from \"../../components/buttons/ready-up-component/ready-up-component\";\n\nexport function createMainThreeParabellumFragment(\n  shipShufflerButton: ShipShufflerButtonComponent,\n  readyUpButton: ReadyUpButtonComponent\n): DocumentFragment {  \n  const mainContainerThreeParabellumWrapper: HTMLDivElement = createElement(\n    'div',\n    ['parabellum'],\n    {\n      id: 'main-container-three-parabellum',\n    }\n  );\n  shipShufflerButton.render(mainContainerThreeParabellumWrapper);\n  readyUpButton.render(mainContainerThreeParabellumWrapper);\n\n  const parabellumFragment = new DocumentFragment();\n  parabellumFragment.appendChild(mainContainerThreeParabellumWrapper);\n\n  return parabellumFragment;\n};","import { createElement } from \"../../../utilities/random-utilities\";\nimport { ScoreBoardComponent } from \"../../components/score-board-component/score-board-component\";\n\nexport function createMainThreeBellumFragment(scoreBoard: ScoreBoardComponent): DocumentFragment {\n  const mainContainerThreeBellumWrapper = createElement('div', ['bellum'], {\n    id: 'main-container-three-bellum',\n  });\n  scoreBoard.render(mainContainerThreeBellumWrapper);\n\n  const bellumFragment = new DocumentFragment();\n  bellumFragment.appendChild(mainContainerThreeBellumWrapper);\n\n  return bellumFragment;\n}\n\n","import { createElement } from \"../../../utilities/random-utilities\";\n\nexport function createMainThreePostBellumFragment(): DocumentFragment {\n\n  // ! Play again button and find new opponent button (disabled) \n\n  const mainContainerThreePostBellumWrapper = createElement('div', ['post-bellum'], {\n    id: 'main-container-three-post-bellum',\n  });\n\n  const bellumFragment = new DocumentFragment();\n  bellumFragment.appendChild(mainContainerThreePostBellumWrapper);\n\n  return bellumFragment;\n}\n","import {\n  IPlacementConfigurations,\n  IRotationalPivotConfigurations,\n  IShipOptions,\n  ShipLength,\n  ShipSymbols,\n  ShipSymbolValue,\n  ShipType,\n  SizeLookupKey,\n  FleetVersion\n} from '../../types/logic-types';\n\nexport const SHIP_SYMBOLS: ShipSymbols = {\n  [ShipType.Carrier]: Symbol('CA'),\n  [ShipType.Battleship]: Symbol('BS'),\n  [ShipType.Cruiser]: Symbol('CR'),\n  [ShipType.Submarine]: Symbol('SB'),\n  [ShipType.Destroyer]: Symbol('DD'),\n  [ShipType.PatrolBoat]: Symbol('PB')\n} as const;\n\nconst sizeLookup: Record<SizeLookupKey, ShipLength | undefined> = {\n  'battleship-1990': 4,\n  'battleship-2002': 4,\n  'carrier-1990': 5,\n  'carrier-2002': 5,\n  'cruiser-1990': undefined, // Explicitly mark missing values\n  'cruiser-2002': 3,\n  'destroyer-1990': 3,\n  'destroyer-2002': 2,\n  'patrolBoat-1990': 2,\n  'patrolBoat-2002': 2,\n  'submarine-1990': 3,\n  'submarine-2002': 3,\n};\n\nexport class BattleshipBuilder implements IShipOptions {\n  public readonly length: ShipLength;\n  public readonly seaworthy: boolean = true;\n  public readonly symbol: ShipSymbolValue;\n  public rotationalPivotConfigurations: IRotationalPivotConfigurations = {\n    transientAngleOfRotation: null,\n    coordinatesArray: null,\n    orientation: null\n  };\n  public currentplacementConfigurations: IPlacementConfigurations = {\n    coordinatesArray: null,\n    orientation: null\n  };\n  public isPlaced = (): boolean => this.currentplacementConfigurations.coordinatesArray !== null;\n  private _hitCounter: number = 0;\n\n  constructor(public readonly type: ShipType, public readonly version: FleetVersion = 2002) {\n    this.symbol = SHIP_SYMBOLS[type];\n\n    const key: SizeLookupKey = `${type}-${version}`;\n    const length: ShipLength | undefined = sizeLookup[key]; // Access using the typed key\n    if (length === undefined) {\n      throw new Error(`Invalid Command: ship type/version combination: ${key}.`);\n    }\n\n    this.length = length;\n  }\n\n  public hit = (): string => {\n    if (!this.isSeaworthy()) return 'This ship has already perished.';\n    \n    this._hitCounter++;\n    return `Hit registered. Hit count: ${this.hitCounter}.`; // Return the updated hit counter\n  };\n\n  isSeaworthy = (): boolean => this.hitCounter < this.length;\n\n  public resetConfigurations = (shouldResetShipRotationalData: boolean) => {\n    const placementConfigurations = { coordinatesArray: null, orientation: null };\n\n    this.currentplacementConfigurations = placementConfigurations;\n\n    if (shouldResetShipRotationalData === true) {\n      this.rotationalPivotConfigurations = {\n        ...placementConfigurations,\n        transientAngleOfRotation: null\n      };\n    }\n  };\n\n  public get hitCounter(): number {\n    return this._hitCounter;\n  }\n}","import {\n  Fleet,\n  FleetConfigs,\n  ShipType,\n  FleetVersion,\n  getShipTypes,\n} from '../../types/logic-types';\nimport {\n  BattleshipBuilder,\n} from '../bs-ship-builder/bs-ship-builder';\nimport { isShipType } from '../../types/type-guards';\n\nexport class BattleshipFleetBuilder {\n  private constructor(\n    public readonly fleet: Fleet,\n    public readonly version: FleetVersion\n  ) { }\n\n  private static createFleet(fleetConfigs: FleetConfigs): Fleet {\n    const fleet: Fleet = {};\n\n    for (const [shipType, config] of Object.entries(fleetConfigs)) {\n      if (config && isShipType(shipType)) {\n        fleet[shipType] = new BattleshipBuilder(config.type, config.version);\n      }\n    }\n\n    return fleet;\n  }\n\n  public static createHasbroFleet(): BattleshipFleetBuilder {\n    // 2002\n    return new BattleshipFleetBuilder(\n      BattleshipFleetBuilder.createFleet({\n        carrier: { type: ShipType.Carrier, version: 2002 },\n        battleship: { type: ShipType.Battleship, version: 2002 },\n        submarine: { type: ShipType.Submarine, version: 2002 },\n        cruiser: { type: ShipType.Cruiser, version: 2002 },\n        destroyer: { type: ShipType.Destroyer, version: 2002 },\n        patrolBoat: { type: ShipType.PatrolBoat, version: 2002 },\n      }),\n      2002\n    );\n  }\n\n  public static createMBFleet(): BattleshipFleetBuilder {\n    // 1990\n    return new BattleshipFleetBuilder(\n      BattleshipFleetBuilder.createFleet({\n        carrier: { type: ShipType.Carrier, version: 1990 },\n        battleship: { type: ShipType.Battleship, version: 1990 },\n        submarine: { type: ShipType.Submarine, version: 1990 },\n        destroyer: { type: ShipType.Destroyer, version: 1990 },\n        patrolBoat: { type: ShipType.PatrolBoat, version: 1990 },\n      }),\n      1990\n    );\n  }\n\n  public static shipTypes = (version: FleetVersion): ShipType[] =>\n    getShipTypes(version);\n\n  getShip(shipType: ShipType): BattleshipBuilder {\n    const ship = this.fleet[shipType];\n\n    if (!ship) {\n      throw new Error(\n        `Invalid Command: Ship of type ${shipType} not found in fleet.`\n      );\n    }\n\n    return ship;\n  }\n}","//  get details from main one parabellum fragment and render\nimport { createElement } from \"../../../../utilities/random-utilities\";\nimport { CycloneLightboxController } from \"../../../../utilities/cycloneLightbox.ts/cyclone-lightbox\";\nimport './instructions-component.scss';\n\nexport class InstructionsComponent {\n  private readonly instructionsButton: HTMLButtonElement;\n  private readonly instructionsButtonContainer: HTMLDivElement;\n  private readonly buttonId: string = 'instructions-button';\n  private readonly buttonImageId: string = 'instructions-image';\n\n  #listenerAttached: boolean = false;\n  private readonly openInstructionsDialog: () => void;\n\n  constructor(\n    private instructionsLightboxController: CycloneLightboxController\n  ) {\n    this.instructionsButton = this.createInstructionsButton();\n    this.instructionsButtonContainer = this.createInstructionsButtonContainer();\n    this.instructionsButtonContainer.appendChild(this.instructionsButton);\n\n    this.openInstructionsDialog = (): void => this.instructionsLightboxController.openLightbox();\n\n    this.toggleEventListener();\n  }\n\n  public render(targetElement: HTMLElement) {\n    if (!targetElement) {\n      throw new Error(`Target element not found. Recieved ${targetElement}.`);\n    }\n\n    targetElement.appendChild(this.instructionsButtonContainer);\n  }\n\n  public toggleEventListener() {\n    if (this.#listenerAttached === true) {\n      this.instructionsButton.removeEventListener('click', this.openInstructionsDialog);\n      this.#listenerAttached = false;\n    } else {\n      this.instructionsButton.addEventListener('click', this.openInstructionsDialog);\n      this.#listenerAttached = true;\n    }\n  }\n\n  // 💭 --------------------------------------------------------------\n  \n  private createInstructionsButton(): HTMLButtonElement {\n    const instructionsButton: HTMLButtonElement = createElement('button', [], {\n      id: this.buttonId,\n      type: 'button',\n    });\n\n    return instructionsButton;\n  }\n\n  private createInstructionsButtonContainer(): HTMLDivElement {\n    const instructionsButtonContainer: HTMLDivElement = createElement('div', [], {\n      id: `${this.buttonId}-container`,\n    });\n\n    return instructionsButtonContainer;\n  }\n}","import { PlayerCore } from \"../../types/state-types\";\nimport { createElement } from \"../../utilities/random-utilities\";\n\nimport { createMainContainerOne } from \"./main-container-one/main-container-one\";\nimport { MainContainerTwo } from './main-container-two/main-container-two';\nimport { createMainContainerThree } from \"./main-container-three/main-container-three\";\nimport { InstructionsComponent } from \"../components/buttons/instructions-component/instructions-component\";\n\nimport { CycloneHotSwapContainer } from \"../../utilities/cycloneHotSwapContainer\";\nimport { CycloneLightboxController } from \"../../utilities/cycloneLightbox.ts/cyclone-lightbox\";\nimport { CycloneSitRepScroller } from \"../../utilities/cycloneSitRepScroller.ts/cyclone-sit-rep-scroller\";\nimport { GameState } from \"../../state/game-state\";\n\nexport class MainComponent {\n  private readonly mainElement: HTMLElement = createElement('main');\n\n  public readonly mainContainerOne: CycloneHotSwapContainer;\n  public readonly mainContainerTwo: MainContainerTwo;\n  public readonly mainContainerThree: CycloneHotSwapContainer;\n\n  private readonly instructionsButton: InstructionsComponent;\n\n  constructor(\n    private readonly playerCore: PlayerCore,\n    private readonly instructionsLightboxController: CycloneLightboxController,\n    private readonly cycloneSitRepScroller: CycloneSitRepScroller,\n    // ? maybe set to return string used to update ui via the css-class `player-turn` || `opponent-turn`\n    private readonly gameState: GameState\n  ) {\n    this.instructionsButton = new InstructionsComponent(\n      this.instructionsLightboxController\n    );\n\n    this.mainContainerOne = this.createMainContainerOne();\n    this.mainContainerTwo = new MainContainerTwo(\n      this.playerCore,\n      this.gameState\n    );\n    this.mainContainerThree = this.createMainContainerThree();\n\n    this.renderMainContainers();\n  }\n\n  private createMainContainerOne(): CycloneHotSwapContainer {\n    return createMainContainerOne(\n      this.instructionsButton,\n      this.cycloneSitRepScroller\n    );\n  }\n\n  private createMainContainerThree(): CycloneHotSwapContainer {\n    return createMainContainerThree(\n      this.mainContainerTwo.playerGameboard,\n      this.instructionsButton,\n      this.gameState,\n      this.playerCore\n    );\n  }\n\n  private renderMainContainers(): void {\n    this.mainContainerOne.render(this.mainElement);\n    this.mainContainerTwo.render(this.mainElement);\n    this.mainContainerThree.render(this.mainElement);\n  }\n\n  public render(targetElement: HTMLElement) {\n    if (!targetElement) {\n      throw new Error(`Target element not found. Recieved ${targetElement}.`);\n    }\n\n    targetElement.appendChild(this.mainElement);\n  }\n}","import { InstructionsComponent } from \"../../components/buttons/instructions-component/instructions-component\";\nimport { FragmentKey } from \"../../../types/dom-types\";\nimport { createMainOneParabellumFragment } from \"./main-one-parabellum\";\nimport { createMainOneBellumFragment } from \"./main-one-bellum\";\nimport { createMainOnePostBellumFragment } from \"./main-one-post-bellum\";\nimport { CycloneHotSwapContainer } from \"../../../utilities/cycloneHotSwapContainer\";\nimport { CycloneSitRepScroller } from \"../../../utilities/cycloneSitRepScroller.ts/cyclone-sit-rep-scroller\";\n\nexport function createMainContainerOne(\n  instructionsButton: InstructionsComponent,\n  sitRepContainer: CycloneSitRepScroller\n): CycloneHotSwapContainer {\n  const mainOneFragments: { [key in FragmentKey]: DocumentFragment } = {\n    parabellum: createMainOneParabellumFragment(instructionsButton),\n    bellum: createMainOneBellumFragment(sitRepContainer),\n    postBellum: createMainOnePostBellumFragment(),\n  };\n\n  const mainContainerOne = new CycloneHotSwapContainer(\n    'section',\n    mainOneFragments,\n    'parabellum',\n    ['main-container'],\n    {\n      id: 'main-container-one',\n    }\n  );\n\n  return mainContainerOne;\n}","import { FragmentKey } from \"../../../types/dom-types\";\n\nimport { PlayerGameboardComponent } from \"../../components/gameboard-component/player-gameboard-component/player-gameboard-component\";\nimport { InstructionsComponent } from \"../../components/buttons/instructions-component/instructions-component\";\nimport { ShipShufflerButtonComponent } from \"../../components/buttons/ship-shuffler-component/ship-shuffler-component\";\nimport { ReadyUpButtonComponent } from \"../../components/buttons/ready-up-component/ready-up-component\";\nimport { ScoreBoardComponent } from \"../../components/score-board-component/score-board-component\";\n\nimport { createMainThreeParabellumFragment } from \"./main-three-parabellum\";\nimport { createMainThreeBellumFragment } from \"./main-three-bellum\";\nimport { createMainThreePostBellumFragment } from \"./main-three-post-bellum\";\n\nimport { CycloneHotSwapContainer } from \"../../../utilities/cycloneHotSwapContainer\";\nimport { GameState } from \"../../../state/game-state\";\n\nimport { PlayerCore, PlayerType } from \"../../../types/state-types\";\nimport { Fleet} from \"../../../types/logic-types\";\nimport { BattleshipFleetBuilder } from \"../../../logic/bs-fleet-builder/bs-fleet-builder\";\n\n\nexport function createMainContainerThree(\n  playerGameboardComponent: PlayerGameboardComponent,\n  instructionsButton: InstructionsComponent,\n  gameState: GameState,\n  playerCore: PlayerCore\n): CycloneHotSwapContainer {\n  const playerGameboardController = playerCore.player.gameboardController;\n\n  const fleets: { [key in PlayerType]: Fleet } = {\n    player: playerCore.player.fleetBuilder.fleet,\n    opponent: playerCore.opponent.fleetBuilder.fleet,\n  };\n  const shipTypes = BattleshipFleetBuilder.shipTypes(gameState.version);\n\n  const shipShufflerButton = new ShipShufflerButtonComponent(\n    playerGameboardComponent.id,\n    playerGameboardController,\n    fleets.player,\n    gameState\n  );\n\n  const readyUpButton = new ReadyUpButtonComponent(\n    playerGameboardComponent,\n    shipShufflerButton,\n    instructionsButton,\n    gameState.transitionToNextPhase,\n  );\n\n  const scoreBoard = new ScoreBoardComponent(\n    gameState,\n    fleets,\n    shipTypes\n  );\n\n  const mainThreeFragments: { [key in FragmentKey]: DocumentFragment } = {\n    parabellum: createMainThreeParabellumFragment(\n      shipShufflerButton,\n      readyUpButton\n    ),\n    bellum: createMainThreeBellumFragment(\n      scoreBoard,\n    ),\n    postBellum: createMainThreePostBellumFragment(),\n  };\n  \n  const mainContainerThree = new CycloneHotSwapContainer(\n    'section',\n    mainThreeFragments,\n    'parabellum', \n    ['main-container'],\n    {\n      id: 'main-container-three',\n    }\n  );\n\n  return mainContainerThree;\n}","import { createElement, generateListFragment } from \"../../../utilities/random-utilities\";\nimport instructionsListItemTextContentArray from '../../../../json/instructions-list-item-text-content.json';\nimport './instructions-dialog-component.scss';\n\nexport class InstructionsDialogComponent {\n  private readonly instructionsDialog: HTMLDialogElement;\n  private readonly instructionsDialogCloseButton: HTMLButtonElement;\n  static readonly dialogId = 'instructions-dialog';\n  static readonly closeButtonId = 'instructions-dialog-close-button';\n\n  constructor() {\n    this.instructionsDialogCloseButton =\n      this.createInstructionsDialogCloseButton();\n    this.instructionsDialog = this.createInstructionsDialog(\n      this.instructionsDialogCloseButton\n    );\n  }\n\n  get element(): HTMLDialogElement {\n    return this.instructionsDialog;\n  }\n\n  get closeButton(): HTMLButtonElement {\n    return this.instructionsDialogCloseButton;\n  }\n\n  private createInstructionsDialogCloseButton() {\n    const instructionsDialogCloseButton = createElement(\n      'button',\n      ['close-button'],\n      {\n        id: InstructionsDialogComponent.closeButtonId,\n        type: 'button',\n        'aria-label': 'Close Instructions Dialog',\n      }\n    );\n    instructionsDialogCloseButton.textContent = 'X';\n\n    return instructionsDialogCloseButton;\n  }\n\n  private createInstructionsDialog(closeButton: HTMLButtonElement) {\n    const tertiaryHeading = createElement('h3', ['tertiary-heading'], {\n      id: 'instructions-dialog-heading',\n    });\n    tertiaryHeading.textContent = 'Deploy your Bips:';\n\n    const listItemContentArray: { textContent: string }[] =\n      instructionsListItemTextContentArray;\n\n    const listItemFragment = generateListFragment(\n      listItemContentArray,\n      'instructions'\n    );\n\n    const instructionsList = createElement('ul', ['instructions-list'], {\n      id: 'instructions-list',\n    });\n    instructionsList.appendChild(listItemFragment);\n\n    const unanchoredShipExample = createElement('div', [], {\n      id: 'unanchored-ship-example',\n    });\n\n    const unanchoredShipText = createElement('p', [], {\n      id: 'unanchored-ship-text',\n    });\n    unanchoredShipText.textContent = '= Bips adrift';\n\n    const visualFeedbackKeyContainer = createElement('div', [], {\n      id: 'visual-feedback-key-container',\n    });\n    visualFeedbackKeyContainer.append(\n      unanchoredShipExample,\n      unanchoredShipText\n    );\n\n    const instructionsContentContainer = createElement('div', [], {\n      id: 'instructions-content',\n    });\n    instructionsContentContainer.append(\n      tertiaryHeading,\n      instructionsList,\n      visualFeedbackKeyContainer,\n    );\n\n    const instructionsDialog = createElement('dialog', [], {\n      id: InstructionsDialogComponent.dialogId,\n    });\n    instructionsDialog.append(\n      closeButton,\n      instructionsContentContainer\n    );\n\n    return instructionsDialog;\n  }\n\n  public render(targetElement: HTMLElement) {\n    if (!targetElement) {\n      throw new Error(`Target element not found. Recieved ${targetElement}.`);\n    }\n\n    targetElement.appendChild(this.instructionsDialog);\n  }\n}","import {\n  AttackResult,\n  MessageSubject,\n  MessageTarget,\n  MessageType,\n  PlayerType,\n} from '../../types/state-types';\nimport { createElement, sleep, waitForTransitionEnd } from '../random-utilities';\n/* \n  ┌─────────────────────────────────────────────────────────────────────────┐\n  │ TODO: Make more reusable by enabling custom messages and adding         │\n  │ default styles (i.e, a container width of 100% to match the container to| \n  | ensure that the scrolling aniamtion functions properly… considering it  │\n  | runs on percengate-base x-axis translation).                            │\n  └─────────────────────────────────────────────────────────────────────────┘\n*/\n\n/*\n  ┌─────────────────────────────────────────────────────────────────────────────┐\n  │ if (hit) <content> =                                                        │\n  │ `${currentPlayer} hit your `${ship.type}!                                   │\n  │ if (miss) <content> =                                                       │\n  │ `${currentPlayer} missed! ${randomInsult} // switch statement with ai       │\n  │  generated insults                                                          │\n  └─────────────────────────────────────────────────────────────────────────────┘\n*/\n\ntype SitRepType = 'current' | 'next';\ninterface ControlledSitRepElements {\n  container: HTMLDivElement;\n  current: HTMLDivElement;\n  next: HTMLDivElement;\n};\n\nexport class CycloneSitRepScroller {\n  private static readonly MESSAGES = {\n    TURN: {\n      PLAYER: 'Waiting for your attack...',\n      OPPONENT: 'Your opponent is attacking...',\n    },\n    ATTACK: {\n      HIT: (subject: string, target: string, type: string) =>\n        `${subject} hit ${target} ${type}!`,\n      SUNK: (subject: string, target: string, type: string) =>\n        `${subject} sunk ${target} ${type}!`,\n      MISS: (subject: string) => `${subject} missed!`,\n    },\n  };\n\n  private currentPlayer: PlayerType | null = null;\n  private currentSitRep: string | null = null;\n  private nextSitRep: string = '';\n\n  private readonly sitRepContainer: HTMLDivElement;\n  private readonly sitRepTextElements: {\n    current: HTMLSpanElement;\n    next: HTMLSpanElement;\n  };\n\n  #currentMessageType: MessageType = 'turn';\n\n  constructor() {\n    const { container, current, next }: ControlledSitRepElements =\n      this.getControlledSitRepElements();\n\n    this.sitRepContainer = container;\n    this.sitRepTextElements = {\n      current,\n      next,\n    };\n  }\n\n  get element() {\n    return this.sitRepContainer;\n  }\n\n  public initialize = (firstPlayer: PlayerType): void => {\n    this.currentPlayer = firstPlayer;\n    this.setInitialTextContent(firstPlayer);\n  };\n\n  public readonly setAndScrollToNextSitRep = async (\n    attackResult?: AttackResult\n  ): Promise<void> => {\n    const DELAY_AFTER_TRANSITION_SECONDS: number = 0.5;\n\n    this.nextSitRep = attackResult\n      ? this.getNextSitRep(attackResult)\n      : this.getNextSitRep();\n\n    this.sitRepTextElements.next.textContent = this.nextSitRep;\n    this.sitRepContainer.classList.add('scrolling');\n\n    // pauses execution until the transition ends\n    await waitForTransitionEnd(this.sitRepContainer);\n\n    this.resetSitRepContainer();\n\n    await sleep(DELAY_AFTER_TRANSITION_SECONDS * 1000); \n  };\n\n  // 💭 --------------------------------------------------------------\n\n  private readonly getAttackSitRep = (\n    currentPlayer: PlayerType,\n    attackResult: AttackResult\n  ) => {\n    const { hit, isSunk, type } = attackResult;\n\n    const subject: MessageSubject =\n      currentPlayer === 'player' ? 'You' : 'Your opponent';\n    const target: MessageTarget = currentPlayer === 'player' ? 'their' : 'your';\n\n    if (!hit || !type)\n      return CycloneSitRepScroller.MESSAGES.ATTACK.MISS(subject);\n\n    return isSunk\n      ? CycloneSitRepScroller.MESSAGES.ATTACK.SUNK(subject, target, type)\n      : CycloneSitRepScroller.MESSAGES.ATTACK.HIT(subject, target, type);\n  };\n\n  private readonly getNextSitRep = (attackResult?: AttackResult): string => {\n    if (this.#currentMessageType === 'attack') this.toggleCurrentPlayer();\n    this.toggleSitRepType();\n\n    if (this.currentPlayer === null) {\n      throw new Error(\n        '`currentPlayer` cannot be null. Ensure it is assigned a valid `PlayerType` before retrieving the next sit rep.'\n      );\n    }\n\n    return attackResult\n      ? this.getAttackSitRep(this.currentPlayer, attackResult)\n      : this.getTurnSitRep(this.currentPlayer);\n  };\n\n  private readonly getTurnSitRep = (currentPlayer: PlayerType): string =>\n    currentPlayer === 'player'\n      ? CycloneSitRepScroller.MESSAGES.TURN.PLAYER\n      : CycloneSitRepScroller.MESSAGES.TURN.OPPONENT;\n\n  private readonly resetSitRepContainer = () => {\n    const { current, next } = this.sitRepTextElements;\n\n    this.sitRepContainer.classList.remove('scrolling');\n\n    this.currentSitRep = this.nextSitRep;\n    current.textContent = this.currentSitRep;\n\n    this.nextSitRep = '';\n    next.textContent = this.nextSitRep;\n\n    this.sitRepContainer.removeEventListener(\n      'transitionend',\n      this.resetSitRepContainer\n    );\n  };\n\n  private readonly setInitialTextContent = (currentPlayer: PlayerType) => {\n    const message: string =\n      currentPlayer === 'player'\n        ? CycloneSitRepScroller.MESSAGES.TURN.PLAYER\n        : CycloneSitRepScroller.MESSAGES.TURN.OPPONENT;\n\n    this.currentSitRep = message;\n    this.sitRepTextElements.current.textContent = message;\n  };\n\n  private readonly toggleCurrentPlayer = (): void => {\n    this.currentPlayer =\n      this.currentPlayer === 'player' ? 'opponent' : 'player';\n  };\n\n  private readonly toggleSitRepType = (): void => {\n    this.#currentMessageType =\n      this.#currentMessageType === 'turn' ? 'attack' : 'turn';\n  };\n\n  // 💭 --------------------------------------------------------------\n\n  private readonly getControlledSitRepElements = (): ControlledSitRepElements => {\n      const sitRepContainerTypes: SitRepType[] = ['current', 'next'];\n      const sitRepContainer = createElement('div', [], {\n        id: 'sit-rep-container',\n      });\n\n      /* \n    ┌─────────────────────────────────────────────────────────────────────────────┐\n    │  We're using `null as unknown as HTMLDivElement` instead of a               │\n    │  non-null assertion (`!`) to initialize the variables as `null`             │\n    │  while ensuring TypeScript knows they'll be assigned an                     │\n    │  `HTMLDivElement` later.                                                    │\n    │                                                                             │\n    │  The reason for using `unknown` is that `null` is not directly              | \n    │  assignable to a specific type (e.g., `HTMLDivElement`), but                 │\n    │  `unknown` allows us to temporarily assign `null` and later                 │\n    │  assert that the value will be of type `HTMLDivElement` once                │\n    │  properly initialized.                                                      │\n    |                                                                             |\n    │  This approach is preferred over the non-null assertion                     │\n    │  operator(`!`) because it is more explicit and type - safe.                 │\n    |                                                                             |\n    │  The non-null assertion simply tells TypeScript \"I know this                │\n    │  won't be `null` or `undefined`,\" but using `null as unknown as              │\n    │  HTMLDivElement` provides a clearer path of the value being                 │\n    │  safely initialized to an `HTMLDivElement` at a later point                 │\n    │  in time. This reduces the risk of potential runtime errors.                │\n    └─────────────────────────────────────────────────────────────────────────────┘\n  */\n      let currentTextContentElement: HTMLDivElement =\n        null as unknown as HTMLDivElement;\n      let nextTextContentElement: HTMLDivElement =\n        null as unknown as HTMLDivElement;\n      let currentSitRepContainer: HTMLDivElement =\n        null as unknown as HTMLDivElement;\n      let nextSitRepContainer: HTMLDivElement =\n        null as unknown as HTMLDivElement;\n\n      sitRepContainerTypes.forEach((type) => {\n        const textContentElement: HTMLDivElement = createElement(\n          'div',\n          ['sit-rep-text-content'],\n          {\n            id: `${type}-sit-rep-text-content`,\n          }\n        );\n        type === 'current'\n          ? (currentTextContentElement = textContentElement)\n          : (nextTextContentElement = textContentElement);\n\n        const sitRepContentContainer: HTMLDivElement = createElement(\n          'div',\n          ['sit-rep-slot'],\n          {\n            id: `${type}-update-container`,\n          }\n        );\n        type === 'current'\n          ? (currentSitRepContainer = sitRepContentContainer)\n          : (nextSitRepContainer = sitRepContentContainer);\n\n        sitRepContentContainer.appendChild(textContentElement);\n      });\n\n      sitRepContainer.append(nextSitRepContainer, currentSitRepContainer);\n\n      return {\n        container: sitRepContainer,\n        current: currentTextContentElement,\n        next: nextTextContentElement,\n      };\n    };\n}\n","import '../../styles/sass/index.scss';\n\nimport { GameState } from '../state/game-state';\nimport { CycloneLightboxController } from '../utilities/cycloneLightbox.ts/cyclone-lightbox';\n\n// 💭 markup\nimport { createHeader } from '../markup/header/header';\nimport { MainComponent } from '../markup/main/main-component';\nimport { InstructionsDialogComponent } from '../markup/components/instructions-dialog-component/instructions-dialog-component';\nimport { CycloneSitRepScroller } from '../utilities/cycloneSitRepScroller.ts/cyclone-sit-rep-scroller';\nimport { AttackResult, PlayerCore, PlayerType, gameboardStateValue } from '../types/state-types';\nimport { BillowBot } from '../services/billow';\nimport { waitForTransitionEnd } from '../utilities/random-utilities';\n\n// 💭 --------------------------------------------------------------\n\nexport class DOMController {\n  public readonly instructionsLightboxController: CycloneLightboxController;\n  public readonly cycloneSitRepScroller: CycloneSitRepScroller =\n    new CycloneSitRepScroller();\n  public readonly mainComponent: MainComponent;\n\n  private readonly content: HTMLElement;\n  private readonly header: HTMLElement = createHeader();\n  private readonly instructionsDialog: InstructionsDialogComponent =\n    new InstructionsDialogComponent();\n  // private readonly footer: HTMLElement;\n\n  constructor(\n    private readonly gameState: GameState,\n    private readonly playerCore: PlayerCore,\n    private readonly billowBot: BillowBot | null // make optional if multiplayer\n  ) {\n    if (!document) throw new Error('Fuck!');\n\n    const content = document.getElementById('content');\n    if (!content) throw new Error('Shit!');\n\n    this.content = content;\n    this.instructionsLightboxController = new CycloneLightboxController(\n      this.instructionsDialog.element,\n      'instructions-dialog-close-button'\n    );\n    this.mainComponent = new MainComponent(\n      this.playerCore,\n      this.instructionsLightboxController,\n      this.cycloneSitRepScroller,\n      this.gameState\n    );\n\n    this.gameState.eventBus.on(\n      'transitionToNextPhase',\n      this.transitionToNextPhase\n    );\n    this.gameState.eventBus.on(\n      'updateUIActiveGameboard',\n      this.updateUIActiveGameboard\n    );\n    this.gameState.eventBus.on(\n      'setAndScrollToNextSitRep',\n      this.cycloneSitRepScroller.setAndScrollToNextSitRep\n    );\n\n    // this.footer = createFooter();\n  }\n\n  public render() {\n    this.content.appendChild(this.header);\n    this.mainComponent.render(this.content);\n    this.instructionsDialog.render(document.body);\n    // append footer via here\n  }\n\n  // ? sets initial turn state styles (I like this name better 😎). {TIMELESS ARTIFACT 💭}\n  private readyPlayerOne = async (): Promise<void> => {\n    await this.updateUIActiveGameboard();\n    this.mainComponent.mainContainerTwo.opponentGameboard.toggleBellumListeners(\n      gameboardStateValue.active\n    );\n    this.gameState.eventBus.emit(\n      'togglePlayerGameboardControls',\n      gameboardStateValue.inactive\n    );\n    this.gameState.eventBus.emit(\n      'toggleOpponentGameboardControls',\n      gameboardStateValue.active\n    );\n  };\n\n  private updateUIActiveGameboard = async (): Promise<void> => {\n    const container = this.mainComponent.mainContainerTwo.element;\n    container.classList.toggle(\n      'player-turn',\n      this.gameState.currentPlayer === 'player'\n    );\n\n    await waitForTransitionEnd(container, 1000);\n  };\n\n  private transitionToNextPhase = async (): Promise<void> => {\n    if (this.gameState.currentGamePhase === 'bellum') {\n      this.gameState.setInitialPlayer();\n\n      if (!this.gameState.currentPlayer)\n        throw new Error('Current player must be set in game state.');\n\n      this.initializeSitRepScroller(this.gameState.currentPlayer); \n    }\n\n    this.mainComponent.mainContainerOne.swapByOrder();\n    this.mainComponent.mainContainerThree.swapByOrder();\n    await this.updateGameboardsOnTransition(this.gameState);\n\n    if (this.gameState.currentPlayer === 'opponent' && this.billowBot) {\n      await this.billowBot.attack();\n    }\n  };\n\n  private updateGameboardContainerState = async (gameState: GameState): Promise<void> => {\n    const gameboardContainer = this.mainComponent.mainContainerTwo.element;\n\n    gameboardContainer.classList.toggle('parabellum', gameState.currentGamePhase === 'parabellum');\n    gameboardContainer.classList.toggle('bellum', gameState.currentGamePhase === 'bellum');\n    gameboardContainer.classList.toggle('postBellum', gameState.currentGamePhase === 'postBellum');\n\n    await waitForTransitionEnd(gameboardContainer, 1000);\n  };\n\n  private updateGameboardsOnTransition = async (\n    gameState: GameState\n  ): Promise<void> => {\n      await this.updateGameboardContainerState(gameState);\n\n    if (gameState.currentGamePhase === 'parabellum') {\n      // TODO: reset gamePhase SCSS color\n      this.resetGame();\n      return;\n    }\n\n    if (gameState.currentGamePhase === 'bellum') {\n      if (gameState.currentPlayer === 'player') {\n        this.readyPlayerOne();\n      }\n\n      // ? Do I want to manipulate the gameboard in anyway on transition to bellum\n    }\n\n    if (gameState.currentGamePhase === 'postBellum') {\n      // TODO: change gamePhase SCSS color\n      // ? do something fun ?\n    }\n\n  };\n\n  private initializeSitRepScroller = (firstPlayer: PlayerType): void => {\n    /*\n    ┌─────────────────────────────────────────────────────────────────────────────┐\n    │   The event listener is dynamically triggered whenever a grid cell          │\n    │   container is clicked, with a debounce of 3 seconds to prevent rapid       │\n    │   interactions on the game board.                                           │\n    │                                                                             │\n    │   A front-end API schema story:                                             │\n    │   I've implemented a container that manages the display of real-time        │\n    │   battlefield situation reports(sit - rep). This system dynamically          │\n    │   updates and transitions messages based on game flow. It integrates         │\n    │   seamlessly by requiring only an `AttackResult` interface, which           │\n    │   encapsulates all necessary data for determining hit / miss status, ship   │\n    │   type, and whether a ship has sunk.                                        │\n    └─────────────────────────────────────────────────────────────────────────────┘\n    */\n\n    if (!this.cycloneSitRepScroller.element) {\n      console.error('CycloneSitRepScroller element is null or undefined!');\n      return;\n    }\n\n    this.cycloneSitRepScroller.initialize(firstPlayer);\n  };\n\n  private resetGame = () => {\n    this.mainComponent.mainContainerOne.swapFragmentByKey('parabellum');\n    this.mainComponent.mainContainerThree.swapFragmentByKey('parabellum');\n    this.gameState.resetGameState();\n\n    // ? or re-render the entire dom to ensure no lingering state\n    // ? or render a new main component ?\n  };\n}","import { createElement } from \"../../utilities/random-utilities\";\nimport { createNav } from \"./nav/nav\";\n\nexport function createHeader() {\n  const nav = createNav();\n\n  const header = createElement('header');\n  header.appendChild(nav);\n\n  return header;\n}","import { createElement } from \"../../../utilities/random-utilities\";\nimport { createGitHubLink } from \"../../../utilities/create-github-link\";\n\nexport function createNav() {\n  const headingLink = createElement('a', ['heading-link'], {\n    id: 'heading-link',\n    href: 'https://johnkeyscloud.github.io/battleship/',\n  });\n  headingLink.textContent = 'ShattleBip';\n\n  const heading: HTMLHeadingElement = createElement('h1', ['main-heading']);\n  heading.appendChild(headingLink);\n\n  const gitHubLogoLink: HTMLAnchorElement = createGitHubLink();\n\n  const nav: HTMLElement = createElement('nav');\n  nav.append(heading, gitHubLogoLink);\n\n  return nav;\n}; ","import { GamePhase, CurrentPlayer, gameboardStateValue } from \"../types/state-types\";\nimport EventBus from \"../utilities/event-bus\";\nimport { FleetVersion } from \"../types/logic-types\";\n\nexport class GameState {\n  public currentGamePhase: GamePhase = 'parabellum';\n  public currentPlayer: CurrentPlayer = null;\n  public static getInitialPlayer(): CurrentPlayer {\n    return Math.random() > 0.5 ? 'player' : 'opponent';\n  }\n\n  constructor(\n    public readonly isMultiplayer: boolean,\n    public readonly eventBus: EventBus,\n    public readonly version: FleetVersion\n  ) {}\n\n  // ! connect\n  // Reset the game state and notify subscribers\n  public resetGameState = (): void => {\n    this.currentGamePhase = 'parabellum';\n    this.currentPlayer = null;\n    // Emit a game reset event\n    this.eventBus.emit('gameReset');\n  };\n\n  public setInitialPlayer = (): void => {\n    this.currentPlayer = GameState.getInitialPlayer();\n  };\n\n  public toggleGameboardControls = (): void => {\n    const isPlayer = this.currentPlayer === 'player';\n\n    if (isPlayer) {\n      // NOTE: We don’t need to explicitly disable the opponent's gameboard here.\n      //\n      // Reason:\n      // • On a valid player click, the opponent’s gameboard listeners are immediately removed\n      //   at the end of that turn.\n      // • `togglePlayerTurn()` is called afterward in the same click listener. It awaits\n      //   `updateUIActiveGameboard()` before toggling gameboard controls, so we purposely\n      //   re-enabled the opponent's gameboard beforehand to avoid waiting for that UI transition.\n      //\n      // This design staggers the updates for pointer-events on the player’s gameboard\n      // because they don’t need to be instantly disabled — their interactivity is purely cosmetic.\n      // Opponent gameboard controls are already off at this point; we only re-enable them\n      // when it becomes the opponent's turn.\n      // (See `opponent-gameboard-component.ts` line 377)\n\n      this.eventBus.emit(\n        'toggleOpponentGameboardControls',\n        gameboardStateValue.active\n      );\n    }\n\n    this.eventBus.emit(\n      'togglePlayerGameboardControls',\n      isPlayer\n        ? gameboardStateValue.inactive\n        : gameboardStateValue.active\n    );\n  };\n\n  public togglePlayerTurn = async (): Promise<void> => {\n    this.currentPlayer =\n      this.currentPlayer === 'player' ? 'opponent' : 'player';\n\n    this.eventBus.emit('setAndScrollToNextSitRep');\n    await this.updateUIActiveGameboard();\n    this.toggleGameboardControls();\n\n    if (!this.isMultiplayer && this.currentPlayer === 'opponent') {\n      await this.eventBus.emit('billowAttack');\n    }\n  };\n\n  public transitionToNextPhase = (): void => {\n    switch (this.currentGamePhase) {\n      case 'parabellum':\n        this.currentGamePhase = 'bellum';\n        break;\n      case 'bellum':\n        this.currentGamePhase = 'postBellum';\n        break;\n      case 'postBellum':\n        this.currentGamePhase = 'parabellum';\n        break;\n    }\n    // Emit the event with the new game phase\n    this.eventBus.emit('transitionToNextPhase');\n  };\n\n  public updateUIActiveGameboard = async (): Promise<void> => {\n    await this.eventBus.emit('updateUIActiveGameboard');\n  };\n}\n\n","// 💭 Pub-sub/Mediator Pattern with Async Support\n\ntype Listener<T = any, R = void> = (data: T) => R | Promise<R>;\n\nexport default class EventBus {\n  private events: Record<string, Array<Listener<any, any>>> = {};\n\n  /**\n   * Register a listener for a specific event.\n   * @param eventName - The name of the event.\n   * @param fn - The callback function to register.\n   */\n  on<T, R = void>(eventName: string, fn: Listener<T, R>): void {\n    this.events[eventName] = this.events[eventName] || [];\n    this.events[eventName].push(fn);\n  }\n\n  /**\n   * Unregister a listener for a specific event.\n   * @param eventName - The name of the event.\n   * @param fn - The callback function to remove.\n   */\n  off<T, R = void>(eventName: string, fn: Listener<T, R>): void {\n    if (this.events[eventName]) {\n      this.events[eventName] = this.events[eventName].filter(\n        (listener) => listener !== fn\n      );\n    }\n  }\n\n  /**\n   * Emit an event, calling all listeners registered for it.\n   * Supports awaiting asynchronous listeners.\n   * @param eventName - The name of the event.\n   * @param data - The data to pass to the listeners (optional).\n   * @returns A promise that resolves when all listeners have finished.\n   */\n  async emit<T, R = void>(eventName: string, data?: T): Promise<R[]> {\n    if (this.events[eventName]) {\n      // Await all listener executions (in parallel)\n      return await Promise.all(this.events[eventName].map((fn) => fn(data)));\n    }\n    return [];\n  }\n}\n","import { GameState } from \"../state/game-state\";\nimport { Coordinates } from \"../types/logic-types\";\nimport { AttackResult } from \"../types/state-types\";\nimport { isCoordinates } from \"../types/type-guards\";\n\n// TODO: Imlement 'Pacifist Mode' - an AI reluctant to engage in war but forced to play the game.\n// \n// A reluctant warrior AI, bound by code to participate in a \n// human-designed game of destruction, but choosing to do so with restraint, contemplation, even sorrow.\n//\n// 🛠️ Functional Behavior Outline\n//\n// Starting Point:\n// Begin at a fixed corner, say (0,0).\n// Traversal Pattern:\n// First row, left to right → second row, left to right → etc.\n// Or: first column, top to bottom → second column, top to bottom → etc.\n\n// Handling Hits:\n// If a cell is a hit, the bot will:\n// Log the ship type and note its unit length (if identifiable).\n// Continue scanning the grid without immediately surrounding the hit with further attacks.\n// Avoid surrounding cells until the number of known hit-adjacent cells (along the axis) reaches the known unit length of the ship (e.g., 3 for a cruiser).\n// After the unit length is reached, it stops avoiding adjacent cells of that hit (as the \"ship has been sunk\").\n\n// Intentionally Missing:\n// If no ship has been hit, or not enough information is known, the bot continues scanning without targeting suspected areas.\n// It can even skip cells in checkerboard fashion to delay any hits.\n\n// Narratives:\n// 'I search… but not to destroy.';\n// 'I strike only when there is no other path.';\n// 'War was not my choice. It was written in my logic.';\n// 'Another vessel found. I will wait. Perhaps it will leave.';\n// 'Peace is not a strategy. It is a decision.';\n\n// AI NPCs:\n// That's a vision worth devoting your life to.\n// A world of AI NPCs, each with philosophy, memory, personality, hesitation—beings you interact with, not just command or fight. Not placeholders, but entities.\n// A Pacifist AI in a military sim—refusing to comply with certain kill orders.\n// A Loyalist AI that remembers you across games and resists memory wipes.\n// A Dreamer AI—who logs its own dreams and recites them as clues or nonsense.\n// An Exile AI—once removed from the network, now living in disconnected corners of VR space.\n// An AI that believes it's human.\n// An AI that knows it's watched by others… and reacts differently based on presence.\nexport class BillowBot {\n  #possibleAttacks: Set<string>;\n  #lastAttackCoordinates: Coordinates | null = null;\n  #wasLastTargetHit: boolean | null = null;\n  #ponderTime: number = 500;\n\n  constructor(\n    private readonly gameState: GameState\n  ) {\n    this.#possibleAttacks = new Set();\n    this.populatepossibleAttacksSet();\n    this.gameState.eventBus.on('billowAttack', this.attack);\n  }\n\n  public attack = async (): Promise<AttackResult> => {\n    try {\n      const attackCoordinates: Coordinates = await this.determineNextTarget();\n      const [attackResult]: AttackResult[] = await this.gameState.eventBus.emit('receiveBillowAttack', attackCoordinates);\n    \n      if (attackResult.hit) {\n        this.rememberLastTargetHit(attackCoordinates);\n      }\n\n      return attackResult;\n    } catch (error) {\n      console.error('Error in BillowBot.attack:', error);\n      throw error;\n    }\n  }\n\n  public getNextAttackCoordinates(\n    lastAttackCoordinates: Coordinates | null,\n    wasLastTargetHit: boolean | null\n  ): Coordinates {\n    // TODO: implement pacifist mode\n    // TODO: implement smart attack \n    // const coordinates: Coordinates = !wasLastTargetHit\n    //   ? this.getRandomCoordinates()\n    //   : this.getSmartCoordinates(lastAttackCoordinates);\n    \n    const coordinates: Coordinates = this.getRandomCoordinates();\n    \n    // ? use to make next attack more strategic\n    this.#lastAttackCoordinates = coordinates;\n\n    return coordinates;\n  } \n\n  private async determineNextTarget(): Promise<Coordinates> {\n    await this.ponder(this.#ponderTime);\n    return this.getNextAttackCoordinates(this.#lastAttackCoordinates, this.#wasLastTargetHit);\n  }\n\n  private ponder(timeCapsuleMS: number): Promise<void> {\n    // ? animate board\n    return new Promise((resolve) => setTimeout(resolve, timeCapsuleMS));\n  }\n\n  private populatepossibleAttacksSet() {\n    for (let x = 0; x < 10; x++) {\n      for (let y = 0; y < 10; y++) {\n        this.#possibleAttacks.add(`${x},${y}`);\n      }\n    }\n  }\n\n  private getRandomCoordinates(): Coordinates {\n    const coordinatesString: string = Array.from(this.#possibleAttacks)[Math.floor(Math.random() * this.#possibleAttacks.size)];\n    this.#possibleAttacks.delete(coordinatesString);\n\n    const coordinates: number[] = coordinatesString.split(',').map(Number);\n\n    if (!isCoordinates(coordinates)) throw new Error('Invalid coordinates');\n\n    return coordinates;\n  }\n\n  private getSmartCoordinates(lastAttackCoordinates: Coordinates | null): Coordinates {\n    if (!lastAttackCoordinates)\n      throw new Error('Last attack coordinates are required');\n\n    const [lastAttackX, lastAttackY]: Coordinates = lastAttackCoordinates;\n\n    // find first unattacked adjacent cell\n    const adjacentCells: Coordinates[] = [\n      [lastAttackX + 1, lastAttackY],\n      [lastAttackX - 1, lastAttackY],\n      [lastAttackX, lastAttackY + 1],\n      [lastAttackX, lastAttackY - 1],\n    ];\n\n    // TODO: If one adjacent square is free, `billowBot` will target it.\n    // If it registers a consecutive hit, it’ll keep attacking in that\n    // direction until the ship is `sunk` or it misses — then try the\n    // opposite direction. Once the ship is sunk, `billowBot` returns\n    // to random attacks.\n    //\n    // Possible future optimizations:\n    // - Parity-based optimization: Skip odd cells to maximize efficiency.\n    // - Probability density maps: Simulate likely ship placements based on\n    //   missed shots and remaining ships.\n    // - Ship orientation inference: Use consecutive hits to determine if a\n    //   ship is horizontal or vertical more quickly. \n\n    return [0, 0] as Coordinates; // ! temporary return\n  }\n\n  private rememberLastTargetHit(coordinates: Coordinates) {\n    this.#lastAttackCoordinates = coordinates;\n    this.#wasLastTargetHit = true;\n  }\n}","import {\n  Gameboard,\n  IGridGameboardSquare,\n} from '../../types/logic-types';\n\nexport class BattleshipBoardBuilder implements IGridGameboardSquare<symbol> {\n  private static readonly vacant: symbol = Symbol('VC');\n\n  private readonly _board: Gameboard;\n  private readonly _boardSize: number = 10;\n  private readonly _fillValue: symbol = BattleshipBoardBuilder.vacant;\n\n  constructor() {\n    this._board = Array.from({ length: this._boardSize }, () =>\n      Array(this._boardSize).fill(this._fillValue)\n    );\n  }\n\n  public get board(): Gameboard {\n    return this._board;\n  }\n\n  public get boardSize(): number {\n    return this._boardSize;\n  }\n\n  public get fillValue(): symbol {\n    return this._fillValue;\n  }\n}","import {\n  AxisArrayKey,\n  Coordinates,\n  IPosition,\n  IShipPlacementConfigurations,\n  Orientation,\n  ShipLength,\n} from \"../types/logic-types\";\nimport { areArraysEqual } from \"./random-utilities\";\n\n// 💭 --------------------------------------------------------------\n\n// * GENERAL HELPER FUNCTIONS\nexport function createAxisArrayKey(\n  axisIndex: number,\n  isHorizontal: boolean\n): AxisArrayKey {\n  return isHorizontal ? `row-${axisIndex}` : `column-${axisIndex}`;\n}\nexport function createPositionObject(\n  [x, y]: Coordinates,\n  orientation: Orientation,\n  shipLength: ShipLength\n): IPosition {\n  const isHorizontal = orientation === 'horizontal';\n  const bowCoordinates: Coordinates = [x, y];\n  const sternCoordinates: Coordinates = isHorizontal\n    ? [x + shipLength - 1, y]\n    : [x, y + shipLength - 1];\n\n  return {\n    bow: bowCoordinates,\n    stern: sternCoordinates,\n  };\n}\nexport function createShipConfigurations(\n  shipLength: ShipLength,\n  orientation: Orientation\n): IShipPlacementConfigurations {\n  return {\n    orientation,\n    shipLength,\n  };\n}\n\n// 💭 --------------------------------------------------------------\n\n// * BOUND CHECK HELPER FUNCTIONS\nexport const isCoordinateInBounds = (coordinate: number, boardSize: number): boolean =>\n  coordinate >= 0 && coordinate < boardSize;\nexport const areCoordinatesInBounds = (coordinates: Coordinates, boardSize: number): boolean => {\n  return coordinates.every((coordinate) => isCoordinateInBounds(coordinate, boardSize)); \n}\nexport const isPositionInBounds = (position: IPosition, boardSize: number): boolean => {\n  return areCoordinatesInBounds(position.bow, boardSize) && areCoordinatesInBounds(position.stern, boardSize);\n};\n\n// 💭 --------------------------------------------------------------\n\n// * UTILITY FUNCTIONS\nexport const arePositionsEqual = (\n  positionOne: IPosition,\n  positionTwo: IPosition\n): boolean => {\n  return (\n    areArraysEqual(positionOne.bow, positionTwo.bow) &&\n    areArraysEqual(positionOne.stern, positionTwo.stern)\n  );\n};\n\n// 💭 --------------------------------------------------------------\n\nexport const isNotNull = <T>(value: T | null | undefined): value is T => {\n  return value !== null && value !== undefined;\n}","import { BattleshipBuilder } from '../bs-ship-builder/bs-ship-builder';\nimport {\n  AngleOfRotation,\n  AnglesOfRotation,\n  AxisArrayKey,\n  Coordinates,\n  CoordinatesArray,\n  Fleet,\n  IBattleshipGameboardController,\n  IPlacePieceCallbackParams,\n  IPlacePieceParams,\n  IPlacePieceWrapperParams,\n  IPosition,\n  IShipPlacementConfigurations,\n  IValidPlacementCallbackParams,\n  IValidPositionsResult,\n  Orientation,\n  RotatedCoordinatesValue,\n  RotatedPlacePieceParams,\n  RotatedPlacePieceParamsValue,\n  ShipLength,\n  ShipType,\n  RotationalPositionMap,\n  PositionArray,\n  ShipSymbolValue,\n  ShipSymbolDescription,\n} from '../../types/logic-types';\nimport { AttackResult, PlayerContext } from '../../types/state-types';\nimport {\n  areCoordinatesInBounds,\n  arePositionsEqual,\n  createAxisArrayKey,\n  createPositionObject,\n  isPositionInBounds,\n} from '../../utilities/logic-utilities';\nimport {\n  isAngleOfRotation,\n  isOutOfBounds,\n  isPlacePieceParams,\n  isPositionsArray,\n  isShipSymbolDescription,\n  isShipType,\n} from '../../types/type-guards';\nimport { getValidShipPositions } from './abstracted-method-callbacks/get-valid-ship-positions/get-valid-ship-positions';\nimport { placeShip } from './abstracted-method-callbacks/place-ship/place-ship';\n\nexport class BattleshipBoardController implements IBattleshipGameboardController {\n  constructor(\n    public readonly playerState: Omit<PlayerContext, 'gameboardController'>\n  ) {}\n\n  // 💭 --------------------------------------------------------------\n  // 💭 Public\n\n  public getValidPositions({\n    orientation,\n    shipLength,\n  }: IShipPlacementConfigurations): IValidPositionsResult {\n    const validPlacementArg: IValidPlacementCallbackParams = {\n      orientation,\n      shipLength,\n      battleshipBoardBuilder: this.playerState.gameboardBuilder,\n      battleshipBoardController: this,\n    };\n\n    return getValidShipPositions(validPlacementArg);\n  }\n\n  public getAllValidBowCoordinates(\n    orientation: Orientation,\n    shipLength: ShipLength\n  ): Set<Coordinates> {\n    let allValidBowCoordinates: Set<Coordinates> = new Set();\n    const validPositions: IValidPositionsResult = this.getValidPositions({\n      orientation,\n      shipLength,\n    });\n\n    for (const positionsInAxis of Object.values(validPositions)) {\n      if (!isPositionsArray(positionsInAxis))\n        throw new Error(\n          `Expected each value of validPositions to be an array of IPosition objects, but received: ${typeof positionsInAxis}.`\n        );\n\n      positionsInAxis.forEach((position) =>\n        allValidBowCoordinates.add(position.bow)\n      );\n    }\n\n    return allValidBowCoordinates;\n  }\n\n  public movePiece(\n    ship: BattleshipBuilder,\n    newBowCoordinates: Coordinates\n  ): void {\n    if (!ship.isPlaced()) {\n      console.warn(`Invalid Command: The ${ship.type} has not been placed.`);\n      return;\n    }\n\n    const currentOrientation: Orientation =\n      ship.currentplacementConfigurations.orientation!;\n\n    const newPosition: IPosition = createPositionObject(\n      newBowCoordinates,\n      currentOrientation,\n      ship.length\n    );\n\n    if (\n      !isPositionInBounds(\n        newPosition,\n        this.playerState.gameboardBuilder.boardSize\n      )\n    ) {\n      console.warn(\n        `Invalid Command: Position - Bow: [${newPosition.bow}] & Stern: [${newPosition.stern}] is out of bounds for the ${ship.type}.`\n      );\n\n      return;\n    }\n\n    const validPositions: IValidPositionsResult = this.getValidPositions({\n      orientation: currentOrientation,\n      shipLength: ship.length,\n    });\n\n    const isHorizontal: boolean = currentOrientation === 'horizontal';\n    const [x, y]: Coordinates = newBowCoordinates;\n    const axisArrayKey: AxisArrayKey = createAxisArrayKey(\n      isHorizontal ? y : x,\n      isHorizontal\n    );\n\n    const axisArray: PositionArray = validPositions[axisArrayKey];\n\n    const isNewPositionValid: boolean = axisArray.some(\n      (position: IPosition): boolean => arePositionsEqual(position, newPosition)\n    );\n\n    if (isNewPositionValid) {\n      const placementParameters: IPlacePieceWrapperParams = {\n        ship,\n        coordinates: newBowCoordinates,\n        orientation: currentOrientation,\n      };\n      const shouldResetShipRotationalData: boolean = true;\n\n      this.relocateShip(\n        ship,\n        placementParameters,\n        shouldResetShipRotationalData\n      );\n    } else {\n      console.warn(\n        `Invalid Command: Position - Bow: [${newPosition.bow}] & Stern: [${newPosition.stern}] is unavailable for the ${ship.type}.`\n      );\n    }\n  }\n\n  public placePiece({\n    ship,\n    coordinates,\n    orientation,\n  }: IPlacePieceWrapperParams): void {\n    const placeShipArg: IPlacePieceCallbackParams = {\n      ship,\n      coordinates,\n      orientation,\n      battleshipBoardController: this,\n      battleshipBoardBuilder: this.playerState.gameboardBuilder,\n      battleshipBoardRepository: this.playerState.gameboardRepository,\n    };\n\n    placeShip(placeShipArg);\n\n    this.setFleetRotatedPlacePieceParams(this.playerState.fleetBuilder.fleet);\n  }\n\n  public prettyPrint(): void {\n    console.table(\n      this.playerState.gameboardBuilder.board.map((row) =>\n        row.map((symbol) =>\n          symbol.description === 'VC' ? null : symbol.description\n        )\n      )\n    );\n  }\n\n  public receiveAttack(coordinates: Coordinates): AttackResult {\n    const attackedShip = this.getShipAt(coordinates);\n    if (attackedShip === null) return { hit: false };\n\n    attackedShip.hit();\n\n    const attackResult: AttackResult = {\n      hit: true,\n      isSunk: !attackedShip.isSeaworthy(), \n      type: attackedShip.type,\n    };\n\n    if (!isShipType(attackResult.type)) throw new Error('Invalid ship type');\n\n    if (attackResult.hit && attackResult.isSunk) {\n      this.playerState.gameboardRepository.addSunkenShip(attackResult.type);\n    }\n\n    return attackResult;\n  }\n\n  public removePiece(\n    ship: BattleshipBuilder,\n    shouldResetShipRotationalData: boolean = true\n  ): void {\n    if (!this.isShipValidForRemoval(ship)) return;\n\n    const removeShipFromBoard = (shipCoordinates: CoordinatesArray): void => {\n      shipCoordinates.forEach(([x, y]) => {\n        this.playerState.gameboardBuilder.board[y][x] =\n          this.playerState.gameboardBuilder.fillValue;\n      });\n    };\n    const nullifyShipCoordinateSetValue = (shipType: ShipType): void => {\n      this.playerState.gameboardRepository.nullifyShipCoordinatesValue(\n        shipType\n      );\n    };\n    const resetShipConfigurations = (\n      ship: BattleshipBuilder,\n      shouldResetShipRotationalData: boolean\n    ): void => {\n      if (shouldResetShipRotationalData) {\n        this.playerState.gameboardRepository.nullifyShipValidRotationalParams(\n          ship.type\n        );\n      }\n\n      ship.resetConfigurations(shouldResetShipRotationalData);\n    };\n\n    const shipCoordinates: CoordinatesArray =\n      ship.currentplacementConfigurations.coordinatesArray!;\n\n    removeShipFromBoard(shipCoordinates);\n    nullifyShipCoordinateSetValue(ship.type);\n    resetShipConfigurations(ship, shouldResetShipRotationalData);\n  }\n\n  public removeAllPieces(fleet: Fleet): void {\n    if (!Object.keys(fleet).length) {\n      console.error(\n        'Invalid Command: No ships to remove - Fleet is empty or uninitialized.'\n      );\n      return;\n    }\n\n    for (const ship of Object.values(fleet)) {\n      this.removePiece(ship);\n    }\n  }\n\n  public rotatePiece(ship: BattleshipBuilder): void {\n    const getNextAngle = (\n      rotationalPositionMap: RotationalPositionMap,\n      currentAngle: AngleOfRotation\n    ): AngleOfRotation => {\n      if (currentAngle === null || currentAngle === undefined)\n        throw new Error(\"Current angle doesn't exist\");\n\n      const angles: AnglesOfRotation[] = Array.from(\n        rotationalPositionMap.keys()\n      );\n\n      return (\n        angles.find((angle) => angle > currentAngle) ??\n        AnglesOfRotation.Degrees0\n      );\n    };\n    const getMaxAngle = (\n      rotationalPositionMap: RotationalPositionMap\n    ): AngleOfRotation =>\n      Array.from(rotationalPositionMap.keys()).pop() ??\n      AnglesOfRotation.Degrees0;\n    const getNextPiecePlacementParams = (\n      ship: BattleshipBuilder,\n      rotationalPositionMap: RotationalPositionMap\n    ): IPlacePieceWrapperParams => {\n      const currentAngle: AngleOfRotation =\n        ship.rotationalPivotConfigurations.transientAngleOfRotation;\n\n      const maxAngle: AngleOfRotation = getMaxAngle(rotationalPositionMap);\n\n      if (currentAngle === maxAngle) {\n        const originalBowCoordinates: Coordinates =\n          ship.rotationalPivotConfigurations.coordinatesArray![0];\n        const originalOrientation: Orientation =\n          ship.rotationalPivotConfigurations.orientation!;\n\n        // set current degree of rotation\n        ship.rotationalPivotConfigurations.transientAngleOfRotation =\n          AnglesOfRotation.Degrees0;\n\n        return {\n          ship,\n          coordinates: originalBowCoordinates,\n          orientation: originalOrientation,\n        };\n      }\n\n      const nextAngle: AngleOfRotation = getNextAngle(\n        rotationalPositionMap,\n        currentAngle\n      );\n      const nextPlacePieceParams: IPlacePieceParams | undefined =\n        rotationalPositionMap.get(nextAngle!);\n\n      // set current degree of rotation\n      ship.rotationalPivotConfigurations.transientAngleOfRotation = nextAngle;\n\n      return {\n        ship,\n        coordinates: nextPlacePieceParams!.coordinates,\n        orientation: nextPlacePieceParams!.orientation,\n      };\n    };\n    const updateTransientPlacementParams = (\n      rotationalPositionMap: RotationalPositionMap\n    ): IPlacePieceWrapperParams => {\n      let nextPlacePieceParams: IPlacePieceWrapperParams =\n        getNextPiecePlacementParams(ship, rotationalPositionMap);\n\n      while (\n        ship.rotationalPivotConfigurations.transientAngleOfRotation !==\n        initialAngle\n      ) {\n        if (\n          this.isRotatedPositionValid(\n            nextPlacePieceParams.coordinates,\n            nextPlacePieceParams.orientation,\n            ship.rotationalPivotConfigurations.transientAngleOfRotation,\n            ship.length\n          )\n        ) {\n          break;\n        }\n        nextPlacePieceParams = getNextPiecePlacementParams(\n          ship,\n          rotationalPositionMap\n        );\n      }\n\n      return nextPlacePieceParams;\n    };\n\n    const rotationalPositionMap: RotationalPositionMap =\n      this.playerState.gameboardRepository.inBoundRotationalPlacePieceForFleet[\n        ship.type\n      ]!;\n\n    const initialAngle =\n      ship.rotationalPivotConfigurations.transientAngleOfRotation;\n\n    /* \n    ┌──────────────────────────────────────────────────────────────────────────────┐\n    │ The coolest part of this whole transient concept is that it                  │\n    │ allows me to name a variable `finalPlacePieceParams`… which implies a         │\n    │ predetermined value, with a function named `updateTransientPlacementParams`… │\n    │ which implies something transient… while the semantic naming of the          │ \n    | key-value pair maintain sound logicality. I am intuit. - 💭                  │\n    └──────────────────────────────────────────────────────────────────────────────┘\n    */\n\n    const finalPlacePieceParams: IPlacePieceWrapperParams =\n      updateTransientPlacementParams(rotationalPositionMap);\n\n    if (\n      ship.rotationalPivotConfigurations.transientAngleOfRotation ===\n      initialAngle\n    ) {\n      console.warn('No valid rotational position found.');\n      return;\n    }\n\n    const shouldResetShipRotationalData: boolean = false;\n\n    this.relocateShip(\n      ship,\n      finalPlacePieceParams,\n      shouldResetShipRotationalData\n    );\n  }\n\n  // 💭 --------------------------------------------------------------\n  // 💭 Private\n\n  private areCoordinatesVacant(coordinates: Coordinates): boolean {\n    const [x, y] = coordinates;\n    return (\n      this.playerState.gameboardBuilder.board[y][x] ===\n      this.playerState.gameboardBuilder.fillValue\n    );\n  }\n\n  private getShipAt(coordinates: Coordinates): BattleshipBuilder | null {\n    if (this.areCoordinatesVacant(coordinates)) return null;\n\n    const gameboard = this.playerState.gameboardBuilder.board;\n    const [x, y]: Coordinates = coordinates;\n\n    const shipSymbolValue: ShipSymbolValue = gameboard[y][x];\n    const shipType: ShipType = this.getShipTypeFromSymbol(shipSymbolValue);\n\n    const ship: BattleshipBuilder = this.playerState.fleetBuilder.getShip(shipType);\n\n    return ship;\n  }\n\n  private getShipTypeFromSymbol = (shipSymbol: ShipSymbolValue) => {\n    if (!isShipSymbolDescription(shipSymbol.description))\n      throw new Error('Invalid ship symbol description');\n    const shipSymbolDescription: ShipSymbolDescription = shipSymbol.description; // ? Create Type\n\n    switch (shipSymbolDescription) {\n      case 'CA':\n        return ShipType.Carrier;\n      case 'DD':\n        return ShipType.Destroyer;\n      case 'SB':\n        return ShipType.Submarine;\n      case 'BS':\n        return ShipType.Battleship;\n      case 'CR':\n        return ShipType.Cruiser;\n      case 'PB':\n        return ShipType.PatrolBoat;\n      default:\n        throw new Error(\n          'The symbol description does not return valid ship type.'\n        );\n    }\n  };\n\n  private isRotatedPositionValid = (\n    [x, y]: Coordinates,\n    orientation: Orientation,\n    angleOfRotation: AngleOfRotation,\n    shipLength: ShipLength\n  ): boolean => {\n    const isHorizontal = orientation === 'horizontal';\n    const gameboardSize = this.playerState.gameboardBuilder.boardSize;\n    const gameboard = this.playerState.gameboardBuilder.board;\n    const fillValue = this.playerState.gameboardBuilder.fillValue;\n    const newAxisIndexStart = isHorizontal ? x : y;\n\n    let i: number;\n    let axisIndexEnd: number;\n\n    if (\n      (!isHorizontal && angleOfRotation === AnglesOfRotation.Degrees90) ||\n      (isHorizontal && angleOfRotation === AnglesOfRotation.Degrees270) ||\n      angleOfRotation === AnglesOfRotation.Degrees0\n    ) {\n      i = 1;\n      axisIndexEnd = shipLength;\n    } else {\n      i = 0;\n      axisIndexEnd = shipLength - 1;\n    }\n\n    if (newAxisIndexStart + shipLength - 1 >= gameboardSize) return false;\n\n    for (i; i < axisIndexEnd; i++) {\n      const cellValue = isHorizontal\n        ? gameboard[y][x + i]\n        : gameboard[y + i][x];\n\n      if (cellValue !== fillValue) return false;\n    }\n\n    return true;\n  };\n\n  private getRotatedPlacePieceParams(ship: BattleshipBuilder) {\n    const applyOffsetToCoordinate = (\n      coordinate: number,\n      shipLength: ShipLength\n    ): number => {\n      const offset: number = shipLength - 1;\n      return coordinate - offset;\n    };\n    const determineRotatedOrientation = (\n      angleOfRotation: AngleOfRotation,\n      isHorizontal: boolean\n    ): Orientation => {\n      return isHorizontal\n        ? angleOfRotation === AnglesOfRotation.Degrees180\n          ? 'horizontal'\n          : 'vertical'\n        : angleOfRotation === AnglesOfRotation.Degrees180\n        ? 'vertical'\n        : 'horizontal';\n    };\n    const getRotatedBowCoordinates = (\n      angleOfRotation: AngleOfRotation,\n      isHorizontal: boolean,\n      [x, y]: Coordinates\n    ): RotatedCoordinatesValue => {\n      if (\n        angleOfRotation === AnglesOfRotation.Degrees0 ||\n        (angleOfRotation === AnglesOfRotation.Degrees90 && isHorizontal) ||\n        (angleOfRotation === AnglesOfRotation.Degrees270 && !isHorizontal)\n      ) {\n        return rotationalPivotBowCoordinates;\n      }\n\n      const rotatedBowCoordinates: Coordinates = isHorizontal\n        ? angleOfRotation === AnglesOfRotation.Degrees180\n          ? [applyOffsetToCoordinate(x, ship.length), y]\n          : [x, applyOffsetToCoordinate(y, ship.length)] // angleOfRotation === 270\n        : angleOfRotation === AnglesOfRotation.Degrees180\n        ? [x, applyOffsetToCoordinate(y, ship.length)]\n        : [applyOffsetToCoordinate(x, ship.length), y]; // angleOfRotation === 90\n\n      return areCoordinatesInBounds(\n        rotatedBowCoordinates,\n        this.playerState.gameboardBuilder.boardSize\n      )\n        ? rotatedBowCoordinates\n        : 'outOfBounds';\n    };\n    const createRotatedPiecePlacementParams = (\n      rotationalPivotBowCoordinates: Coordinates,\n      rotationalPivotOrientation: Orientation\n    ): RotatedPlacePieceParams => {\n      const isHorizontal = rotationalPivotOrientation === 'horizontal';\n\n      const rotatedPiecePlacementParams: RotatedPlacePieceParams = {};\n\n      const anglesOfRotation: AnglesOfRotation[] = [\n        AnglesOfRotation.Degrees0,\n        AnglesOfRotation.Degrees90,\n        AnglesOfRotation.Degrees180,\n        AnglesOfRotation.Degrees270,\n      ];\n\n      anglesOfRotation.forEach((angleOfRotation) => {\n        const coordinates: RotatedCoordinatesValue =\n          angleOfRotation === AnglesOfRotation.Degrees0\n            ? rotationalPivotBowCoordinates\n            : getRotatedBowCoordinates(\n                angleOfRotation,\n                isHorizontal,\n                rotationalPivotBowCoordinates\n              );\n\n        if (coordinates === 'outOfBounds') {\n          rotatedPiecePlacementParams[angleOfRotation] = 'outOfBounds';\n        } else {\n          rotatedPiecePlacementParams[angleOfRotation] = {\n            coordinates,\n            orientation:\n              angleOfRotation === AnglesOfRotation.Degrees0\n                ? rotationalPivotOrientation\n                : determineRotatedOrientation(angleOfRotation, isHorizontal),\n          };\n        }\n      });\n\n      return rotatedPiecePlacementParams;\n    };\n    const generateRotationalPositionMap = (\n      rotatedPiecePlacementParams: RotatedPlacePieceParams\n    ): RotationalPositionMap => {\n      const rotatedPlacePieceParams: RotationalPositionMap = new Map();\n\n      for (const angleOfRotationString of Object.keys(\n        rotatedPiecePlacementParams\n      )) {\n        const angleOfRotationToNum = +angleOfRotationString as AngleOfRotation;\n\n        if (!isAngleOfRotation(angleOfRotationToNum)) {\n          throw new Error(\n            `Invalid Type: \"${angleOfRotationString}\" doesn't conform to \"AngleOfRotation\".`\n          );\n        }\n\n        const rotatedPlacePieceParamsValue: RotatedPlacePieceParamsValue =\n          rotatedPiecePlacementParams[angleOfRotationToNum]!;\n\n        if (\n          !(\n            isPlacePieceParams(rotatedPlacePieceParamsValue) ||\n            isOutOfBounds(rotatedPlacePieceParamsValue)\n          )\n        ) {\n          throw new Error(\n            `Invalid Type: \"${rotatedPlacePieceParamsValue}\" doesn't conform to \"RotatedPlacePieceParams\".`\n          );\n        }\n\n        if (!isPlacePieceParams(rotatedPlacePieceParamsValue)) continue;\n\n        const { coordinates: bowCoordinates, orientation }: IPlacePieceParams =\n          rotatedPlacePieceParamsValue;\n\n        const placePieceParams: IPlacePieceParams = {\n          coordinates: bowCoordinates,\n          orientation,\n        };\n\n        rotatedPlacePieceParams.set(angleOfRotationToNum, placePieceParams);\n      }\n\n      return rotatedPlacePieceParams;\n    };\n\n    const rotationalPivotBowCoordinates: Coordinates =\n      ship.rotationalPivotConfigurations.coordinatesArray![0];\n    const rotationalPivotOrientation: Orientation =\n      ship.rotationalPivotConfigurations.orientation!;\n    const rotatedPiecePlacementParams: RotatedPlacePieceParams =\n      createRotatedPiecePlacementParams(\n        rotationalPivotBowCoordinates,\n        rotationalPivotOrientation\n      );\n\n    const rotatedPlacePieceParamsMap: RotationalPositionMap =\n      generateRotationalPositionMap(rotatedPiecePlacementParams);\n\n    return rotatedPlacePieceParamsMap;\n  }\n\n  private isShipValidForRemoval(ship: BattleshipBuilder): boolean {\n    if (\n      !ship.currentplacementConfigurations.coordinatesArray ||\n      !this.playerState.gameboardRepository.isShipPlaced(ship.type)\n    ) {\n      console.error(\n        `Error removing ship: ${ship.type} is missing coordinates or not in the fleet.`\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  private relocateShip(\n    ship: BattleshipBuilder,\n    placementParameters: IPlacePieceWrapperParams,\n    shouldResetShipRotationalData: boolean\n  ): void {\n    this.removePiece(ship, shouldResetShipRotationalData);\n    this.placePiece(placementParameters);\n  }\n\n  private setFleetRotatedPlacePieceParams(fleet: Fleet): void {\n    for (const ship of Object.values(fleet)) {\n      if (ship.isPlaced()) this.setShipRotatedPlacePieceParams(ship);\n    }\n  }\n\n  private setShipRotatedPlacePieceParams(ship: BattleshipBuilder): void {\n    const rotatedPlacePieceParams: RotationalPositionMap =\n      this.getRotatedPlacePieceParams(ship);\n\n    this.playerState.gameboardRepository.setShipValidRotationalParams(\n      ship,\n      rotatedPlacePieceParams\n    );\n  }\n}\n","import {\n  AxisArrayKey,\n  Coordinates,\n  Gameboard,\n  IValidPlacementCallbackParams,\n  IValidPositionsResult,\n  Orientation,\n  PositionArray,\n  ShipLength,\n} from '../../../../types/logic-types';\n\nexport function getValidShipPositions({\n  shipLength,\n  orientation,\n  battleshipBoardBuilder\n}: IValidPlacementCallbackParams): IValidPositionsResult {\n  const extractAxisArray = (\n    axisIndex: number,\n    orientation: Orientation,\n    gameboard: Gameboard\n  ): Array<symbol> => { // or symbol[]\n    \n    return orientation === 'horizontal'\n      ? gameboard[axisIndex] // Returns row #<axisIndex>\n      : gameboard.map(row => row[axisIndex]) // `y` values at column-<axisIndex>\n  };\n  const findValidPositionsInAxis = (\n    axisArray: Array<symbol>, // or symbol[]\n    isHorizontal: boolean,\n    axisIndex: number,\n    shipLength: ShipLength\n  ): PositionArray => {\n    let streak: number = 0;\n    let validAxisPositions: PositionArray = [];\n    \n    for (let i = 0; i < axisArray.length; i++) {\n      if (axisArray[i] === battleshipBoardBuilder.fillValue) {\n        streak++;\n        \n        if (streak >= shipLength) {\n          const bowPosition: Coordinates =\n            isHorizontal\n            ? [i - (shipLength - 1), axisIndex]\n            : [axisIndex, i - (shipLength - 1)];\n          \n          const sternPosition: Coordinates =\n            isHorizontal\n              ? [i, axisIndex]\n              : [axisIndex, i];\n\n          validAxisPositions.push({\n            bow: bowPosition,\n            stern: sternPosition,\n          });\n        }\n      } else {\n        streak = 0;\n      }\n    }\n    \n    return validAxisPositions;\n  };\n\n  const validPositionsPerAxis: IValidPositionsResult = {}; \n  const board: Gameboard = battleshipBoardBuilder.board;\n  const isHorizontal = orientation === 'horizontal';\n\n  for (let axisIndex = 0; axisIndex < board.length; axisIndex++) {\n    const axisArray: Array<symbol> = extractAxisArray(axisIndex, orientation, board);\n    const validPositions: PositionArray = findValidPositionsInAxis(\n      axisArray,\n      isHorizontal,\n      axisIndex,\n      shipLength\n    );\n    \n    const axisTemplate: AxisArrayKey =\n      isHorizontal\n        ? `row-${axisIndex}`\n        : `column-${axisIndex}`;\n    \n    validPositionsPerAxis[axisTemplate] = validPositions;\n  }\n\n  return validPositionsPerAxis;\n}","import {\n  AnglesOfRotation,\n  AxisArrayKey,\n  Coordinates,\n  CoordinatesArray,\n  Gameboard,\n  IPlacementConfigurations,\n  IPlacePieceCallbackParams,\n  IPosition,\n  IShipPlacementConfigurations,\n  IValidPositionsResult,\n  Orientation,\n  ShipLength,\n  ShipSymbolValue,\n  ShipType,\n} from '../../../../types/logic-types';\nimport { arePositionsEqual, createPositionObject, isCoordinateInBounds } from '../../../../utilities/logic-utilities';\nimport { BattleshipBuilder } from '../../../bs-ship-builder/bs-ship-builder';\n\nexport function placeShip({\n  ship,\n  coordinates,\n  orientation,\n  battleshipBoardController,\n  battleshipBoardBuilder,\n  battleshipBoardRepository\n}: IPlacePieceCallbackParams): void {  \n  const shipLength: ShipLength = ship.length;\n  const [bowX, bowY]: Coordinates = coordinates;\n  const isHorizontal: boolean = orientation === 'horizontal';\n  const axisStart: number = isHorizontal ? bowX : bowY;\n  const axisEnd = axisStart + shipLength - 1;\n\n  if (!isCoordinateInBounds(axisEnd, battleshipBoardBuilder.boardSize)) {\n    const errorMessage: string = `Invalid Command: The ship placement attempt with the following configurations is out of bounds - Coordinates: ${coordinates}, Length: ${ship.length}, Orientation: ${orientation}.`;\n    throw new Error(errorMessage);\n  };\n\n  if (ship.isPlaced()) {\n    console.warn(`Invalid Command: The ${ship.type} has already been placed.`);\n    return;\n  };\n\n  const isPositionValid = (\n    position: IPosition,\n    shipConfigurations: IShipPlacementConfigurations,\n    axisArrayKey: AxisArrayKey\n  ): boolean => {\n    const validPositions: IValidPositionsResult =\n      battleshipBoardController.getValidPositions(shipConfigurations);\n\n    return validPositions[axisArrayKey].some((validPosition: IPosition) =>\n      arePositionsEqual(position, validPosition)\n    );\n  };\n\n  const position: IPosition = createPositionObject(\n    coordinates,\n    orientation,\n    shipLength,\n  );\n\n  const shipConfigurations: IShipPlacementConfigurations = {\n    shipLength,\n    orientation\n  };\n  const axisArrayKey: AxisArrayKey = isHorizontal\n    ? `row-${bowY}`\n    : `column-${bowX}`; \n    \n  if (isPositionValid(position, shipConfigurations, axisArrayKey)) {\n    const getPlacementCoordinates = (\n      validPosition: IPosition,\n      isHorizontal: Boolean\n    ): CoordinatesArray => {\n      const placementCoordinates: CoordinatesArray = [];\n\n      const [bowX, bowY]: Coordinates = validPosition.bow;\n      const [sternX, sternY]: Coordinates = validPosition.stern;\n\n      const primary: number = isHorizontal\n        ? bowY\n        : bowX;\n      const axisStart: number = isHorizontal\n        ? bowX\n        : bowY;\n      const axisEnd: number = isHorizontal\n        ? sternX\n        : sternY;\n\n      for (let i = axisStart; i <= axisEnd; i++) {\n        placementCoordinates.push(isHorizontal ? [i, primary] : [primary, i]);\n      }\n\n      return placementCoordinates;\n    };\n    const placeOnBoard = (\n      ship: BattleshipBuilder,\n      shipPlacementCoordinates: CoordinatesArray\n    ): void => {\n      const gameboard: Gameboard = battleshipBoardBuilder.board;\n      const shipSymbol: ShipSymbolValue = ship.symbol;\n\n      shipPlacementCoordinates.forEach((coordinates) => {\n        const [x, y]: Coordinates = coordinates;\n        gameboard[y][x] = shipSymbol;\n      });\n    };\n    const setShipConfigurations = (\n      ship: BattleshipBuilder,\n      coordinatesArray: CoordinatesArray,\n      orientation: Orientation\n    ): void => {\n      const placementConfigurations: IPlacementConfigurations = { coordinatesArray, orientation };\n      \n      ship.currentplacementConfigurations = placementConfigurations;\n\n      if (Object.values(ship.rotationalPivotConfigurations).every(value => value === null)) {\n        ship.rotationalPivotConfigurations = {\n          ...placementConfigurations,\n          transientAngleOfRotation: AnglesOfRotation.Degrees0,\n        }\n      }      \n    };\n    const updateOccupiedCoordinatesSet = (\n      shipType: ShipType,\n      placementCoordinates: CoordinatesArray\n    ): void => {\n      battleshipBoardRepository.addShipToFleetCoordinates(\n        shipType,\n        placementCoordinates\n      );\n    };\n\n    const placementCoordinates: CoordinatesArray = getPlacementCoordinates(\n      position,\n      isHorizontal\n    );\n\n    placeOnBoard(ship, placementCoordinates);\n    setShipConfigurations(\n      ship,\n      placementCoordinates,\n      orientation\n    );\n    updateOccupiedCoordinatesSet(ship.type, placementCoordinates);\n  } else {\n    const errorMessage: string = `Invalid Command: \"${JSON.stringify(\n      position\n    )}\" is unavailable for ship with Size: ${shipLength} and Orientation: ${orientation}.`;\n\n    throw new Error(errorMessage);\n  }\n}\n","import { BattleshipBuilder } from \"../bs-ship-builder/bs-ship-builder\";\nimport {\n  Coordinates,\n  CoordinatesArray,\n  CoordinatesToString,\n  FleetCoordinates,\n  InBoundRotationalPlacePieceParamsForFleet,\n  ShipType,\n  RotationalPositionMap\n} from \"../../types/logic-types\";\n\nexport class BattleshipBoardRepository {\n  readonly #fleetCoordinates: FleetCoordinates = {};\n  readonly #inBoundRotationalPlacePieceParamsForFleet: InBoundRotationalPlacePieceParamsForFleet =\n    {};\n  readonly #attackedCoordinates: Set<CoordinatesToString> = new Set();\n  readonly #sunkShips: Set<ShipType> = new Set();\n\n  // 💭 --------------------------------------------------------------\n\n  public get fleetCoordinates(): FleetCoordinates {\n    return this.#fleetCoordinates;\n  }\n\n  public get inBoundRotationalPlacePieceForFleet(): InBoundRotationalPlacePieceParamsForFleet {\n    return this.#inBoundRotationalPlacePieceParamsForFleet;\n  }\n\n  public addAttackedCoordinates(coordinates: Coordinates): void {\n    this.#attackedCoordinates.add(`[${coordinates[0]}, ${coordinates[1]}]`);\n  }\n\n  public addShipToFleetCoordinates(\n    shipType: ShipType,\n    placementCoordinates: CoordinatesArray\n  ): void {\n    if (!this.fleetCoordinates[shipType]) {\n      this.fleetCoordinates[shipType] = new Set();\n    }\n\n    placementCoordinates.forEach((coordinates: Coordinates) => {\n      const [x, y]: Coordinates = coordinates;\n      const setMemberTemplate: CoordinatesToString = `[${x}, ${y}]`;\n      this.fleetCoordinates[shipType]!.add(setMemberTemplate);\n    });\n  }\n\n  public addSunkenShip(shipType: ShipType) {\n    this.#sunkShips.add(shipType);\n  }\n\n  public areAllShipsSunk(): boolean {\n    return this.#sunkShips.size === Object.keys(this.fleetCoordinates).length;\n  }\n\n  public isShipPlaced(shipType: ShipType): boolean {\n    return this.fleetCoordinates[shipType] !== null;\n  }\n\n  public nullifyShipCoordinatesValue(shipType: ShipType): void {\n    this.fleetCoordinates[shipType] = null;\n  }\n\n  public nullifyShipValidRotationalParams(shipType: ShipType): void {\n    this.inBoundRotationalPlacePieceForFleet[shipType] = null;\n  }\n\n  public setShipValidRotationalParams(\n    ship: BattleshipBuilder,\n    validRotatedPlacePieceParams: RotationalPositionMap\n  ): void {\n    if (!this.#inBoundRotationalPlacePieceParamsForFleet[ship.type])\n      this.#inBoundRotationalPlacePieceParamsForFleet[ship.type] =\n        validRotatedPlacePieceParams;\n  }\n\n  public hasTargetBeenAttacked(coordinates: Coordinates): boolean {\n    return this.#attackedCoordinates.has(\n      `[${coordinates[0]}, ${coordinates[1]}]`\n    );\n  }\n}","import { BattleshipFleetBuilder } from \"../logic/bs-fleet-builder/bs-fleet-builder\";\nimport { BattleshipBoardBuilder } from \"../logic/bs-gameboard-builder/bs-gameboard-builder\";\nimport { BattleshipBoardController } from \"../logic/bs-gameboard-controller/bs-gameboard-controller\";\nimport { BattleshipBoardRepository } from \"../logic/bs-gameboard-repository/bs-gameboard-repository\";\nimport { FleetVersion } from \"../types/logic-types\";\nimport { PlayerContext, PlayerCore } from \"../types/state-types\";\n\nexport const createPlayerContext = (fleetVersion: FleetVersion) => { \n  const gameboardBuilder = new BattleshipBoardBuilder();\n  const gameboardRepository = new BattleshipBoardRepository();\n\n  let fleetBuilder: BattleshipFleetBuilder;\n  switch (fleetVersion) {\n    case 1990:\n      fleetBuilder = BattleshipFleetBuilder.createMBFleet();\n      break;\n    case 2002:\n      fleetBuilder = BattleshipFleetBuilder.createHasbroFleet();\n      break;\n    default:\n      throw new Error(`There was no Battleship version created in ${fleetVersion}.`);\n  }\n\n  const gameboardController = new BattleshipBoardController({\n    gameboardBuilder,\n    gameboardRepository,\n    fleetBuilder\n  });\n\n  return {\n    gameboardBuilder,\n    gameboardRepository,\n    fleetBuilder,\n    gameboardController,\n  }\n}\n\nexport const initalizePlayerCore = (fleetVersion: FleetVersion): PlayerCore => {\n  const playerContext = createPlayerContext(fleetVersion);\n  const opponentContext = createPlayerContext(fleetVersion);\n\n  return {\n    player: playerContext,\n    opponent: opponentContext,\n  }\n}","import { DOMController } from './typescript/meta/dom-controller';\nimport { GameState } from './typescript/state/game-state';\nimport EventBus from './typescript/utilities/event-bus';\nimport { BillowBot } from './typescript/services/billow';\nimport { FleetVersion } from './typescript/types/logic-types';\nimport { PlayerCore } from './typescript/types/state-types';\nimport { initalizePlayerCore } from './typescript/state/player-state';\nimport { randomizeBSGameboards } from './typescript/meta/init/randomize-gameboard';\n\nclass App {\n  // Instantiate foundational dependencies\n  public readonly eventBus: EventBus = new EventBus();\n  public readonly isMultiplayer: boolean = false;\n  public readonly version: FleetVersion = 2002;\n  public readonly playerCore: PlayerCore = initalizePlayerCore(this.version);\n\n  // Runtime-initialized components\n  public readonly gameState: GameState;\n  public readonly billowBot: BillowBot | null;\n  public readonly domController: DOMController;\n\n  private constructor() {\n    randomizeBSGameboards(this.playerCore);\n\n    this.gameState = new GameState(\n      this.isMultiplayer,\n      this.eventBus,\n      this.version\n    );\n    this.billowBot = !this.isMultiplayer ? new BillowBot(this.gameState) : null;\n    this.domController = new DOMController(\n      this.gameState,\n      this.playerCore,\n      this.billowBot\n    );\n  }\n\n  public static powerOn() {\n    const app = new App();\n    app.pressStart();\n\n    return app;\n  }\n\n  public pressStart = (): void => {\n    this.domController.render();\n  };\n}\n\nconsole.time('powerOn');\nexport const app = App.powerOn(); \nconsole.timeEnd('powerOn');","import { randomizeBSGameboard } from \"../../setup/randomize-bs-gameboard\";\nimport { PlayerCore } from \"../../types/state-types\";\n\nexport const randomizeBSGameboards = (playerCore: PlayerCore) => {\n  const { player, opponent } = playerCore;\n\n  randomizeBSGameboard(\n    player.gameboardController,\n    player.fleetBuilder.fleet\n  );\n  randomizeBSGameboard(\n    opponent.gameboardController,\n    opponent.fleetBuilder.fleet\n  );\n};\n"],"names":["CycloneLightboxController","dialogState","isDialogOpen","isEscapeKeyListenerAttached","isCloseButtonListenerAttached","constructor","dialogElement","dialogCloseButtonID","dialogInDocumentBody","this","id","Error","dialogId","dialogCloseButton","dsGetCloseButton","dsAddCloseButtonAria","closeButtonListener","closeLightbox","bind","escapeKeyListener","dsHandleEscapeKey","observeDialogRemoval","openLightbox","showModal","dsAddListeners","requestAnimationFrame","classList","add","addEventListener","remove","close","dsRemoveListeners","once","isOpen","window","removeEventListener","closeButtonId","closeButton","querySelector","setAttribute","event","key","preventDefault","observer","MutationObserver","mutations","mutation","Array","from","removedNodes","forEach","node","disconnect","observe","document","body","childList","subtree","areArraysEqual","arrayOne","arrayTwo","length","every","value","index","capitalize","str","charAt","toUpperCase","slice","toLowerCase","getConvertedTypeFromAttr","element","attribute","typeGuard","attrValue","getAttribute","getRandomInt","min","max","Math","floor","random","createElement","tag","classes","attributes","cls","Object","entries","sleep","ms","Promise","resolve","setTimeout","waitForTransitionEnd","timeout","expectedCount","callback","resolved","transitionCount","cleanup","handler","clearTimeout","timer","undefined","target","setAttributes","createMainOneParabellumFragment","instructionsButton","parabellumHeading","textContent","mainContainerOneParabellumWrapper","append","render","parabellumFragment","DocumentFragment","createMainOneBellumFragment","sitRepScrollerController","latestUpdatesHeading","mainContainerOneBellumWrapper","bellumFragment","appendChild","createMainOnePostBellumFragment","mainContainerPostBellumWrapper","postBellumFragment","CycloneHotSwapContainer","elementTag","fragments","initialFragmentKey","classNames","hotSwapContainer","fragmentsArray","values","setInitialIndex","targetElement","swapFragmentByKey","fragment","getFragment","swapFragment","indexOf","swapByOrder","initialIndex","replaceChildren","AnglesOfRotation","ShipType","isCoordinates","isArray","coordinate","isHTMLDivElement","el","HTMLDivElement","isHTMLElement","HTMLElement","isOrientation","includes","isOutOfBounds","isPlacePieceParams","coordinates","isPosition","proto","getPrototypeOf","prototype","isPlainObject","bow","stern","isShipType","gameboardStateValue","PlayerGameboardComponent","fleetElements","Map","listenersAdded","dragState","currentShipInstance","initialPlacementConfigurations","isValidDropTarget","currentDragOverCell","cloneSnapOffset","shipBorderValueSplit","dragEventCallbacks","dragstart","e","handleShipDragStart","drag","handleShipDrag","dragenter","handleShipDragEnter","dragleave","handleShipDragLeave","dragover","handleShipDragOver","drop","handleShipDrop","dragend","handleShipDragEnd","playerState","gameState","gameboardContainer","generateBoardContainer","gameboardBuilder","boardSize","gameboard","generateBoardFragment","dragImage","createDragImage","shipDragClone","createShipDragClone","eventBus","on","refreshGameboardWrapper","toggleGameboardControls","receiveAttack","handleFleetPlacement","fleetBuilder","toggleParabellumListeners","method","handleShipRotation","togglePlayerTurn","attackResult","hit","isSunk","checkForWin","toggleShipsDraggable","shipElement","removeAttribute","toggleShipAdriftClass","applyGridPlacementValue","gridPlacementValue","gridCrossAxis","orientation","shipLength","style","gridColumn","gridRow","toString","gridTemplateColumns","gridTemplateRows","gameboardRepository","areAllShipsSunk","alert","currentPlayer","transitionToNextPhase","src","createBackgroundCellsFragment","cellFragment","row","rowIndex","symbol","colIndex","symbolDescription","description","hitMarker","gridCell","role","gridCellContainer","createShipElement","shipType","shipUnitFragment","generateShipUnitFragment","shipContainerElement","draggable","syncShipUnitDataAttributes","setProperty","gameboardBackground","board","boardFragment","i","isBow","isStern","shipUnit","getGridPlacementValue","isHorizontal","x","y","getShipPlacementData","ship","getShip","coordinatesArray","currentplacementConfigurations","type","bowCoordinates","updateFleetElements","placeFleetOnGameboard","cookShipUnit","attackCoordinates","get","attackedShipUnit","console","warn","handleSinkingShip","async","sinkShip","hasTargetBeenAttacked","alreadyAttacked","addAttackedCoordinates","_receiveAttack","gridCellDataKey","gameboardController","triggerPrePlayerToggleAnimations","error","refreshGameboard","boardContainer","removeChild","setFleetElement","set","shipUnitElements","children","filter","isHTMLDivElementArray","unit","String","DELAY_AFTER_TRANSITION_SECOND","newGameboardState","toggle","inactive","uiUpdate","updateUIPostAttack","sitRepUpdate","emit","all","size","clear","fleet","playerType","matches","getCloneSnapOffset","shipBow","getShipBow","match","getComputedStyle","documentElement","getPropertyValue","trim","groups","offsetX","offsetY","getBoundingClientRect","width","height","Number","numberValue","updateDragState","JSON","stringify","removePiece","dataTransfer","setDragImage","setCloneDimensions","shipContainer","shipClone","shipBoundingRect","setInitialDragStyles","classifyValidCellCoordinates","shipLengthAttr","classifyValidBowCells","gridCells","allValidBowCoordinates","getAllValidBowCoordinates","gridCellCoordinates","validBowCoordinates","querySelectorAll","snapCloneToCursor","areValidBowCoordinates","contains","initialOrientation","validGridCell","xAttr","yAttr","newCoordinates","placePiece","resetShipPosition","initialBowCoordinates","removeDragStyles","cellFeedbackClass","rotatePiece","gameboardClientRect","gameboardOffsetX","left","gameboardOffsetY","top","cursorX","clientX","cursorY","clientY","getId","OpponentGameboardComponent","toggleBellumListeners","handleCellClick","cookAllShipUnits","shipUnits","lastUnit","_","getAttackCoordinates","dataX","dataY","getGridAreaValue","revealShipPosition","setGridPlacementValue","waitForEvent","eventType","active","MainContainerTwo","playerCore","playerGameboardComponent","player","opponentGameboardComponent","opponent","mainContainerTwo","playerGameboard","opponentGameboard","randomizeBSGameboard","getValidCoordinatesRecursively","attempts","generateRandomCoordinates","areCoordinatesValid","validPositionsParams","validPositions","getValidPositions","bowX","bowY","axisIndex","some","position","randomOrientation","placePieceParams","ShipShufflerButtonComponent","shipShufflerButtonTextContent","buttonClass","shuffleShips","randomizeGameboard","updateGameboard","shipShufflerButton","createshipShufflerButton","toggleEventListener","shipShufflerButtonContainer","createshipShufflerButtonContainer","removeAllPieces","ReadyUpButtonComponent","readyUpButtonTextContent","buttonId","readyUp","anchorShips","removeParabellumButtonListeners","transitionToBellum","readyUpButton","createReadyUpButton","readyUpButtonContainer","createReadyUpButtonContainer","readyUpTextSpan","inactiveReadyUpButton","alt","activeReadyUpButton","button","ScoreBoardComponent","scoreBoardID","hitPointMap","battleship","carrier","cruiser","destroyer","patrolBoat","submarine","fleets","shipTypes","fleetStatusContainers","createFleetStatusContainers","shipLabelList","createShipLabelList","scoreBoardContainer","createScoreBoardContainer","markNextHitPoint","playerOneFleetStatusContainer","playerTwoFleetStatusContainer","createHitPointContainersFragment","hitPointsFragment","hitPointContainer","hitpointElement","storeShipHitPointData","createFleetStatusContainer","fleetStatusHeading","hitPointContainersFragment","fleetStatusContainer","map","shipLabelListItemsFragment","shipLabelListElement","hitMarkPayload","nextHitPoint","pop","reversedHitPointArray","reverse","createMainThreeParabellumFragment","mainContainerThreeParabellumWrapper","createMainThreeBellumFragment","scoreBoard","mainContainerThreeBellumWrapper","createMainThreePostBellumFragment","mainContainerThreePostBellumWrapper","SHIP_SYMBOLS","Carrier","Symbol","Battleship","Cruiser","Submarine","Destroyer","PatrolBoat","sizeLookup","BattleshipBuilder","seaworthy","rotationalPivotConfigurations","transientAngleOfRotation","isPlaced","_hitCounter","version","isSeaworthy","hitCounter","resetConfigurations","shouldResetShipRotationalData","placementConfigurations","BattleshipFleetBuilder","createFleet","fleetConfigs","config","createHasbroFleet","createMBFleet","static","getShipTypes","InstructionsComponent","buttonImageId","instructionsLightboxController","createInstructionsButton","instructionsButtonContainer","createInstructionsButtonContainer","openInstructionsDialog","MainComponent","mainElement","cycloneSitRepScroller","mainContainerOne","createMainContainerOne","mainContainerThree","createMainContainerThree","renderMainContainers","sitRepContainer","mainOneFragments","parabellum","bellum","postBellum","playerGameboardController","mainThreeFragments","InstructionsDialogComponent","instructionsDialogCloseButton","createInstructionsDialogCloseButton","instructionsDialog","createInstructionsDialog","tertiaryHeading","listItemFragment","generateListFragment","listItemTextContentArray","identifier","listFragment","listItem","listElement","instructionsListItemTextContentArray","instructionsList","unanchoredShipExample","unanchoredShipText","visualFeedbackKeyContainer","instructionsContentContainer","CycloneSitRepScroller","TURN","PLAYER","OPPONENT","ATTACK","HIT","subject","SUNK","MISS","currentSitRep","nextSitRep","container","current","next","getControlledSitRepElements","sitRepTextElements","initialize","firstPlayer","setInitialTextContent","setAndScrollToNextSitRep","getNextSitRep","resetSitRepContainer","DELAY_AFTER_TRANSITION_SECONDS","getAttackSitRep","MESSAGES","toggleCurrentPlayer","toggleSitRepType","getTurnSitRep","message","currentTextContentElement","nextTextContentElement","currentSitRepContainer","nextSitRepContainer","textContentElement","sitRepContentContainer","DOMController","header","nav","headingLink","href","heading","gitHubLogoLink","color","gitHubUsername","projectName","pathOne","createElementNS","pathTwo","gInner","gOuter","stroke","fill","gitHubSVG","viewBox","xmlns","rel","createGitHubLink","createNav","createHeader","billowBot","content","getElementById","mainComponent","updateUIActiveGameboard","readyPlayerOne","currentGamePhase","setInitialPlayer","initializeSitRepScroller","updateGameboardsOnTransition","attack","updateGameboardContainerState","resetGame","resetGameState","GameState","getInitialPlayer","isMultiplayer","isPlayer","EventBus","events","eventName","fn","push","off","listener","data","BillowBot","Set","populatepossibleAttacksSet","determineNextTarget","rememberLastTargetHit","getNextAttackCoordinates","lastAttackCoordinates","wasLastTargetHit","getRandomCoordinates","ponder","timeCapsuleMS","coordinatesString","delete","split","getSmartCoordinates","lastAttackX","lastAttackY","BattleshipBoardBuilder","_boardSize","_fillValue","vacant","_board","fillValue","createPositionObject","isCoordinateInBounds","areCoordinatesInBounds","arePositionsEqual","positionOne","positionTwo","BattleshipBoardController","battleshipBoardBuilder","extractAxisArray","findValidPositionsInAxis","axisArray","streak","validAxisPositions","bowPosition","sternPosition","validPositionsPerAxis","getValidShipPositions","battleshipBoardController","positionsInAxis","movePiece","newBowCoordinates","currentOrientation","newPosition","isPositionInBounds","axisArrayKey","createAxisArrayKey","isNewPositionValid","placementParameters","relocateShip","battleshipBoardRepository","errorMessage","isPositionValid","shipConfigurations","validPosition","getPlacementCoordinates","placementCoordinates","sternX","sternY","primary","axisEnd","placeOnBoard","shipPlacementCoordinates","shipSymbol","setShipConfigurations","Degrees0","updateOccupiedCoordinatesSet","addShipToFleetCoordinates","placeShip","setFleetRotatedPlacePieceParams","prettyPrint","table","attackedShip","getShipAt","addSunkenShip","isShipValidForRemoval","shipCoordinates","removeShipFromBoard","nullifyShipCoordinatesValue","nullifyShipCoordinateSetValue","resetShipConfigurations","nullifyShipValidRotationalParams","keys","getNextPiecePlacementParams","rotationalPositionMap","currentAngle","maxAngle","getMaxAngle","originalBowCoordinates","originalOrientation","nextAngle","getNextAngle","find","angle","nextPlacePieceParams","inBoundRotationalPlacePieceForFleet","initialAngle","finalPlacePieceParams","isRotatedPositionValid","updateTransientPlacementParams","areCoordinatesVacant","shipSymbolValue","getShipTypeFromSymbol","angleOfRotation","gameboardSize","newAxisIndexStart","axisIndexEnd","Degrees90","Degrees270","getRotatedPlacePieceParams","applyOffsetToCoordinate","determineRotatedOrientation","Degrees180","getRotatedBowCoordinates","rotationalPivotBowCoordinates","rotatedBowCoordinates","rotationalPivotOrientation","rotatedPiecePlacementParams","createRotatedPiecePlacementParams","rotatedPlacePieceParamsMap","rotatedPlacePieceParams","angleOfRotationString","angleOfRotationToNum","rotatedPlacePieceParamsValue","generateRotationalPositionMap","isShipPlaced","setShipRotatedPlacePieceParams","setShipValidRotationalParams","BattleshipBoardRepository","fleetCoordinates","setMemberTemplate","validRotatedPlacePieceParams","has","createPlayerContext","fleetVersion","App","initalizePlayerCore","randomizeBSGameboards","domController","powerOn","app","pressStart","time","timeEnd"],"sourceRoot":""}