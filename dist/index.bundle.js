!function(){"use strict";const e=(e,t)=>e.length===t.length&&e.every(((e,r)=>e===t[r])),t=(e,t,r)=>{const o=e.getAttribute(t);if(!o||!r(o))throw new Error(`Invalid or missing attribute: ${t}`);return o},r=(e,t)=>Math.floor(Math.random()*(t-e+1))+e,o=(e,t=[],r={})=>{const o=document.createElement(e);return t.forEach((e=>o.classList.add(e))),Object.entries(r).forEach((([e,t])=>o.setAttribute(e,t))),o},n=(e,t)=>`player-${e.split("player")[1].toLowerCase()}-${t}`;var i,a;!function(e){e[e.Degrees0=0]="Degrees0",e[e.Degrees90=90]="Degrees90",e[e.Degrees180=180]="Degrees180",e[e.Degrees270=270]="Degrees270"}(i||(i={})),function(e){e.Battleship="battleship",e.Carrier="carrier",e.Cruiser="cruiser",e.Destroyer="destroyer",e.PatrolBoat="patrolBoat",e.Submarine="submarine"}(a||(a={}));class s{static vacant=Symbol("VC");_boardSize=10;_fillValue=s.vacant;constructor(){this._board=Array.from({length:this._boardSize},(()=>Array(this._boardSize).fill(this._fillValue)))}get board(){return this._board}get boardSize(){return this._boardSize}get fillValue(){return this._fillValue}}class l{constructor(e){this.playerState=e}getValidPositions({orientation:e,shipLength:t}){return function({shipLength:e,orientation:t,battleshipBoardBuilder:r}){const o=(e,t,r)=>"horizontal"===t?r[e]:r.map((t=>t[e])),n=(e,t,o,n)=>{let i=0,a=[];for(let s=0;s<e.length;s++)if(e[s]===r.fillValue){if(i++,i>=n){const e=t?[s-(n-1),o]:[o,s-(n-1)],r=t?[s,o]:[o,s];a.push({bow:e,stern:r})}}else i=0;return a},i={},a=r.board,s="horizontal"===t;for(let r=0;r<a.length;r++){const l=n(o(r,t,a),s,r,e);i[s?`row-${r}`:`column-${r}`]=l}return i}({orientation:e,shipLength:t,battleshipBoardBuilder:this.playerState.gameboardBuilder,battleshipBoardController:this})}getAllValidBowCoordinates(e,t){let r=new Set;const o=this.getValidPositions({orientation:e,shipLength:t});for(const e of Object.values(o)){if(!T(e))throw new Error(`Expected each value of validPositions to be an array of IPosition objects, but received: ${typeof e}.`);e.forEach((e=>r.add(e.bow)))}return r}movePiece(e,t){if(!e.isPlaced())return void console.warn(`Invalid Command: The ${e.type} has not been placed.`);const r=e.currentplacementConfigurations.orientation,o=f(t,r,e.length);if(!b(o,this.playerState.gameboardBuilder.boardSize))return void console.warn(`Invalid Command: Position - Bow: [${o.bow}] & Stern: [${o.stern}] is out of bounds for the ${e.type}.`);const n=this.getValidPositions({orientation:r,shipLength:e.length}),i="horizontal"===r,[a,s]=t,l=function(e,t){return t?`row-${e}`:`column-${e}`}(i?s:a,i);if(n[l].some((e=>S(e,o)))){const o={ship:e,coordinates:t,orientation:r},n=!0;this.relocateShip(e,o,n)}else console.warn(`Invalid Command: Position - Bow: [${o.bow}] & Stern: [${o.stern}] is unavailable for the ${e.type}.`)}placePiece({ship:e,coordinates:t,orientation:r}){!function({ship:e,coordinates:t,orientation:r,battleshipBoardController:o,battleshipBoardBuilder:n,battleshipBoardRepository:a}){const s=e.length,[l,d]=t,c="horizontal"===r;if(!m((c?l:d)+s-1,n.boardSize)){const o=`Invalid Command: The ship placement attempt with the following configurations is out of bounds - Coordinates: ${t}, Length: ${e.length}, Orientation: ${r}.`;throw new Error(o)}if(e.isPlaced())return void console.warn(`Invalid Command: The ${e.type} has already been placed.`);const h=f(t,r,s);if(!((e,t,r)=>o.getValidPositions(t)[r].some((t=>S(e,t))))(h,{shipLength:s,orientation:r},c?`row-${d}`:`column-${l}`)){const e=`Invalid Command: "${JSON.stringify(h)}" is unavailable for ship with Size: ${s} and Orientation: ${r}.`;throw new Error(e)}{const t=(e,t)=>{const r=[],[o,n]=e.bow,[i,a]=e.stern,s=t?n:o,l=t?i:a;for(let e=t?o:n;e<=l;e++)r.push(t?[e,s]:[s,e]);return r},o=(e,t)=>{const r=n.board,o=e.symbol;t.forEach((e=>{const[t,n]=e;r[n][t]=o}))},s=(e,t,r)=>{const o={coordinatesArray:t,orientation:r};e.currentplacementConfigurations=o,Object.values(e.rotationalPivotConfigurations).every((e=>null===e))&&(e.rotationalPivotConfigurations={...o,transientAngleOfRotation:i.Degrees0})},l=(e,t)=>{a.addShipToFleetCoordinates(e,t)},d=t(h,c);o(e,d),s(e,d,r),l(e.type,d)}}({ship:e,coordinates:t,orientation:r,battleshipBoardController:this,battleshipBoardBuilder:this.playerState.gameboardBuilder,battleshipBoardRepository:this.playerState.gameboardRepository}),this.setFleetRotatedPlacePieceParams(this.playerState.fleetBuilder.fleet)}prettyPrint(){console.table(this.playerState.gameboardBuilder.board.map((e=>e.map((e=>"VC"===e.description?null:e.description)))))}removePiece(e,t=!0){this.isShipValidForRemoval(e)&&((e=>{e.forEach((([e,t])=>{this.playerState.gameboardBuilder.board[t][e]=this.playerState.gameboardBuilder.fillValue}))})(e.currentplacementConfigurations.coordinatesArray),(e=>{this.playerState.gameboardRepository.nullifyShipCoordinatesValue(e)})(e.type),((e,t)=>{t&&this.playerState.gameboardRepository.nullifyShipValidRotationalParams(e.type),e.resetConfigurations(t)})(e,t))}removeAllPieces(e){if(Object.keys(e).length)for(const t of Object.values(e))this.removePiece(t);else console.error("Invalid Command: No ships to remove - Fleet is empty or uninitialized.")}rotatePiece(e){const t=(e,t)=>{const r=e.rotationalPivotConfigurations.transientAngleOfRotation,o=(e=>Array.from(e.keys()).pop()??i.Degrees0)(t);if(r===o){const t=e.rotationalPivotConfigurations.coordinatesArray[0],r=e.rotationalPivotConfigurations.orientation;return e.rotationalPivotConfigurations.transientAngleOfRotation=i.Degrees0,{ship:e,coordinates:t,orientation:r}}const n=((e,t)=>{if(null==t)throw new Error("Current angle doesn't exist");return Array.from(e.keys()).find((e=>e>t))??i.Degrees0})(t,r),a=t.get(n);return e.rotationalPivotConfigurations.transientAngleOfRotation=n,{ship:e,coordinates:a.coordinates,orientation:a.orientation}},r=this.playerState.gameboardRepository.inBoundRotationalPlacePieceForFleet[e.type],o=e.rotationalPivotConfigurations.transientAngleOfRotation,n=(r=>{let n=t(e,r);for(;e.rotationalPivotConfigurations.transientAngleOfRotation!==o&&!this.isRotatedPositionValid(n.coordinates,n.orientation,e.rotationalPivotConfigurations.transientAngleOfRotation,e.length);)n=t(e,r);return n})(r);e.rotationalPivotConfigurations.transientAngleOfRotation!==o?this.relocateShip(e,n,!1):console.warn("No valid rotational position found.")}areCoordinatesVacant(e){const[t,r]=e;return this.playerState.gameboardBuilder.board[r][t]===this.playerState.gameboardBuilder.fillValue}getShipAt(e){if(!this.areCoordinatesVacant(e))return this.playerState.gameboardRepository.getShipDataAt(e)}isRotatedPositionValid=([e,t],r,o,n)=>{const a="horizontal"===r,s=this.playerState.gameboardBuilder.boardSize,l=this.playerState.gameboardBuilder.board,d=this.playerState.gameboardBuilder.fillValue,c=a?e:t;let h,u;if(!a&&o===i.Degrees90||a&&o===i.Degrees270||o===i.Degrees0?(h=1,u=n):(h=0,u=n-1),c+n-1>=s)return!1;for(;h<u;h++)if((a?l[t][e+h]:l[t+h][e])!==d)return!1;return!0};getRotatedPlacePieceParams(e){const t=(e,t)=>e-(t-1),r=(e,t)=>t?e===i.Degrees180?"horizontal":"vertical":e===i.Degrees180?"vertical":"horizontal",o=(r,o,[a,s])=>{if(r===i.Degrees0||r===i.Degrees90&&o||r===i.Degrees270&&!o)return n;const l=o?r===i.Degrees180?[t(a,e.length),s]:[a,t(s,e.length)]:r===i.Degrees180?[a,t(s,e.length)]:[t(a,e.length),s];return y(l,this.playerState.gameboardBuilder.boardSize)?l:"outOfBounds"},n=e.rotationalPivotConfigurations.coordinatesArray[0],a=e.rotationalPivotConfigurations.orientation,s=((e,t)=>{const n="horizontal"===t,a={};return[i.Degrees0,i.Degrees90,i.Degrees180,i.Degrees270].forEach((s=>{const l=s===i.Degrees0?e:o(s,n,e);a[s]="outOfBounds"===l?"outOfBounds":{coordinates:l,orientation:s===i.Degrees0?t:r(s,n)}})),a})(n,a),l=(e=>{const t=new Map;for(const o of Object.keys(e)){const n=+o;if(r=n,!Object.values(i).includes(r))throw new Error(`Invalid Type: "${o}" doesn't conform to "AngleOfRotation".`);const a=e[n];if(!P(a)&&!E(a))throw new Error(`Invalid Type: "${a}" doesn't conform to "RotatedPlacePieceParams".`);if(!P(a))continue;const{coordinates:s,orientation:l}=a,d={coordinates:s,orientation:l};t.set(n,d)}var r;return t})(s);return l}isShipValidForRemoval(e){return!(!e.currentplacementConfigurations.coordinatesArray||!this.playerState.gameboardRepository.isShipPlaced(e.type))||(console.error(`Error removing ship: ${e.type} is missing coordinates or not in the fleet.`),!1)}relocateShip(e,t,r){this.removePiece(e,r),this.placePiece(t)}setFleetRotatedPlacePieceParams(e){for(const t of Object.values(e))t.isPlaced()&&this.setShipRotatedPlacePieceParams(t)}setShipRotatedPlacePieceParams(e){const t=this.getRotatedPlacePieceParams(e);this.playerState.gameboardRepository.setShipValidRotationalParams(e,t)}}class d{_fleetCoordinates={};_inBoundRotationalPlacePieceParamsForFleet={};get fleetCoordinates(){return this._fleetCoordinates}get inBoundRotationalPlacePieceForFleet(){return this._inBoundRotationalPlacePieceParamsForFleet}addShipToFleetCoordinates(e,t){this.fleetCoordinates[e]||(this.fleetCoordinates[e]=new Set),t.forEach((t=>{const[r,o]=t,n=`[${r}, ${o}]`;this.fleetCoordinates[e].add(n)}))}getShipDataAt(e){if(!C(this.fleetCoordinates))throw new Error(`Invalid Type: "${this.fleetCoordinates}" doesn't conform to "FleetCoordinates".`);const t=(e,t)=>{if(!$(e))throw new Error(`Invalid Type: "${e}" doesn't conform to "ShipType".`);if(!v(t))throw new Error(`Invalid Type: "${t}" doesn't conform to "OccupiedCoordinatesSet".`)},[r,o]=e,n=`[${r}, ${o}]`;for(const[e,r]of Object.entries(this.fleetCoordinates)){if(!$(e))throw new Error("");if(!v(r))throw new Error;if(t(e,r),r?.has(n))return{shipType:e,occupiedCoordinatesSet:r}}}isShipPlaced(e){return null!==this.fleetCoordinates[e]}nullifyShipCoordinatesValue(e){this.fleetCoordinates[e]=null}nullifyShipValidRotationalParams(e){this.inBoundRotationalPlacePieceForFleet[e]=null}setShipValidRotationalParams(e,t){this._inBoundRotationalPlacePieceParamsForFleet[e.type]||(this._inBoundRotationalPlacePieceParamsForFleet[e.type]=t)}}const c={[a.Carrier]:Symbol("CA"),[a.Battleship]:Symbol("BS"),[a.Cruiser]:Symbol("CR"),[a.Submarine]:Symbol("SB"),[a.Destroyer]:Symbol("DD"),[a.PatrolBoat]:Symbol("PB")},h={"battleship-1990":4,"battleship-2002":4,"carrier-1990":5,"carrier-2002":5,"cruiser-1990":3,"cruiser-2002":void 0,"destroyer-1990":2,"destroyer-2002":3,"patrolBoat-1990":void 0,"patrolBoat-2002":2,"submarine-1990":3,"submarine-2002":3};class u{seaworthy=!0;rotationalPivotConfigurations={transientAngleOfRotation:null,coordinatesArray:null,orientation:null};currentplacementConfigurations={coordinatesArray:null,orientation:null};isPlaced=()=>null!==this.currentplacementConfigurations.coordinatesArray;_hitCounter=0;constructor(e,t=2002){this.type=e,this.version=t,this.symbol=c[e];const r=`${e}-${t}`,o=h[r];if(void 0===o)throw new Error(`Invalid Command: ship type/version combination: ${r}.`);this.length=o}hit=()=>this.isSeaworthy()?(this._hitCounter++,`Hit registered. Hit count: ${this.hitCounter}.`):"This ship has already perished.";isSeaworthy=()=>this.hitCounter<this.length;resetConfigurations=e=>{const t={coordinatesArray:null,orientation:null};this.currentplacementConfigurations=t,!0===e&&(this.rotationalPivotConfigurations={...t,transientAngleOfRotation:null})};get hitCounter(){return this._hitCounter}}class p{constructor(e,t){this.fleet=e,this.version=t}static createFleet(e){const t={};for(const[r,o]of Object.entries(e))o&&$(r)&&(t[r]=new u(o.type,o.version));return t}static createHasbroFleet(){return new p(p.createFleet({carrier:{type:a.Carrier,version:2002},battleship:{type:a.Battleship,version:2002},destroyer:{type:a.Destroyer,version:2002},submarine:{type:a.Submarine,version:2002},patrolBoat:{type:a.PatrolBoat,version:2002}}),2002)}static createMBFleet(){return new p(p.createFleet({carrier:{type:a.Carrier,version:1990},battleship:{type:a.Battleship,version:1990},cruiser:{type:a.Cruiser,version:1990},submarine:{type:a.Submarine,version:1990},destroyer:{type:a.Destroyer,version:1990}}),1990)}getShip(e){const t=this.fleet[e];if(!t)throw new Error(`Invalid Command: Ship of type ${e} not found in fleet.`);return t}}function g(e,t,r){return new l({gameboardBuilder:e,gameboardRepository:t,fleetBuilder:r})}function f([e,t],r,o){return{bow:[e,t],stern:"horizontal"===r?[e+o-1,t]:[e,t+o-1]}}const m=(e,t)=>e>=0&&e<t,y=(e,t)=>e.every((e=>m(e,t))),b=(e,t)=>y(e.bow,t)&&y(e.stern,t),S=(t,r)=>e(t.bow,r.bow)&&e(t.stern,r.stern),w=e=>!(!Array.isArray(e)||2!==e.length)&&e.every((e=>"number"==typeof e)),v=e=>{if(null===e)return!0;if(!(e instanceof Set))return!1;for(const t of e)if(!D(t))return!1;return!0},C=e=>{if("object"!=typeof e||null===e)return!1;for(const t in e){if(!Object.values(a).includes(t))return!1;const r=e[t];if(null!==r&&!v(r))return!1}return!0},B=e=>"string"==typeof e&&["horizontal","vertical"].includes(e),E=e=>"outOfBounds"===e,P=e=>"object"==typeof e&&null!==e&&!!w(e.coordinates),T=e=>!!Array.isArray(e)&&e.every((e=>(e=>{if(!(e=>{if("object"!=typeof e||null===e)return!1;const t=Object.getPrototypeOf(e);return t===Object.prototype||null===t})(e))return!1;const{bow:t,stern:r}=e;return w(t)&&w(r)})(e))),D=e=>"string"==typeof e&&null!==e.match(/^\[\d{1}, \d{1}\]$/),$=e=>Object.values(a).includes(e);function L(t,o){if(!t)throw new Error("Invalid Command: `gameboardController` is required to randomize the gameboard.");if(!o)throw new Error("Invalid Command: `fleet` is required to randomize the gameboard.");const n=(o,i,a,s=0)=>{if(s>100)throw new Error(`Max recursion depth exceeded when placing the ${o.type}.`);const l=((e,t)=>{const o=t-e;return[r(0,o),r(0,o)]})(o.length,a);return((r,o,n)=>{const i={shipLength:o.length,orientation:n},a=t.getValidPositions(i),[s,l]=r,d="horizontal"===n,c=d?l:s;return a[d?`row-${c}`:`column-${c}`].some((t=>e(t.bow,r)))})(l,o,i)?l:n(o,i,a,s+1)};for(const e in o){if(!$(e))throw new Error(`Invalid Type: "${e}" doesn't conform to "ShipType".`);const r=o[e],i=Math.random()<.5?"horizontal":"vertical",a={ship:r,coordinates:n(r,i,10),orientation:i};t.placePiece(a)}}const{playerOneBoardBuilder:R,playerTwoBoardBuilder:O}={playerOneBoardBuilder:new s,playerTwoBoardBuilder:new s},{playerOneBoardRepository:F,playerTwoBoardRepository:A}={playerOneBoardRepository:new d,playerTwoBoardRepository:new d},{playerOneFleetBuilder:z,playerTwoFleetBuilder:I}=function(e=2002){const t=2002===e?p.createHasbroFleet:p.createMBFleet;return{playerOneFleetBuilder:t(),playerTwoFleetBuilder:t()}}(),{playerOneBoardController:V,playerTwoBoardController:M}=function({playerOneBoardBuilder:e,playerTwoBoardBuilder:t},{playerOneBoardRepository:r,playerTwoBoardRepository:o},{playerOneFleetBuilder:n,playerTwoFleetBuilder:i}){return{playerOneBoardController:g(e,r,n),playerTwoBoardController:g(t,o,i)}}({playerOneBoardBuilder:R,playerTwoBoardBuilder:O},{playerOneBoardRepository:F,playerTwoBoardRepository:A},{playerOneFleetBuilder:z,playerTwoFleetBuilder:I}),G={playerOne:{gameboardBuilder:R,gameboardController:V,gameboardRepository:F,fleetBuilder:z},playerTwo:{gameboardBuilder:O,gameboardController:M,gameboardRepository:A,fleetBuilder:I}};var H=new class{events={};on(e,t){this.events[e]=this.events[e]||[],this.events[e].push(t)}off(e,t){this.events[e]&&(this.events[e]=this.events[e].filter((e=>e!==t)))}emit(e,t){this.events[e]&&this.events[e].forEach((e=>e(t)))}};console.time("init"),console.time("randomizeBSGameboards"),L(G.playerOne.gameboardController,G.playerOne.fleetBuilder.fleet),L(G.playerTwo.gameboardController,G.playerTwo.fleetBuilder.fleet),console.timeEnd("randomizeBSGameboards"),new class{fleetElements=new Set;constructor(e,t){this.id=e,this.playerState=t,this.boardContainer=this.generateBoardContainer(this.playerState.gameboardBuilder.boardSize),H.on("updateGameboard",(()=>{this.updateGameboard()}))}render(e){const t=document.querySelector(e);if(!t)throw new Error(`Target element not found with ID - ${this.id} and selector - "${e}".`);const r=this.generateBoardFragment(this.playerState.gameboardBuilder.boardSize);this.boardContainer.appendChild(r),this.handleFleetPlacement(this.playerState.fleetBuilder,this.fleetElements),t.appendChild(this.boardContainer)}appendFleetClonesToGameboard(e){const t=this.boardContainer.querySelector(".gameboard");if(!t)throw new Error("Gameboard not found");e.forEach((e=>{const r=o("div",["ship-container-clone"],{id:`${e.getAttribute("id")}-clone`});t.appendChild(r)}))}clearBoardContainer(e){for(;e.firstChild;)e.removeChild(e.firstChild)}createBackgroundCellsFragment(e){const t=new DocumentFragment;return e.forEach(((e,r)=>{e.forEach(((e,i)=>{const a=e.description.toLowerCase(),s=o("div",[`${n(this.id,a)}-cell`,"grid-cell"],{"data-x":i.toString(),"data-y":r.toString(),"aria-label":`Row ${r+1}, Column ${i+1}`,role:"gridCell"}),l=o("div",[n(this.id,`${a}-cell-container`),"grid-cell-container"]);l.appendChild(s),t.appendChild(l)}))})),t}createShipElement(e,t,r,i,a){const s=this.generateShipUnitFragment(t,e,this.id),l=o("div",["ship-container"],{id:n(this.id,`${e}-container`),"data-shipType":e,"data-length":t.toString(),"data-orientation":a,draggable:"true"});return l.style.display="grid",l.appendChild(s),"horizontal"===a?(l.style.gridColumn=r,l.style.gridRow=i.toString(),l.style.gridTemplateColumns=`repeat(${t}, 1fr)`):(l.style.gridRow=r,l.style.gridColumn=i.toString(),l.style.gridTemplateRows=`repeat(${t}, 1fr)`),l}generateBoardContainer(e){const t=o("div",["gameboard-container"],{id:n(this.id,"gameboard-container")});return t.style.setProperty("--grid-size",e.toString()),this.handleDragListeners(t),this.handleClickListeners(t),t}generateBoardFragment(e){const t=o("div",["gameboard-background"],{id:n(this.id,"gameboard-background")});t.appendChild(this.createBackgroundCellsFragment(this.playerState.gameboardBuilder.board));const r=o("div",["gameboard"],{id:n(this.id,"gameboard")});r.style.setProperty("--grid-size",e.toString());const i=new DocumentFragment;return i.append(t,r),i}generateShipUnitFragment(e,t,r){const i=new DocumentFragment;for(let a=0;a<e;a++){const e=0===a,s=o("div",["ship-unit",n(r,t)]);e&&(s.classList.add("ship-bow"),s.setAttribute("id",n(r,`${t}-bow`))),i.appendChild(s)}return i}getGridPlacementValue(e,t,r){const o="horizontal"===t,[n,i]=e;return[`${o?n+1:i+1} / span ${r}`,o?i+1:n+1]}handleFleetPlacement(e,t){this.updateFleetElements(e),this.placeFleetOnGameboard(t),this.appendFleetClonesToGameboard(t)}placeFleetOnGameboard(e){const t=this.boardContainer.querySelector(".gameboard");if(!t)throw new Error("Gameboard container not found.");e.forEach((e=>t.appendChild(e)))}updateFleetElements=e=>{this.fleetElements.size&&this.fleetElements.clear();for(const t of Object.values(e.fleet)){const e=t.type,r=t.length,o=t.currentplacementConfigurations.orientation;if(!o)throw new Error("Orientation not set.");const n=t.currentplacementConfigurations.coordinatesArray;if(!n||0===n.length){console.log(`The ${e} has not been placed. Continuing...`);continue}const[i,a]=n[0],[s,l]=this.getGridPlacementValue([i,a],o,r),d=this.createShipElement(e,r,s,l,o);this.fleetElements.add(d)}};updateGameboard(){this.clearBoardContainer(this.boardContainer);const e=this.generateBoardFragment(this.playerState.gameboardBuilder.boardSize);this.boardContainer.appendChild(e),this.handleFleetPlacement(this.playerState.fleetBuilder,this.fleetElements)}handleDragListeners(e){const t={currentShipInstance:null,initialPlacementConfigurations:null,isValidDropTarget:!1,currentDragOverCell:null};e.addEventListener("dragstart",(e=>this.handleShipDragStart(e,t))),e.addEventListener("dragenter",(e=>this.handleShipDragEnter(e))),e.addEventListener("dragleave",(e=>this.handleShipDragLeave(e))),e.addEventListener("dragleave",(e=>this.handleShipDragLeave(e))),e.addEventListener("dragover",(e=>this.handleShipDragOver(e,t))),e.addEventListener("drop",(e=>this.handleShipDrop(e,t))),e.addEventListener("dragend",(e=>this.handleShipDragEnd(e,t)))}handleShipDragStart(r,o){if(!(r.target instanceof HTMLDivElement))throw new Error("Target element not found or is not an HTMLElement.");if(!r.target.classList.contains("ship-container"))return;const n=r.target,i=t(r.target,"data-shiptype",$),a=t(r.target,"data-orientation",B);if(((e,t,r)=>{if(!t[r])throw new Error(`The ${r} is not present in the fleet.`);e.currentShipInstance=t[r],e.initialPlacementConfigurations=e.currentShipInstance.currentplacementConfigurations})(o,this.playerState.fleetBuilder.fleet,i),!o.currentShipInstance)throw new Error(`Drag state hasn't been updated with the current ship instance on drag start. Drag State: ${JSON.stringify(o)}`);this.playerState.gameboardController.removePiece(o.currentShipInstance),((e,t)=>{if(!(e.target&&e.target instanceof HTMLDivElement))throw new Error("Target element not found or is not an HTMLElement.");const r=e.target,o=r.getAttribute("id"),n=t.querySelector(`#${o}-clone`);if(!n)throw new Error("Ship clone not found.");if(!o)throw new Error("Ship container doesn't have an ID.");const i=r.getBoundingClientRect();n.style.height=`${i.height}px`,n.style.width=`${i.width}px`;const a=r.querySelector(".ship-bow");if(!a)throw new Error("Ship bow not found.");const s=a?.getBoundingClientRect();e.dataTransfer?.setDragImage(n,s.width/2,s.height/2),n.style.visibility="visible",n.style.pointerEvents="auto",setTimeout((()=>{r.style.pointerEvents="none"}),0)})(r,this.boardContainer),((t,r,o,n)=>{const i=Number(r.getAttribute("data-length"));if(!i||"number"!=typeof(a=i)||![2,3,4,5].includes(a))throw new Error("Invalid or missing ship type attribute.");var a;const s=i;((t,r,o)=>{const i=n.getAllValidBowCoordinates(o,r);t.forEach((t=>{const r=[Number(t.getAttribute("data-x")),Number(t.getAttribute("data-y"))];for(const o of i)e(o,r)&&t.classList.add("valid-bow-coordinates")}))})(t.querySelectorAll(".grid-cell"),s,o)})(this.boardContainer,n,a,this.playerState.gameboardController)}handleShipDragEnter(e){if(!(e.target instanceof HTMLDivElement))throw new Error("Target element not found or is not an HTMLElement.");if(!e.target.classList.contains("grid-cell"))return;const t=e.target;t.classList.contains("valid-bow-coordinates")?t.classList.add("placement-is-valid"):t.classList.add("placement-is-invalid")}handleShipDragLeave(e){if(!(e.target instanceof HTMLDivElement))throw new Error("Target element not found or is not an HTMLElement.");if(!e.target.classList.contains("grid-cell"))return;const t=e.target;t.classList.contains("placement-is-valid")?t.classList.remove("placement-is-valid"):t.classList.contains("placement-is-invalid")&&t.classList.remove("placement-is-invalid")}handleShipDragOver(e,t){if(e.preventDefault(),!(e.target instanceof HTMLDivElement))throw new Error("Target element not found or is not an HTMLElement.");if(!e.target.classList.contains("grid-cell"))return;const r=e.target;t.currentDragOverCell=r,r.classList.contains("valid-bow-coordinates")}handleShipDrop(e,t){if(e.preventDefault(),!(e.target&&e.target instanceof HTMLDivElement))throw new Error("Target element not found or is not an HTMLElement.");if(!e.target.classList.contains("valid-bow-coordinates"))return;const{coordinatesArray:r,orientation:o}=t.initialPlacementConfigurations||{};if(!r||!o)throw new Error("Initial placement configurations are incomplete.");t.isValidDropTarget=!0;const n=e.target,i=n.getAttribute("data-x"),a=n.getAttribute("data-y");if(!i||!a)throw new Error("Missing or invalid grid cell coordinates.");const s=[Number(i),Number(a)];this.playerState.gameboardController.placePiece({ship:t.currentShipInstance,coordinates:s,orientation:o}),this.updateGameboard(),t.isValidDropTarget=!1}handleShipDragEnd(e,t){if(!(e.target instanceof HTMLDivElement))throw new Error("Target element not found or is not an HTMLElement.");if(!e.target.classList.contains("ship-container"))return;const r=e=>{const t=e.getAttribute("id"),r=this.boardContainer.querySelector(`#${t}-clone`);if(!t||!r)throw new Error(`Invalid ship container state. ID: ${t}, Clone: ${r}`);r.style.visibility="hidden",r.style.pointerEvents="none",e.style.pointerEvents="auto"},o=()=>{const{coordinatesArray:e,orientation:r}=t.initialPlacementConfigurations||{};if(!e||!r)throw new Error("Initial placement configurations are incomplete.");const o=e[0];this.playerState.gameboardController.placePiece({ship:t.currentShipInstance,coordinates:o,orientation:r})},n=e.target;try{r(n);const{currentDragOverCell:e,isValidDropTarget:i}=t;if(!e)throw new Error(`Current drag over cell is missing. Drag state: ${JSON.stringify(t)}`);((e,t)=>{const r=t?"placement-is-valid":"placement-is-invalid";e.classList.remove(r)})(e,i),i||o()}catch(e){console.error(e)}}handleClickListeners(e){e.addEventListener("click",(e=>{this.handleShipRotation(e)}))}handleShipRotation(e){if(!(e.target instanceof HTMLDivElement))throw new Error("Target element not found or is not an HTMLElement.");if(!e.target.classList.contains("ship-container"))return;const r=e.target,o=t(r,"data-shiptype",$),n=this.playerState.fleetBuilder.getShip(o);this.playerState.gameboardController.rotatePiece(n),this.updateGameboard()}getId(){return this.id}}("playerTwo",G.playerTwo).render("#content"),new class{ShipShufflerButtonTextContent="Shuffle Ships";constructor(e,t,r,o="ship-shuffler-button",n=["ship-shuffler-button"]){this.gameboardController=e,this.fleet=t,this.gameboardTargetSelector=r,this.id=o,this.classes=n,this.validateGameboardTarget(this.gameboardTargetSelector),this.ShipShufflerButton=this.createShipShufflerButton(this.id,this.classes),this.ShipShufflerButton.classList.add(...this.classes),this.ShipShufflerButton.textContent=this.ShipShufflerButtonTextContent,this.addEventListener(this.ShipShufflerButton),this.ShipShufflerButtonContainer=this.createShipShufflerButtonContainer(),this.ShipShufflerButtonContainer.appendChild(this.ShipShufflerButton)}render(e){const t=document.querySelector(e);if(!t)throw new Error(`Target element not found: "${e}."`);t.appendChild(this.ShipShufflerButtonContainer)}addEventListener(e){e.addEventListener("click",(()=>{this.randomizeGameboard(),this.updateGameboard(this.gameboardTargetSelector)}))}createShipShufflerButton(e,t){return o("button",[...t],{id:e})}createShipShufflerButtonContainer(){return o("div",["ship-shuffler-button-container"])}randomizeGameboard(){this.gameboardController.removeAllPieces(this.fleet),L(this.gameboardController,this.fleet)}updateGameboard(e){H.emit("updateGameboard",e)}validateGameboardTarget(e){if(!document.querySelector(e))throw new Error(`Invalid gameboard target selector: "${e}"`)}getId(){return this.id}}(G.playerTwo.gameboardController,G.playerTwo.fleetBuilder.fleet,"#content","player-one-ship-shuffler-button").render("#content"),G.playerTwo.gameboardController,G.playerTwo.gameboardRepository,G.playerTwo.fleetBuilder.fleet.carrier,console.timeEnd("init")}();
//# sourceMappingURL=index.bundle.js.map