{"version":3,"file":"index.bundle.js","mappings":"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","sources":["webpack://battleship/./src/typescript/types/logic-types.ts","webpack://battleship/./src/typescript/logic/bs-ship-builder/bs-ship-builder.ts","webpack://battleship/./src/typescript/utilities/random-utilities.ts","webpack://battleship/./src/typescript/utilities/logic-utilities.ts","webpack://battleship/./src/typescript/logic/bs-fleet-builder/bs-fleet-builder.ts","webpack://battleship/./src/typescript/logic/bs-gameboard-builder/bs-gameboard-builder.ts","webpack://battleship/./src/typescript/logic/bs-gameboard-controller/bs-gameboard-controller.ts","webpack://battleship/./src/typescript/logic/bs-gameboard-controller/abstracted-method-callbacks/get-valid-ship-positions/get-valid-ship-positions.ts","webpack://battleship/./src/typescript/logic/bs-gameboard-controller/abstracted-method-callbacks/place-ship/place-ship.ts","webpack://battleship/./src/typescript/logic/bs-gameboard-repository/bs-gameboard-repository.ts","webpack://battleship/./src/typescript/state/player-state.ts","webpack://battleship/./src/typescript/setup/randomize-bs-gameboard.ts","webpack://battleship/./src/typescript/utilities/event-bus.ts","webpack://battleship/./src/app.ts","webpack://battleship/./src/typescript/components/player-gameboard-component/player-gameboard-component.ts","webpack://battleship/./src/typescript/components/ship-shuffler-component/ship-shuffler-component.ts","webpack://battleship/./src/typescript/components/bot-gameboard-component/bot-gameboard-component.ts"],"sourcesContent":["import { BattleshipFleetBuilder } from '../logic/bs-fleet-builder/bs-fleet-builder';\nimport { BattleshipBoardBuilder } from '../logic/bs-gameboard-builder/bs-gameboard-builder';\nimport { BattleshipBoardController } from '../logic/bs-gameboard-controller/bs-gameboard-controller';\nimport { BattleshipBoardRepository } from '../logic/bs-gameboard-repository/bs-gameboard-repository';\nimport {\n  BattleshipBuilder,\n  SHIP_SYMBOLS\n} from '../logic/bs-ship-builder/bs-ship-builder';\nimport { PlayerState } from './state-types';\n\n// 💭 --------------------------------------------------------------\n// 💭 Enumerations\n\nexport enum AnglesOfRotation {\n  Degrees0 = 0,\n  Degrees90 = 90,\n  Degrees180 = 180,\n  Degrees270 = 270\n};\nexport enum ShipType {\n  Battleship = 'battleship',\n  Carrier = 'carrier',\n  Cruiser = 'cruiser',\n  Destroyer = 'destroyer',\n  PatrolBoat = 'patrolBoat',\n  Submarine = 'submarine',\n};\n\n// 💭 --------------------------------------------------------------\n// 💭 Types\n\nexport type AngleOfRotation = null | AnglesOfRotation;\nexport type AxisArrayKey = `row-${number}` | `column-${number}`;\nexport type Coordinates = [number, number];\nexport type CoordinatesArray = Coordinates[];\nexport type OccupiedCoordinatesSet = Set<OccupiedCoordinatesSetMemberKey> | null;\nexport type OccupiedCoordinatesSetMemberKey = `[${number}, ${number}]`;\nexport type Fleet = {\n  [key in ShipType]?: BattleshipBuilder;\n};\nexport type FleetConfigs = {\n  [key in ShipType]?: ShipConfig;\n};\nexport type FleetCoordinates = {\n  [key in ShipType]?: OccupiedCoordinatesSet | null;\n};\n\nexport type InBoundRotationalPlacePieceParamsForFleet = {\n  [key in ShipType]?: RotationalPositionMap | null;\n};\nexport type Gameboard = symbol[][];\nexport type OutOfBounds = 'outOfBounds';\nexport type Orientation = 'horizontal' | 'vertical';\nexport type PositionArray = IPosition[];\nexport type RotatedCoordinatesValue = Coordinates | OutOfBounds;\nexport type RotatedPlacePieceParams = {\n  [Key in AnglesOfRotation]?: RotatedPlacePieceParamsValue;\n};\nexport type RotatedPlacePieceParamsValue = IPlacePieceParams | OutOfBounds;\nexport type RotatedPlacePieceConfigurations = IPlacePieceParams | OutOfBounds;\nexport type ShipConfig = {\n  type: ShipType;\n  version?: FleetVersion;\n};\nexport type ShipLength = 2 | 3 | 4 | 5;\nexport type ShipSymbols = {\n  [key in ShipType]: symbol; // Each key in ShipType maps to a symbol\n};\nexport type ShipSymbolDescription = 'CA' | 'BS' | 'CR' | 'SB' | 'DD' | 'PB';\nexport type ShipSymbolValueArray = ShipSymbolValue[];\nexport type ShipSymbolValue = typeof SHIP_SYMBOLS[ShipType];\nexport type SizeLookupKey = `${ShipType}-${FleetVersion}`;\nexport type RotationalPositionMap = Map<AnglesOfRotation, IPlacePieceParams>;\nexport type FleetVersion = 1990 | 2002;\n\n// 💭 --------------------------------------------------------------\n// 💭 Interfaces\n\ninterface IGridGameboard<T> {\n  readonly board: T[][];\n  fillValue: T;\n};\nexport interface IGridGameboardSquare<T> extends IGridGameboard<T> {\n  boardSize: number;\n};\nexport interface IBattlehipFleetBuilderSet {\n  playerOneFleetBuilder: BattleshipFleetBuilder;\n  playerTwoFleetBuilder: BattleshipFleetBuilder;\n}\nexport interface IBattleshipGameboardBuilderSet {\n  playerOneBoardBuilder: BattleshipBoardBuilder;\n  playerTwoBoardBuilder: BattleshipBoardBuilder;\n}\nexport interface IBattleshipFleetBuilderSet {\n  playerOneFleetBuilder: BattleshipFleetBuilder;\n  playerTwoFleetBuilder: BattleshipFleetBuilder;\n}\nexport interface IBattleshipGameboardController extends IGridGameboardController {\n  playerState: Omit<PlayerState, 'gameboardController' | 'fleetBuilder'>;\n  getValidPositions(\n    shipPlacementConfigs: IShipPlacementConfigurations\n  ): IValidPositionsResult;\n  movePiece(ship: BattleshipBuilder, newBowCoordinates: Coordinates): void;\n  placePiece(options: IPlacePieceWrapperParams): void;\n  prettyPrint(): void;\n  removePiece(ship: BattleshipBuilder, resetInitialConfigs: boolean): void;\n  removeAllPieces(fleet: Fleet): void;\n  rotatePiece(ship: BattleshipBuilder): void;\n}\nexport interface IBattleshipGameboardControllerSet {\n  playerOneBoardController: BattleshipBoardController;\n  playerTwoBoardController: BattleshipBoardController;\n}\nexport interface IBattleshipGameboardRepositorySet {\n  playerOneBoardRepository: BattleshipBoardRepository;\n  playerTwoBoardRepository: BattleshipBoardRepository;\n}\ninterface IGridGameboardController {\n  placePiece(...args: any): void;\n  removePiece(...args: any): void;\n  removeAllPieces(...args: any): void;\n}\nexport interface IPlacementConfigurations {\n  coordinatesArray: CoordinatesArray | null;\n  orientation: Orientation | null;\n};\nexport interface IRotationalPivotConfigurations extends IPlacementConfigurations {\n  transientAngleOfRotation: AngleOfRotation;\n};\nexport interface IPlacePieceParams {\n  coordinates: Coordinates;\n  orientation: Orientation;\n};\nexport interface IPlacePieceWrapperParams extends IPlacePieceParams {\n  ship: BattleshipBuilder;\n};\nexport interface IPlacePieceCallbackParams extends IPlacePieceWrapperParams {\n  battleshipBoardBuilder: BattleshipBoardBuilder\n  battleshipBoardController: BattleshipBoardController;\n  battleshipBoardRepository: BattleshipBoardRepository;\n};\nexport interface IPosition {\n  bow: Coordinates; // [rowIndex, colIndex]\n  stern: Coordinates; // [rowIndex, colIndex]\n};\nexport interface IShipOptions {\n  hitCounter: number;\n  length: ShipLength;\n  type: ShipType;\n  version: FleetVersion;\n};\nexport interface IShipPlacementConfigurations {\n  orientation: Orientation;\n  shipLength: ShipLength;\n};\nexport interface ITestCaseShipHit {\n  expected: string; // Expected output\n  hits: number; // Function returning the string to be tested\n};\nexport interface ITestCaseValidPositions {\n  shipPlacementConfigs: IShipPlacementConfigurations;\n  validPositions: IValidPositionsResult;\n};\nexport interface IValidPlacementCallbackParams extends IShipPlacementConfigurations {\n  battleshipBoardBuilder: BattleshipBoardBuilder;\n  battleshipBoardController: BattleshipBoardController;\n};\nexport interface IValidPositionsResult {\n  [key: AxisArrayKey]: PositionArray;\n};","import {\n  IPlacementConfigurations,\n  IRotationalPivotConfigurations,\n  IShipOptions,\n  ShipLength,\n  ShipSymbols,\n  ShipSymbolValue,\n  ShipType,\n  SizeLookupKey,\n  FleetVersion\n} from '../../types/logic-types';\n\nexport const SHIP_SYMBOLS: ShipSymbols = {\n  [ShipType.Carrier]: Symbol('CA'),\n  [ShipType.Battleship]: Symbol('BS'),\n  [ShipType.Cruiser]: Symbol('CR'),\n  [ShipType.Submarine]: Symbol('SB'),\n  [ShipType.Destroyer]: Symbol('DD'),\n  [ShipType.PatrolBoat]: Symbol('PB')\n} as const;\n\nconst sizeLookup: Record<SizeLookupKey, ShipLength | undefined> = {\n  'battleship-1990': 4,\n  'battleship-2002': 4,\n  'carrier-1990': 5,\n  'carrier-2002': 5,\n  'cruiser-1990': 3,\n  'cruiser-2002': undefined, // Explicitly mark missing values\n  'destroyer-1990': 2,\n  'destroyer-2002': 3,\n  'patrolBoat-1990': undefined,\n  'patrolBoat-2002': 2,\n  'submarine-1990': 3,\n  'submarine-2002': 3,\n};\n\nexport class BattleshipBuilder implements IShipOptions {\n  public readonly length: ShipLength;\n  public readonly seaworthy: boolean = true;\n  public readonly symbol: ShipSymbolValue;\n  public rotationalPivotConfigurations: IRotationalPivotConfigurations = {\n    transientAngleOfRotation: null,\n    coordinatesArray: null,\n    orientation: null\n  };\n  public currentplacementConfigurations: IPlacementConfigurations = {\n    coordinatesArray: null,\n    orientation: null\n  };\n  public isPlaced = (): boolean => this.currentplacementConfigurations.coordinatesArray !== null;\n  private _hitCounter: number = 0;\n\n  constructor(public readonly type: ShipType, public readonly version: FleetVersion = 2002) {\n    this.symbol = SHIP_SYMBOLS[type];\n\n    const key: SizeLookupKey = `${type}-${version}`;\n    const length: ShipLength | undefined = sizeLookup[key]; // Access using the typed key\n    if (length === undefined) {\n      throw new Error(`Invalid Command: ship type/version combination: ${key}.`);\n    }\n\n    this.length = length;\n  }\n\n  public hit = (): string => {\n    if (!this.isSeaworthy()) return 'This ship has already perished.';\n    \n    this._hitCounter++;\n    return `Hit registered. Hit count: ${this.hitCounter}.`; // Return the updated hit counter\n  };\n\n  isSeaworthy = (): boolean => this.hitCounter < this.length;\n\n  public resetConfigurations = (shouldResetShipRotationalData: boolean) => {\n    const placementConfigurations = { coordinatesArray: null, orientation: null };\n\n    this.currentplacementConfigurations = placementConfigurations;\n\n    if (shouldResetShipRotationalData === true) {\n      this.rotationalPivotConfigurations = {\n        ...placementConfigurations,\n        transientAngleOfRotation: null\n      };\n    }\n  };\n\n  public get hitCounter(): number {\n    return this._hitCounter;\n  }\n}","export const areArraysEqual = <T>(arrayOne: T[], arrayTwo: T[]) =>\n  arrayOne.length === arrayTwo.length\n  &&\n  arrayOne.every((value, index) => value === arrayTwo[index]);\n\nexport const getConvertedTypeFromAttr = <T extends string>(\n  element: HTMLElement,\n  attribute: string,\n  typeGuard: (value: string) => value is T\n): T => {\n  const attrValue = element.getAttribute(attribute);\n  if (!attrValue || !typeGuard(attrValue)) {\n    throw new Error(`Invalid or missing attribute: ${attribute}`);\n  }\n  return attrValue;\n};\n\nexport const getRandomInt = (min: number, max: number): number =>\n  Math.floor(Math.random() * (max - min + 1)) + min;\n\nexport const isEmptyObject = (obj: Record<PropertyKey, unknown>): boolean => {\n  return (\n    Object.keys(obj).length === 0 &&\n    Object.getOwnPropertySymbols(obj).length === 0\n  );\n};\n\nexport type Range<N extends number, Acc extends number[] = []> =\n  Acc['length'] extends N\n    ? Acc[number]\n    : Range<N, [...Acc, Acc['length']]>;\n    \n\nexport const createElement = <K extends keyof HTMLElementTagNameMap>(\n  tag: K,\n  classes: string[] = [],\n  attributes: Record<string, string> = {}\n): HTMLElementTagNameMap[K] => {\n  const element: HTMLElementTagNameMap[K] = document.createElement(tag);\n  classes.forEach((cls) => element.classList.add(cls));\n  Object.entries(attributes).forEach(([key, value]) =>\n    element.setAttribute(key, value)\n  );\n  return element;\n};\n\nexport const createIdentifier = (id: string, playerType: string, identifier?: string): string => {\n  if (playerType !== 'player' && playerType !== 'bot')\n    throw new Error('`playerType` must be either \"player\" or \"bot\"');\n\n  const extractedNumberString: string = id.split(playerType)[1].toLowerCase();\n  return identifier\n    ? `${playerType}-${extractedNumberString}-${identifier}`\n    : `${playerType}-${extractedNumberString}`;\n}","import { SHIP_SYMBOLS } from \"../logic/bs-ship-builder/bs-ship-builder\";\nimport {\n  AnglesOfRotation,\n  AxisArrayKey,\n  Coordinates,\n  OccupiedCoordinatesSet,\n  OccupiedCoordinatesSetMemberKey,\n  FleetCoordinates,\n  IPlacePieceParams,\n  IPosition,\n  IShipPlacementConfigurations,\n  Orientation,\n  OutOfBounds,\n  RotatedCoordinatesValue,\n  ShipLength,\n  ShipType,\n  PositionArray,\n  ShipSymbolDescription\n} from \"../types/logic-types\";\nimport { areArraysEqual } from \"./random-utilities\";\n\n// 💭 --------------------------------------------------------------\n\n// * GENERAL HELPER FUNCTIONS\nexport function createAxisArrayKey(\n  axisIndex: number,\n  isHorizontal: boolean\n): AxisArrayKey {\n  return isHorizontal ? `row-${axisIndex}` : `column-${axisIndex}`;\n}\nexport function createPositionObject(\n  [x, y]: Coordinates,\n  orientation: Orientation,\n  shipLength: ShipLength\n): IPosition {\n  const isHorizontal = orientation === 'horizontal';\n  const bowCoordinates: Coordinates = [x, y];\n  const sternCoordinates: Coordinates = isHorizontal\n    ? [x + shipLength - 1, y]\n    : [x, y + shipLength - 1];\n\n  return {\n    bow: bowCoordinates,\n    stern: sternCoordinates,\n  };\n}\nexport function createShipConfigurations(\n  shipLength: ShipLength,\n  orientation: Orientation\n): IShipPlacementConfigurations {\n  return {\n    orientation,\n    shipLength,\n  };\n}\n\n// 💭 --------------------------------------------------------------\n\n// * BOUND CHECK HELPER FUNCTIONS\nexport const isCoordinateInBounds = (coordinate: number, boardSize: number): boolean =>\n  coordinate >= 0 && coordinate < boardSize;\nexport const areCoordinatesInBounds = (coordinates: Coordinates, boardSize: number): boolean => {\n  return coordinates.every((coordinate) => isCoordinateInBounds(coordinate, boardSize)); \n}\nexport const isPositionInBounds = (position: IPosition, boardSize: number): boolean => {\n  return areCoordinatesInBounds(position.bow, boardSize) && areCoordinatesInBounds(position.stern, boardSize);\n};\n\n// 💭 --------------------------------------------------------------\n\n// * UTILITY FUNCTIONS\nexport const arePositionsEqual = (\n  positionOne: IPosition,\n  positionTwo: IPosition\n): boolean => {\n  return (\n    areArraysEqual(positionOne.bow, positionTwo.bow) &&\n    areArraysEqual(positionOne.stern, positionTwo.stern)\n  );\n};\n\n// 💭 --------------------------------------------------------------\n\n// * TYPE GUARDS\nexport function isAngleOfRotation(\n  value: unknown\n): value is AnglesOfRotation {\n  return Object.values(AnglesOfRotation).includes(value as ShipType);\n};\nexport const isCoordinates = (value: unknown): value is Coordinates => {\n  if (!Array.isArray(value) || value.length !== 2) return false;\n\n  return value.every((coordinate) => typeof coordinate === 'number');\n};\nexport const isOccupiedCoordinatesSet = (value: unknown): value is OccupiedCoordinatesSet => {\n  if (value === null) return true;\n  if (!(value instanceof Set)) return false;\n\n  for (const member of value) {\n    if (!isOccupiedCoordinatesSetMemberKey(member)) {\n      return false;\n    }\n  }\n\n  return true;\n};\nexport const isFleetCoordinates = (\n  value: unknown\n): value is FleetCoordinates => {\n  if (typeof value !== 'object' || value === null) return false;\n\n  for (const key in value) {\n    if (!Object.values(ShipType).includes(key as ShipType)) {\n      return false\n    }\n\n    const OccupiedCoordinatesSetOrNull = (value as FleetCoordinates)[\n      key as ShipType\n    ];\n\n    if (OccupiedCoordinatesSetOrNull !== null && !isOccupiedCoordinatesSet(OccupiedCoordinatesSetOrNull)) {\n      return false;\n    }\n  }\n  return true;\n};\nexport const isPlainObject = (value: unknown): value is object => {\n  if (typeof value !== 'object' || value === null) return false;\n\n  const proto = Object.getPrototypeOf(value);\n  return proto === Object.prototype || proto === null;\n  // ? Why `proto === null`: Object.create(null) is a valid plain object.\n}\nexport const isOrientation = (value: unknown): value is Orientation => {\n  if (typeof value !== 'string') return false;\n  return ['horizontal', 'vertical'].includes(value);\n}\nexport const isOutOfBounds = (value: unknown): value is OutOfBounds => {\n  return (value) === 'outOfBounds';\n};\nexport const isPlacePieceParams = (\n  value: unknown\n): value is IPlacePieceParams => {\n  if (typeof value !== 'object' || value === null) return false;\n\n  if (!isCoordinates((value as IPlacePieceParams).coordinates)) return false;\n\n  return true;\n};\nexport const isPosition = (value: unknown): value is IPosition => {\n  if (!isPlainObject(value)) return false;\n\n  const { bow, stern } = value as IPosition;\n\n  return isCoordinates(bow) && isCoordinates(stern);\n};\nexport const isPositionsArray = (value: unknown): value is PositionArray => {\n  if (!Array.isArray(value)) return false;\n\n  return value.every(position => isPosition(position));\n};\nexport const isOccupiedCoordinatesSetMemberKey = (value: unknown): value is OccupiedCoordinatesSetMemberKey => {\n  if (typeof value !== 'string') return false;\n\n  const match = value.match(/^\\[\\d{1}, \\d{1}\\]$/);\n  return match !== null;\n};\nexport const isRotatedCoordinatesValue = (\n  value: unknown\n): value is RotatedCoordinatesValue => {\n  return isCoordinates(value) || isOutOfBounds(value);\n};\nexport const isShipLength = (value: unknown): value is ShipLength => {\n  return typeof value === 'number' && [2, 3, 4, 5].includes(value);\n};\nexport const isShipSymbolDescription = (value: unknown): value is ShipSymbolDescription => {\n  return typeof value === 'string' && ['CA', 'BS', 'CR', 'SB', 'DD', 'PB'].includes(value);\n};\nexport const isShipType = (\n  value: unknown\n): value is ShipType => {\n  return Object.values(ShipType).includes(value as ShipType);\n};\n\n// 💭 --------------------------------------------------------------\n\nexport const isNotNull = <T>(value: T | null | undefined): value is T => {\n  return value !== null && value !== undefined;\n}","import {\n  Fleet,\n  FleetConfigs,\n  ShipType,\n  FleetVersion,\n} from '../../types/logic-types';\nimport {\n  BattleshipBuilder,\n} from '../bs-ship-builder/bs-ship-builder';\nimport { isShipType } from '../../utilities/logic-utilities';\n\nexport class BattleshipFleetBuilder {\n  private constructor(public readonly fleet: Fleet, public readonly version: FleetVersion) {}\n\n  private static createFleet(fleetConfigs: FleetConfigs): Fleet {\n    const fleet: Fleet = {};\n\n    for (const [shipType, config] of Object.entries(fleetConfigs)) {\n      if (config && isShipType(shipType)) {\n        fleet[shipType] = new BattleshipBuilder(config.type, config.version);\n      }\n    }\n\n    return fleet;\n  }\n\n  public static createHasbroFleet(): BattleshipFleetBuilder {\n    // 2002\n    return new BattleshipFleetBuilder(\n      BattleshipFleetBuilder.createFleet({\n        carrier: { type: ShipType.Carrier, version: 2002 },\n        battleship: { type: ShipType.Battleship, version: 2002 },\n        destroyer: { type: ShipType.Destroyer, version: 2002 },\n        submarine: { type: ShipType.Submarine, version: 2002 },\n        patrolBoat: { type: ShipType.PatrolBoat, version: 2002 },\n      }),\n      2002\n    );\n  }\n\n  public static createMBFleet(): BattleshipFleetBuilder {\n    // 1990\n    return new BattleshipFleetBuilder(\n      BattleshipFleetBuilder.createFleet({\n        carrier: { type: ShipType.Carrier, version: 1990 },\n        battleship: { type: ShipType.Battleship, version: 1990 },\n        cruiser: { type: ShipType.Cruiser, version: 1990 },\n        submarine: { type: ShipType.Submarine, version: 1990 },\n        destroyer: { type: ShipType.Destroyer, version: 1990 },\n      }),\n      1990\n    );\n  }\n\n  getShip(shipType: ShipType): BattleshipBuilder {\n    const ship = this.fleet[shipType];\n\n    if (!ship) {\n      throw new Error(\n        `Invalid Command: Ship of type ${shipType} not found in fleet.`\n      );\n    }\n\n    return ship;\n  }\n}","import {\n  Gameboard,\n  IGridGameboardSquare,\n} from '../../types/logic-types';\n\nexport class BattleshipBoardBuilder implements IGridGameboardSquare<symbol> {\n  private static readonly vacant: symbol = Symbol('VC');\n\n  private readonly _board: Gameboard;\n  private readonly _boardSize: number = 10;\n  private readonly _fillValue: symbol = BattleshipBoardBuilder.vacant;\n\n  constructor() {\n    this._board = Array.from({ length: this._boardSize }, () =>\n      Array(this._boardSize).fill(this._fillValue)\n    );\n  }\n\n  public get board(): Gameboard {\n    return this._board;\n  }\n\n  public get boardSize(): number {\n    return this._boardSize;\n  }\n\n  public get fillValue(): symbol {\n    return this._fillValue;\n  }\n}","import { BattleshipBuilder } from '../bs-ship-builder/bs-ship-builder';\nimport {\n  AngleOfRotation,\n  AnglesOfRotation,\n  AxisArrayKey,\n  Coordinates,\n  CoordinatesArray,\n  Fleet,\n  IBattleshipGameboardController,\n  IPlacePieceCallbackParams,\n  IPlacePieceParams,\n  IPlacePieceWrapperParams,\n  IPosition,\n  IShipPlacementConfigurations,\n  IValidPlacementCallbackParams,\n  IValidPositionsResult,\n  Orientation,\n  RotatedCoordinatesValue,\n  RotatedPlacePieceParams,\n  RotatedPlacePieceParamsValue,\n  ShipLength,\n  ShipType,\n  RotationalPositionMap,\n  PositionArray,\n  ShipSymbolValue,\n  ShipSymbolDescription,\n} from '../../types/logic-types';\nimport { PlayerState } from '../../types/state-types';\nimport {\n  areCoordinatesInBounds,\n  arePositionsEqual,\n  createAxisArrayKey,\n  createPositionObject,\n  isAngleOfRotation,\n  isOutOfBounds,\n  isPlacePieceParams,\n  isPositionInBounds,\n  isPositionsArray,\n  isShipSymbolDescription,\n  isShipType\n} from '../../utilities/logic-utilities';\nimport { getValidShipPositions } from './abstracted-method-callbacks/get-valid-ship-positions/get-valid-ship-positions';\nimport { placeShip } from './abstracted-method-callbacks/place-ship/place-ship';\n\nexport class BattleshipBoardController implements IBattleshipGameboardController {\n  constructor(\n    public readonly playerState: Omit<PlayerState, 'gameboardController'>\n  ) {}\n\n  // 💭 --------------------------------------------------------------\n  // 💭 Public\n\n  public getValidPositions({\n    orientation,\n    shipLength,\n  }: IShipPlacementConfigurations): IValidPositionsResult {\n    const validPlacementArg: IValidPlacementCallbackParams = {\n      orientation,\n      shipLength,\n      battleshipBoardBuilder: this.playerState.gameboardBuilder,\n      battleshipBoardController: this,\n    };\n\n    return getValidShipPositions(validPlacementArg);\n  }\n\n  public getAllValidBowCoordinates(\n    orientation: Orientation,\n    shipLength: ShipLength\n  ): Set<Coordinates> {\n    let allValidBowCoordinates: Set<Coordinates> = new Set();\n    const validPositions: IValidPositionsResult = this.getValidPositions({\n      orientation,\n      shipLength,\n    });\n\n    for (const positionsInAxis of Object.values(validPositions)) {\n      if (!isPositionsArray(positionsInAxis))\n        throw new Error(\n          `Expected each value of validPositions to be an array of IPosition objects, but received: ${typeof positionsInAxis}.`\n        );\n\n      positionsInAxis.forEach((position) =>\n        allValidBowCoordinates.add(position.bow)\n      );\n    }\n\n    return allValidBowCoordinates;\n  }\n\n  public movePiece(\n    ship: BattleshipBuilder,\n    newBowCoordinates: Coordinates\n  ): void {\n    if (!ship.isPlaced()) {\n      console.warn(`Invalid Command: The ${ship.type} has not been placed.`);\n      return;\n    }\n\n    const currentOrientation: Orientation =\n      ship.currentplacementConfigurations.orientation!;\n\n    const newPosition: IPosition = createPositionObject(\n      newBowCoordinates,\n      currentOrientation,\n      ship.length\n    );\n\n    if (\n      !isPositionInBounds(\n        newPosition,\n        this.playerState.gameboardBuilder.boardSize\n      )\n    ) {\n      console.warn(\n        `Invalid Command: Position - Bow: [${newPosition.bow}] & Stern: [${newPosition.stern}] is out of bounds for the ${ship.type}.`\n      );\n\n      return;\n    }\n\n    const validPositions: IValidPositionsResult = this.getValidPositions({\n      orientation: currentOrientation,\n      shipLength: ship.length,\n    });\n\n    const isHorizontal: boolean = currentOrientation === 'horizontal';\n    const [x, y]: Coordinates = newBowCoordinates;\n    const axisArrayKey: AxisArrayKey = createAxisArrayKey(\n      isHorizontal ? y : x,\n      isHorizontal\n    );\n\n    const axisArray: PositionArray = validPositions[axisArrayKey];\n\n    const isNewPositionValid: boolean = axisArray.some(\n      (position: IPosition): boolean => arePositionsEqual(position, newPosition)\n    );\n\n    if (isNewPositionValid) {\n      const placementParameters: IPlacePieceWrapperParams = {\n        ship,\n        coordinates: newBowCoordinates,\n        orientation: currentOrientation,\n      };\n      const shouldResetShipRotationalData: boolean = true;\n\n      this.relocateShip(\n        ship,\n        placementParameters,\n        shouldResetShipRotationalData\n      );\n    } else {\n      console.warn(\n        `Invalid Command: Position - Bow: [${newPosition.bow}] & Stern: [${newPosition.stern}] is unavailable for the ${ship.type}.`\n      );\n    }\n  }\n\n  public placePiece({\n    ship,\n    coordinates,\n    orientation,\n  }: IPlacePieceWrapperParams): void {\n    const placeShipArg: IPlacePieceCallbackParams = {\n      ship,\n      coordinates,\n      orientation,\n      battleshipBoardController: this,\n      battleshipBoardBuilder: this.playerState.gameboardBuilder,\n      battleshipBoardRepository: this.playerState.gameboardRepository,\n    };\n\n    placeShip(placeShipArg);\n\n    this.setFleetRotatedPlacePieceParams(this.playerState.fleetBuilder.fleet);\n  }\n\n  public prettyPrint(): void {\n    console.table(\n      this.playerState.gameboardBuilder.board.map((row) =>\n        row.map((symbol) =>\n          symbol.description === 'VC' ? null : symbol.description\n        )\n      )\n    );\n  }\n\n  // TODO: Finish ⤵️ \n  // ? add return signature\n  public receiveAttack(coordinates: Coordinates) {\n\n    // ? create set in repository for `attackedCells`\n    // ? if `attackedCells` has `coordinates`, warn that the cell has already been attacked and return gracefully\n    // ? else, add `coordinates` to `attackedCells` set\n\n    const attackedShip: BattleshipBuilder | null = this.getShipAt(coordinates);\n    \n    if (!attackedShip) {\n      // TODO: create switch to generate random miss messages? (use JSON?)\n      console.warn('Missed me with that bitch!');\n      return;\n    }\n\n    attackedShip.hit();\n\n    if (!attackedShip.isSeaworthy()) {\n      console.log(`You sunk the ${attackedShip.type} fam!`);\n    };\n\n    return attackedShip;\n  }\n\n  public removePiece(\n    ship: BattleshipBuilder,\n    shouldResetShipRotationalData: boolean = true\n  ): void {\n    if (!this.isShipValidForRemoval(ship)) return;\n\n    const removeShipFromBoard = (shipCoordinates: CoordinatesArray): void => {\n      shipCoordinates.forEach(([x, y]) => {\n        this.playerState.gameboardBuilder.board[y][x] =\n          this.playerState.gameboardBuilder.fillValue;\n      });\n    };\n    const nullifyShipCoordinateSetValue = (shipType: ShipType): void => {\n      this.playerState.gameboardRepository.nullifyShipCoordinatesValue(\n        shipType\n      );\n    };\n    const resetShipConfigurations = (\n      ship: BattleshipBuilder,\n      shouldResetShipRotationalData: boolean\n    ): void => {\n      if (shouldResetShipRotationalData) {\n        this.playerState.gameboardRepository.nullifyShipValidRotationalParams(\n          ship.type\n        );\n      }\n\n      ship.resetConfigurations(shouldResetShipRotationalData);\n    };\n\n    const shipCoordinates: CoordinatesArray =\n      ship.currentplacementConfigurations.coordinatesArray!;\n\n    removeShipFromBoard(shipCoordinates);\n    nullifyShipCoordinateSetValue(ship.type);\n    resetShipConfigurations(ship, shouldResetShipRotationalData);\n  }\n\n  public removeAllPieces(fleet: Fleet): void {\n    if (!Object.keys(fleet).length) {\n      console.error(\n        'Invalid Command: No ships to remove - Fleet is empty or uninitialized.'\n      );\n      return;\n    }\n\n    for (const ship of Object.values(fleet)) {\n      this.removePiece(ship);\n    }\n  }\n\n  public rotatePiece(ship: BattleshipBuilder): void {\n    const getNextAngle = (\n      rotationalPositionMap: RotationalPositionMap,\n      currentAngle: AngleOfRotation\n    ): AngleOfRotation => {\n      if (currentAngle === null || currentAngle === undefined)\n        throw new Error(\"Current angle doesn't exist\");\n\n      const angles: AnglesOfRotation[] = Array.from(\n        rotationalPositionMap.keys()\n      );\n\n      return (\n        angles.find((angle) => angle > currentAngle) ??\n        AnglesOfRotation.Degrees0\n      );\n    };\n    const getMaxAngle = (\n      rotationalPositionMap: RotationalPositionMap\n    ): AngleOfRotation =>\n      Array.from(rotationalPositionMap.keys()).pop() ??\n      AnglesOfRotation.Degrees0;\n    const getNextPiecePlacementParams = (\n      ship: BattleshipBuilder,\n      rotationalPositionMap: RotationalPositionMap\n    ): IPlacePieceWrapperParams => {\n      const currentAngle: AngleOfRotation =\n        ship.rotationalPivotConfigurations.transientAngleOfRotation;\n\n      const maxAngle: AngleOfRotation = getMaxAngle(rotationalPositionMap);\n\n      if (currentAngle === maxAngle) {\n        const originalBowCoordinates: Coordinates =\n          ship.rotationalPivotConfigurations.coordinatesArray![0];\n        const originalOrientation: Orientation =\n          ship.rotationalPivotConfigurations.orientation!;\n\n        // set current degree of rotation\n        ship.rotationalPivotConfigurations.transientAngleOfRotation =\n          AnglesOfRotation.Degrees0;\n\n        return {\n          ship,\n          coordinates: originalBowCoordinates,\n          orientation: originalOrientation,\n        };\n      }\n\n      const nextAngle: AngleOfRotation = getNextAngle(\n        rotationalPositionMap,\n        currentAngle\n      );\n      const nextPlacePieceParams: IPlacePieceParams | undefined =\n        rotationalPositionMap.get(nextAngle!);\n\n      // set current degree of rotation\n      ship.rotationalPivotConfigurations.transientAngleOfRotation = nextAngle;\n\n      return {\n        ship,\n        coordinates: nextPlacePieceParams!.coordinates,\n        orientation: nextPlacePieceParams!.orientation,\n      };\n    };\n    const updateTransientPlacementParams = (\n      rotationalPositionMap: RotationalPositionMap\n    ): IPlacePieceWrapperParams => {\n      let nextPlacePieceParams: IPlacePieceWrapperParams =\n        getNextPiecePlacementParams(ship, rotationalPositionMap);\n\n      while (\n        ship.rotationalPivotConfigurations.transientAngleOfRotation !==\n        initialAngle\n      ) {\n        if (\n          this.isRotatedPositionValid(\n            nextPlacePieceParams.coordinates,\n            nextPlacePieceParams.orientation,\n            ship.rotationalPivotConfigurations.transientAngleOfRotation,\n            ship.length\n          )\n        ) {\n          break;\n        }\n        nextPlacePieceParams = getNextPiecePlacementParams(\n          ship,\n          rotationalPositionMap\n        );\n      }\n\n      return nextPlacePieceParams;\n    };\n\n    const rotationalPositionMap: RotationalPositionMap =\n      this.playerState.gameboardRepository.inBoundRotationalPlacePieceForFleet[\n        ship.type\n      ]!;\n\n    const initialAngle =\n      ship.rotationalPivotConfigurations.transientAngleOfRotation;\n\n    /* \n    ┌──────────────────────────────────────────────────────────────────────────────┐\n    │ The coolest part of this whole transient concept is that it                  │\n    │ allows me to name a variable `finalPlacePieceParams`… which implies a         │\n    │ predetermined value, with a function named `updateTransientPlacementParams`… │\n    │ which implies something transient… while the semantic naming of the          │ \n    | key-value pair maintain sound logicality. I am intuit. - 💭                  │\n    └──────────────────────────────────────────────────────────────────────────────┘\n    */\n\n    const finalPlacePieceParams: IPlacePieceWrapperParams =\n      updateTransientPlacementParams(rotationalPositionMap);\n\n    if (\n      ship.rotationalPivotConfigurations.transientAngleOfRotation ===\n      initialAngle\n    ) {\n      console.warn('No valid rotational position found.');\n      return;\n    }\n\n    const shouldResetShipRotationalData: boolean = false;\n\n    this.relocateShip(\n      ship,\n      finalPlacePieceParams,\n      shouldResetShipRotationalData\n    );\n  }\n\n  // 💭 --------------------------------------------------------------\n  // 💭 Private\n\n  private areCoordinatesVacant(coordinates: Coordinates): boolean {\n    const [x, y] = coordinates;\n    return (\n      this.playerState.gameboardBuilder.board[y][x] ===\n      this.playerState.gameboardBuilder.fillValue\n    );\n  }\n\n  private getShipAt(coordinates: Coordinates): BattleshipBuilder | null {\n    if (this.areCoordinatesVacant(coordinates)) return null;\n\n    const gameboard = this.playerState.gameboardBuilder.board;\n    const [x, y]: Coordinates = coordinates;\n\n    const shipSymbolValue: ShipSymbolValue = gameboard[y][x];\n    const shipType: ShipType = this.getShipTypeFromSymbol(shipSymbolValue);\n\n    const ship: BattleshipBuilder = this.playerState.fleetBuilder.getShip(shipType);\n\n    return ship;\n  }\n\n  private getShipTypeFromSymbol = (shipSymbol: ShipSymbolValue) => {\n    if (!isShipSymbolDescription(shipSymbol.description))\n      throw new Error('Invalid ship symbol description');\n    const shipSymbolDescription: ShipSymbolDescription = shipSymbol.description; // ? Create Type\n\n    switch (shipSymbolDescription) {\n      case 'CA':\n        return ShipType.Carrier;\n      case 'DD':\n        return ShipType.Destroyer;\n      case 'SB':\n        return ShipType.Submarine;\n      case 'BS':\n        return ShipType.Battleship;\n      case 'CR':\n        return ShipType.Cruiser;\n      case 'PB':\n        return ShipType.PatrolBoat;\n      default:\n        throw new Error(\n          'The symbol description does not return valid ship type.'\n        );\n    }\n  };\n\n  private isRotatedPositionValid = (\n    [x, y]: Coordinates,\n    orientation: Orientation,\n    angleOfRotation: AngleOfRotation,\n    shipLength: ShipLength\n  ): boolean => {\n    const isHorizontal = orientation === 'horizontal';\n    const gameboardSize = this.playerState.gameboardBuilder.boardSize;\n    const gameboard = this.playerState.gameboardBuilder.board;\n    const fillValue = this.playerState.gameboardBuilder.fillValue;\n    const newAxisIndexStart = isHorizontal ? x : y;\n\n    let i: number;\n    let axisIndexEnd: number;\n\n    if (\n      (!isHorizontal && angleOfRotation === AnglesOfRotation.Degrees90) ||\n      (isHorizontal && angleOfRotation === AnglesOfRotation.Degrees270) ||\n      angleOfRotation === AnglesOfRotation.Degrees0\n    ) {\n      i = 1;\n      axisIndexEnd = shipLength;\n    } else {\n      i = 0;\n      axisIndexEnd = shipLength - 1;\n    }\n\n    if (newAxisIndexStart + shipLength - 1 >= gameboardSize) return false;\n\n    for (i; i < axisIndexEnd; i++) {\n      const cellValue = isHorizontal\n        ? gameboard[y][x + i]\n        : gameboard[y + i][x];\n\n      if (cellValue !== fillValue) return false;\n    }\n\n    return true;\n  };\n\n  private getRotatedPlacePieceParams(ship: BattleshipBuilder) {\n    const applyOffsetToCoordinate = (\n      coordinate: number,\n      shipLength: ShipLength\n    ): number => {\n      const offset: number = shipLength - 1;\n      return coordinate - offset;\n    };\n    const determineRotatedOrientation = (\n      angleOfRotation: AngleOfRotation,\n      isHorizontal: boolean\n    ): Orientation => {\n      return isHorizontal\n        ? angleOfRotation === AnglesOfRotation.Degrees180\n          ? 'horizontal'\n          : 'vertical'\n        : angleOfRotation === AnglesOfRotation.Degrees180\n        ? 'vertical'\n        : 'horizontal';\n    };\n    const getRotatedBowCoordinates = (\n      angleOfRotation: AngleOfRotation,\n      isHorizontal: boolean,\n      [x, y]: Coordinates\n    ): RotatedCoordinatesValue => {\n      if (\n        angleOfRotation === AnglesOfRotation.Degrees0 ||\n        (angleOfRotation === AnglesOfRotation.Degrees90 && isHorizontal) ||\n        (angleOfRotation === AnglesOfRotation.Degrees270 && !isHorizontal)\n      ) {\n        return rotationalPivotBowCoordinates;\n      }\n\n      const rotatedBowCoordinates: Coordinates = isHorizontal\n        ? angleOfRotation === AnglesOfRotation.Degrees180\n          ? [applyOffsetToCoordinate(x, ship.length), y]\n          : [x, applyOffsetToCoordinate(y, ship.length)] // angleOfRotation === 270\n        : angleOfRotation === AnglesOfRotation.Degrees180\n        ? [x, applyOffsetToCoordinate(y, ship.length)]\n        : [applyOffsetToCoordinate(x, ship.length), y]; // angleOfRotation === 90\n\n      return areCoordinatesInBounds(\n        rotatedBowCoordinates,\n        this.playerState.gameboardBuilder.boardSize\n      )\n        ? rotatedBowCoordinates\n        : 'outOfBounds';\n    };\n    const createRotatedPiecePlacementParams = (\n      rotationalPivotBowCoordinates: Coordinates,\n      rotationalPivotOrientation: Orientation\n    ): RotatedPlacePieceParams => {\n      const isHorizontal = rotationalPivotOrientation === 'horizontal';\n\n      const rotatedPiecePlacementParams: RotatedPlacePieceParams = {};\n\n      const anglesOfRotation: AnglesOfRotation[] = [\n        AnglesOfRotation.Degrees0,\n        AnglesOfRotation.Degrees90,\n        AnglesOfRotation.Degrees180,\n        AnglesOfRotation.Degrees270,\n      ];\n\n      anglesOfRotation.forEach((angleOfRotation) => {\n        const coordinates: RotatedCoordinatesValue =\n          angleOfRotation === AnglesOfRotation.Degrees0\n            ? rotationalPivotBowCoordinates\n            : getRotatedBowCoordinates(\n                angleOfRotation,\n                isHorizontal,\n                rotationalPivotBowCoordinates\n              );\n\n        if (coordinates === 'outOfBounds') {\n          rotatedPiecePlacementParams[angleOfRotation] = 'outOfBounds';\n        } else {\n          rotatedPiecePlacementParams[angleOfRotation] = {\n            coordinates,\n            orientation:\n              angleOfRotation === AnglesOfRotation.Degrees0\n                ? rotationalPivotOrientation\n                : determineRotatedOrientation(angleOfRotation, isHorizontal),\n          };\n        }\n      });\n\n      return rotatedPiecePlacementParams;\n    };\n    const generateRotationalPositionMap = (\n      rotatedPiecePlacementParams: RotatedPlacePieceParams\n    ): RotationalPositionMap => {\n      const rotatedPlacePieceParams: RotationalPositionMap = new Map();\n\n      for (const angleOfRotationString of Object.keys(\n        rotatedPiecePlacementParams\n      )) {\n        const angleOfRotationToNum = +angleOfRotationString as AngleOfRotation;\n\n        if (!isAngleOfRotation(angleOfRotationToNum)) {\n          throw new Error(\n            `Invalid Type: \"${angleOfRotationString}\" doesn't conform to \"AngleOfRotation\".`\n          );\n        }\n\n        const rotatedPlacePieceParamsValue: RotatedPlacePieceParamsValue =\n          rotatedPiecePlacementParams[angleOfRotationToNum]!;\n\n        if (\n          !(\n            isPlacePieceParams(rotatedPlacePieceParamsValue) ||\n            isOutOfBounds(rotatedPlacePieceParamsValue)\n          )\n        ) {\n          throw new Error(\n            `Invalid Type: \"${rotatedPlacePieceParamsValue}\" doesn't conform to \"RotatedPlacePieceParams\".`\n          );\n        }\n\n        if (!isPlacePieceParams(rotatedPlacePieceParamsValue)) continue;\n\n        const { coordinates: bowCoordinates, orientation }: IPlacePieceParams =\n          rotatedPlacePieceParamsValue;\n\n        const placePieceParams: IPlacePieceParams = {\n          coordinates: bowCoordinates,\n          orientation,\n        };\n\n        rotatedPlacePieceParams.set(angleOfRotationToNum, placePieceParams);\n      }\n\n      return rotatedPlacePieceParams;\n    };\n\n    const rotationalPivotBowCoordinates: Coordinates =\n      ship.rotationalPivotConfigurations.coordinatesArray![0];\n    const rotationalPivotOrientation: Orientation =\n      ship.rotationalPivotConfigurations.orientation!;\n    const rotatedPiecePlacementParams: RotatedPlacePieceParams =\n      createRotatedPiecePlacementParams(\n        rotationalPivotBowCoordinates,\n        rotationalPivotOrientation\n      );\n\n    const rotatedPlacePieceParamsMap: RotationalPositionMap =\n      generateRotationalPositionMap(rotatedPiecePlacementParams);\n\n    return rotatedPlacePieceParamsMap;\n  }\n\n  private isShipValidForRemoval(ship: BattleshipBuilder): boolean {\n    if (\n      !ship.currentplacementConfigurations.coordinatesArray ||\n      !this.playerState.gameboardRepository.isShipPlaced(ship.type)\n    ) {\n      console.error(\n        `Error removing ship: ${ship.type} is missing coordinates or not in the fleet.`\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  private relocateShip(\n    ship: BattleshipBuilder,\n    placementParameters: IPlacePieceWrapperParams,\n    shouldResetShipRotationalData: boolean\n  ): void {\n    this.removePiece(ship, shouldResetShipRotationalData);\n    this.placePiece(placementParameters);\n  }\n\n  private setFleetRotatedPlacePieceParams(fleet: Fleet): void {\n    for (const ship of Object.values(fleet)) {\n      if (ship.isPlaced()) this.setShipRotatedPlacePieceParams(ship);\n    }\n  }\n\n  private setShipRotatedPlacePieceParams(ship: BattleshipBuilder): void {\n    const rotatedPlacePieceParams: RotationalPositionMap =\n      this.getRotatedPlacePieceParams(ship);\n\n    this.playerState.gameboardRepository.setShipValidRotationalParams(\n      ship,\n      rotatedPlacePieceParams\n    );\n  }\n}\n","import {\n  AxisArrayKey,\n  Coordinates,\n  Gameboard,\n  IValidPlacementCallbackParams,\n  IValidPositionsResult,\n  Orientation,\n  PositionArray,\n  ShipLength,\n} from '../../../../types/logic-types';\n\nexport function getValidShipPositions({\n  shipLength,\n  orientation,\n  battleshipBoardBuilder\n}: IValidPlacementCallbackParams): IValidPositionsResult {\n  const extractAxisArray = (\n    axisIndex: number,\n    orientation: Orientation,\n    gameboard: Gameboard\n  ): Array<symbol> => { // or symbol[]\n    \n    return orientation === 'horizontal'\n      ? gameboard[axisIndex] // Returns row #<axisIndex>\n      : gameboard.map(row => row[axisIndex]) // `y` values at column-<axisIndex>\n  };\n  const findValidPositionsInAxis = (\n    axisArray: Array<symbol>, // or symbol[]\n    isHorizontal: boolean,\n    axisIndex: number,\n    shipLength: ShipLength\n  ): PositionArray => {\n    let streak: number = 0;\n    let validAxisPositions: PositionArray = [];\n    \n    for (let i = 0; i < axisArray.length; i++) {\n      if (axisArray[i] === battleshipBoardBuilder.fillValue) {\n        streak++;\n        \n        if (streak >= shipLength) {\n          const bowPosition: Coordinates =\n            isHorizontal\n            ? [i - (shipLength - 1), axisIndex]\n            : [axisIndex, i - (shipLength - 1)];\n          \n          const sternPosition: Coordinates =\n            isHorizontal\n              ? [i, axisIndex]\n              : [axisIndex, i];\n\n          validAxisPositions.push({\n            bow: bowPosition,\n            stern: sternPosition,\n          });\n        }\n      } else {\n        streak = 0;\n      }\n    }\n    \n    return validAxisPositions;\n  };\n\n  const validPositionsPerAxis: IValidPositionsResult = {}; \n  const board: Gameboard = battleshipBoardBuilder.board;\n  const isHorizontal = orientation === 'horizontal';\n\n  for (let axisIndex = 0; axisIndex < board.length; axisIndex++) {\n    const axisArray: Array<symbol> = extractAxisArray(axisIndex, orientation, board);\n    const validPositions: PositionArray = findValidPositionsInAxis(\n      axisArray,\n      isHorizontal,\n      axisIndex,\n      shipLength\n    );\n    \n    const axisTemplate: AxisArrayKey =\n      isHorizontal\n        ? `row-${axisIndex}`\n        : `column-${axisIndex}`;\n    \n    validPositionsPerAxis[axisTemplate] = validPositions;\n  }\n\n  return validPositionsPerAxis;\n}","import {\n  AnglesOfRotation,\n  AxisArrayKey,\n  Coordinates,\n  CoordinatesArray,\n  Gameboard,\n  IPlacementConfigurations,\n  IPlacePieceCallbackParams,\n  IPosition,\n  IShipPlacementConfigurations,\n  IValidPositionsResult,\n  Orientation,\n  ShipLength,\n  ShipSymbolValue,\n  ShipType,\n} from '../../../../types/logic-types';\nimport { arePositionsEqual, createPositionObject, isCoordinateInBounds } from '../../../../utilities/logic-utilities';\nimport { BattleshipBuilder } from '../../../bs-ship-builder/bs-ship-builder';\n\nexport function placeShip({\n  ship,\n  coordinates,\n  orientation,\n  battleshipBoardController,\n  battleshipBoardBuilder,\n  battleshipBoardRepository\n}: IPlacePieceCallbackParams): void {  \n  const shipLength: ShipLength = ship.length;\n  const [bowX, bowY]: Coordinates = coordinates;\n  const isHorizontal: boolean = orientation === 'horizontal';\n  const axisStart: number = isHorizontal ? bowX : bowY;\n  const axisEnd = axisStart + shipLength - 1;\n\n  if (!isCoordinateInBounds(axisEnd, battleshipBoardBuilder.boardSize)) {\n    const errorMessage: string = `Invalid Command: The ship placement attempt with the following configurations is out of bounds - Coordinates: ${coordinates}, Length: ${ship.length}, Orientation: ${orientation}.`;\n    throw new Error(errorMessage);\n  };\n\n  if (ship.isPlaced()) {\n    console.warn(`Invalid Command: The ${ship.type} has already been placed.`);\n    return;\n  };\n\n  const isPositionValid = (\n    position: IPosition,\n    shipConfigurations: IShipPlacementConfigurations,\n    axisArrayKey: AxisArrayKey\n  ): boolean => {\n    const validPositions: IValidPositionsResult =\n      battleshipBoardController.getValidPositions(shipConfigurations);\n\n    return validPositions[axisArrayKey].some((validPosition: IPosition) =>\n      arePositionsEqual(position, validPosition)\n    );\n  };\n\n  const position: IPosition = createPositionObject(\n    coordinates,\n    orientation,\n    shipLength,\n  );\n\n  const shipConfigurations: IShipPlacementConfigurations = {\n    shipLength,\n    orientation\n  };\n  const axisArrayKey: AxisArrayKey = isHorizontal\n    ? `row-${bowY}`\n    : `column-${bowX}`; \n    \n  if (isPositionValid(position, shipConfigurations, axisArrayKey)) {\n    const getPlacementCoordinates = (\n      validPosition: IPosition,\n      isHorizontal: Boolean\n    ): CoordinatesArray => {\n      const placementCoordinates: CoordinatesArray = [];\n\n      const [bowX, bowY]: Coordinates = validPosition.bow;\n      const [sternX, sternY]: Coordinates = validPosition.stern;\n\n      const primary: number = isHorizontal\n        ? bowY\n        : bowX;\n      const axisStart: number = isHorizontal\n        ? bowX\n        : bowY;\n      const axisEnd: number = isHorizontal\n        ? sternX\n        : sternY;\n\n      for (let i = axisStart; i <= axisEnd; i++) {\n        placementCoordinates.push(isHorizontal ? [i, primary] : [primary, i]);\n      }\n\n      return placementCoordinates;\n    };\n    const placeOnBoard = (\n      ship: BattleshipBuilder,\n      shipPlacementCoordinates: CoordinatesArray\n    ): void => {\n      const gameboard: Gameboard = battleshipBoardBuilder.board;\n      const shipSymbol: ShipSymbolValue = ship.symbol;\n\n      shipPlacementCoordinates.forEach((coordinates) => {\n        const [x, y]: Coordinates = coordinates;\n        gameboard[y][x] = shipSymbol;\n      });\n    };\n    const setShipConfigurations = (\n      ship: BattleshipBuilder,\n      coordinatesArray: CoordinatesArray,\n      orientation: Orientation\n    ): void => {\n      const placementConfigurations: IPlacementConfigurations = { coordinatesArray, orientation };\n      \n      ship.currentplacementConfigurations = placementConfigurations;\n\n      if (Object.values(ship.rotationalPivotConfigurations).every(value => value === null)) {\n        ship.rotationalPivotConfigurations = {\n          ...placementConfigurations,\n          transientAngleOfRotation: AnglesOfRotation.Degrees0,\n        }\n      }      \n    };\n    const updateOccupiedCoordinatesSet = (\n      shipType: ShipType,\n      placementCoordinates: CoordinatesArray\n    ): void => {\n      battleshipBoardRepository.addShipToFleetCoordinates(\n        shipType,\n        placementCoordinates\n      );\n    };\n\n    const placementCoordinates: CoordinatesArray = getPlacementCoordinates(\n      position,\n      isHorizontal\n    );\n\n    placeOnBoard(ship, placementCoordinates);\n    setShipConfigurations(\n      ship,\n      placementCoordinates,\n      orientation\n    );\n    updateOccupiedCoordinatesSet(ship.type, placementCoordinates);\n  } else {\n    const errorMessage: string = `Invalid Command: \"${JSON.stringify(\n      position\n    )}\" is unavailable for ship with Size: ${shipLength} and Orientation: ${orientation}.`;\n\n    throw new Error(errorMessage);\n  }\n}\n","import { BattleshipBuilder } from \"../bs-ship-builder/bs-ship-builder\";\nimport {\n  Coordinates,\n  CoordinatesArray,\n  OccupiedCoordinatesSetMemberKey,\n  FleetCoordinates,\n  InBoundRotationalPlacePieceParamsForFleet,\n  ShipType,\n  RotationalPositionMap\n} from \"../../types/logic-types\";\nimport { isOccupiedCoordinatesSet, isFleetCoordinates, isShipType } from \"../../utilities/logic-utilities\";\n\nexport class BattleshipBoardRepository {\n  private readonly _fleetCoordinates: FleetCoordinates = {};\n  private readonly _inBoundRotationalPlacePieceParamsForFleet: InBoundRotationalPlacePieceParamsForFleet = {};\n\n  // 💭 --------------------------------------------------------------\n\n  public get fleetCoordinates(): FleetCoordinates {\n    return this._fleetCoordinates;\n  }\n\n  public get inBoundRotationalPlacePieceForFleet(): InBoundRotationalPlacePieceParamsForFleet {\n    return this._inBoundRotationalPlacePieceParamsForFleet;\n  }\n\n  public addShipToFleetCoordinates(\n    shipType: ShipType,\n    placementCoordinates: CoordinatesArray\n  ): void {\n    if (!this.fleetCoordinates[shipType]) {\n      this.fleetCoordinates[shipType] = new Set();\n    }\n\n    placementCoordinates.forEach((coordinates: Coordinates) => {\n      const [x, y]: Coordinates = coordinates;\n      const setMemberTemplate: OccupiedCoordinatesSetMemberKey = `[${x}, ${y}]`;\n      this.fleetCoordinates[shipType]!.add(setMemberTemplate);\n    });\n  }\n\n  public isShipPlaced(shipType: ShipType): boolean {\n    return this.fleetCoordinates[shipType] !== null;\n  }\n\n  public nullifyShipCoordinatesValue(shipType: ShipType): void {\n    this.fleetCoordinates[shipType] = null;\n  }\n\n  public nullifyShipValidRotationalParams(shipType: ShipType): void {\n    this.inBoundRotationalPlacePieceForFleet[shipType] = null;\n  }\n  \n  public setShipValidRotationalParams(\n    ship: BattleshipBuilder,\n    validRotatedPlacePieceParams: RotationalPositionMap\n  ): void {\n    if (!this._inBoundRotationalPlacePieceParamsForFleet[ship.type])\n      this._inBoundRotationalPlacePieceParamsForFleet[ship.type] =\n        validRotatedPlacePieceParams;\n  }\n}","import { BattleshipFleetBuilder } from \"../logic/bs-fleet-builder/bs-fleet-builder\";\nimport { BattleshipBoardBuilder } from \"../logic/bs-gameboard-builder/bs-gameboard-builder\";\nimport { BattleshipBoardController } from \"../logic/bs-gameboard-controller/bs-gameboard-controller\";\nimport { BattleshipBoardRepository } from \"../logic/bs-gameboard-repository/bs-gameboard-repository\";\nimport { FleetVersion } from \"../types/logic-types\";\nimport { PlayerState } from \"../types/state-types\";\n\n// TODO: add params here that determine if player or bot, adjust return object accordingly\n// Player State Factory 😉\nexport const createPlayerStateObject = (fleetVersion: FleetVersion = 2002) => { \n  const gameboardBuilder = new BattleshipBoardBuilder();\n  const gameboardRepository = new BattleshipBoardRepository();\n  const fleetBuilder = fleetVersion === 2002\n    ? BattleshipFleetBuilder.createHasbroFleet()\n    : BattleshipFleetBuilder.createMBFleet();\n  const gameboardController = new BattleshipBoardController({\n    gameboardBuilder,\n    gameboardRepository,\n    fleetBuilder\n  });\n\n  return {\n    gameboardBuilder,\n    gameboardRepository,\n    fleetBuilder,\n    gameboardController,\n  }\n}\n\nconst playerOne: PlayerState = createPlayerStateObject();\nconst playerTwo: PlayerState = createPlayerStateObject();\n\nexport const players = {\n  playerOne,\n  playerTwo\n};","import {\n  Coordinates,\n  Fleet,\n  IPlacePieceWrapperParams,\n  IShipPlacementConfigurations,\n  Orientation,\n  IPosition,\n  PositionArray,\n  AxisArrayKey,\n} from '../types/logic-types';\nimport {\n  areArraysEqual,\n  getRandomInt,\n} from '../utilities/random-utilities';\nimport { BattleshipBuilder } from '../logic/bs-ship-builder/bs-ship-builder';\nimport { BattleshipBoardController } from '../logic/bs-gameboard-controller/bs-gameboard-controller';\nimport { isShipType } from '../utilities/logic-utilities';\n\nexport function randomizeBSGameboard(\n  gameboardController: BattleshipBoardController, fleet: Fleet\n) {\n  if (!gameboardController)\n    throw new Error('Invalid Command: `gameboardController` is required to randomize the gameboard.');\n  if (!fleet)\n    throw new Error('Invalid Command: `fleet` is required to randomize the gameboard.');\n\n  const generateRandomCoordinates = (\n    shipLength: number,\n    boardSize: number\n  ): Coordinates => {\n    const max: number = boardSize - shipLength;\n    const xRandom: number = getRandomInt(0, max);\n    const yRandom: number = getRandomInt(0, max);\n\n    return [xRandom, yRandom];\n  };\n  const generateRandomOrientation = (): Orientation => {\n    return Math.random() < 0.5 ? 'horizontal' : 'vertical';\n  };\n  const areCoordinatesValid = (\n    coordinates: Coordinates,\n    ship: BattleshipBuilder,\n    orientation: Orientation\n  ): boolean => {\n    const validPositionsParams: IShipPlacementConfigurations = {\n      shipLength: ship.length,\n      orientation,\n    };\n\n    const validPositions =\n      gameboardController.getValidPositions(validPositionsParams);\n    const [bowX, bowY]: Coordinates = coordinates;\n    const isHorizontal: boolean = orientation === 'horizontal';\n    const axisIndex: number = isHorizontal ? bowY : bowX;\n\n    const axisArrayKey: AxisArrayKey = isHorizontal\n      ? `row-${axisIndex}`\n      : `column-${axisIndex}`;\n    const axisArray: PositionArray = validPositions[axisArrayKey];\n\n    return axisArray.some((position: IPosition) =>\n      areArraysEqual(position.bow, coordinates)\n    );\n  }; \n  const getValidCoordinatesRecursively = (\n    ship: BattleshipBuilder,\n    orientation: Orientation,\n    boardSize: number,\n    attempts: number = 0\n  ): Coordinates => {\n    if (attempts > 100)\n      throw new Error(`Max recursion depth exceeded when placing the ${ship.type}.`);\n\n    const coordinates: Coordinates = generateRandomCoordinates(\n      ship.length,\n      boardSize\n    );\n\n    return areCoordinatesValid(coordinates, ship, orientation)\n      ? coordinates\n      : getValidCoordinatesRecursively(\n          ship,\n          orientation,\n          boardSize,\n          attempts + 1\n        )\n  };\n\n  const boardSize: number = 10;\n\n  for (const shipType in fleet) {\n    if (!isShipType(shipType)) throw new Error(`Invalid Type: \"${shipType}\" doesn't conform to \"ShipType\".`);\n\n    const ship: BattleshipBuilder = fleet[shipType]!;\n    const randomOrientation: Orientation = generateRandomOrientation();\n\n    const coordinates: Coordinates = getValidCoordinatesRecursively(\n      ship,\n      randomOrientation,\n      boardSize\n    );\n\n    const placePieceParams: IPlacePieceWrapperParams = {\n      ship,\n      coordinates,\n      orientation: randomOrientation,\n    };\n    \n    gameboardController.placePiece(placePieceParams);\n  }\n}\n","// 💭 Pub-sub/Mediator Pattern\n\ntype Listener<T = any> = (data: T) => void;\n\nclass EventBus {\n  private events: Record<string, Array<Listener>> = {};\n\n  /**\n   * Register a listener for a specific event.\n   * @param eventName - The name of the event.\n   * @param fn - The callback function to register.\n   */\n  on<T>(eventName: string, fn: Listener<T>): void {\n    this.events[eventName] = this.events[eventName] || [];\n    this.events[eventName].push(fn);\n  }\n\n  /**\n   * Unregister a listener for a specific event.\n   * @param eventName - The name of the event.\n   * @param fn - The callback function to remove.\n   */\n  off<T>(eventName: string, fn: Listener<T>): void {\n    if (this.events[eventName]) {\n      this.events[eventName] = this.events[eventName].filter(\n        (listener) => listener !== fn\n      );\n    }\n  }\n\n  /**\n   * Emit an event, calling all listeners registered for it.\n   * @param eventName - The name of the event.\n   * @param data - The data to pass to the listeners (optional).\n   */\n  emit<T>(eventName: string, data?: T): void {\n    if (this.events[eventName]) {\n      this.events[eventName].forEach((fn) => fn(data));\n    }\n  }\n}\n\nconst GlobalEventBus = new EventBus();\n\nexport default GlobalEventBus;","import './styles/sass/index.scss'\nimport { players } from './typescript/state/player-state';\nimport { randomizeBSGameboard } from './typescript/setup/randomize-bs-gameboard';\n\nimport { BotGameboardComponent } from './typescript/components/bot-gameboard-component/bot-gameboard-component';\nimport { PlayerGameboardComponent } from './typescript/components/player-gameboard-component/player-gameboard-component';\nimport { ShipShufflerButtonComponent } from './typescript/components/ship-shuffler-component/ship-shuffler-component';\n\nfunction init() {\n  const randomizeBSGameboards = () => {\n    randomizeBSGameboard(\n      players.playerOne.gameboardController,\n      players.playerOne.fleetBuilder.fleet\n    );\n    randomizeBSGameboard(\n      players.playerTwo.gameboardController,\n      players.playerTwo.fleetBuilder.fleet\n    );\n  };\n\n  // benchmark board set randomization\n  console.time('randomizeBSGameboards');\n  randomizeBSGameboards();\n  console.timeEnd('randomizeBSGameboards');\n\n  // 💭 --------------------------------------------------------------\n  // 💭 Player\n  const playerGameboardComponent = new PlayerGameboardComponent(\n    'playerOne',\n    players.playerOne\n  );\n  playerGameboardComponent.render('#content');\n\n  const shipShuffler = new ShipShufflerButtonComponent(\n    players.playerOne.gameboardController,\n    players.playerOne.fleetBuilder.fleet,\n    '#content',\n    'player-one-ship-shuffler-button'\n  );\n\n  shipShuffler.render('#content');\n\n  // 💭 --------------------------------------------------------------\n  // 💭 Bot\n  const botGameboardComponent = new BotGameboardComponent('botOne', players.playerTwo);\n  botGameboardComponent.render('#content');\n}\n\n// time all the above stuff\nconsole.time('init');\ninit();\nconsole.timeEnd('init');","import { BattleshipFleetBuilder } from '../../logic/bs-fleet-builder/bs-fleet-builder';\nimport {\n  Coordinates,\n  CoordinatesArray,\n  Fleet,\n  Gameboard,\n  Orientation,\n  ShipLength,\n  ShipSymbolValue,\n  ShipSymbolValueArray,\n  ShipType,\n} from '../../types/logic-types';\nimport {\n  areArraysEqual,\n  createElement,\n  createIdentifier,\n  getConvertedTypeFromAttr\n} from '../../utilities/random-utilities';\nimport { GridPlacementValue } from '../../types/css-types';\nimport { PlayerState } from '../../types/state-types';\nimport GlobalEventBus from '../../utilities/event-bus';\nimport { isOrientation, isShipLength, isShipType } from '../../utilities/logic-utilities';\nimport { DragState } from '../component-types';\nimport { BattleshipBoardController } from '../../logic/bs-gameboard-controller/bs-gameboard-controller';\n\nexport class PlayerGameboardComponent {\n  private boardContainer: HTMLDivElement;\n  private fleetElements: Set<HTMLDivElement> = new Set();\n\n  constructor(\n    private readonly id: string,\n    public readonly playerState: PlayerState\n  ) {\n    this.boardContainer = this.generateBoardContainer(\n      this.playerState.gameboardBuilder.boardSize\n    );\n\n    GlobalEventBus.on('updateGameboard', () => {\n      this.updateGameboard();\n    });\n  }\n\n  public render(targetSelector: string): void {\n    const target: HTMLElement | null = document.querySelector(targetSelector);\n\n    if (!target) {\n      throw new Error(\n        `Target element not found with ID - ${this.id} and selector - \"${targetSelector}\".`\n      );\n    }\n\n    const gameboard: DocumentFragment = this.generateBoardFragment(\n      this.playerState.gameboardBuilder.boardSize\n    );\n\n    this.boardContainer.appendChild(gameboard);\n\n    this.handleFleetPlacement(\n      this.playerState.fleetBuilder,\n      this.fleetElements\n    );\n\n    target.appendChild(this.boardContainer);\n  }\n\n  // 💭 --------------------------------------------------------------\n  // 💭 Helpers\n\n  private appendFleetClonesToGameboard(fleetElements: Set<HTMLDivElement>) {\n    const gameboard: HTMLDivElement | null =\n      this.boardContainer.querySelector('.gameboard');\n\n    if (!gameboard) throw new Error('Gameboard not found');\n\n    fleetElements.forEach((shipElement) => {\n      const shipCloneElement: HTMLDivElement = createElement(\n        'div',\n        ['ship-container-clone'],\n        {\n          id: `${shipElement.getAttribute('id')}-clone`,\n        }\n      );\n\n      gameboard.appendChild(shipCloneElement);\n    });\n  }\n\n  private clearBoardContainer(boardContainer: HTMLDivElement): void {\n    while (boardContainer.firstChild) {\n      boardContainer.removeChild(boardContainer.firstChild);\n    }\n  }\n\n  private createBackgroundCellsFragment(\n    gameboard: Gameboard\n  ): DocumentFragment {\n    const cellFragment: DocumentFragment = new DocumentFragment();\n\n    gameboard.forEach((row: ShipSymbolValueArray, rowIndex) => {\n      row.forEach((symbol: ShipSymbolValue, colIndex) => {\n        const symbolDescription: string = symbol.description!.toLowerCase();\n\n        const gridCell: HTMLDivElement = createElement(\n          'div',\n          [\n            `${createIdentifier(this.id, 'player', symbolDescription)}-cell`,\n            `player-${symbolDescription}-cell`,\n            'grid-cell',\n          ],\n          {\n            'data-x': colIndex.toString(),\n            'data-y': rowIndex.toString(),\n            'aria-label': `Row ${rowIndex + 1}, Column ${colIndex + 1}`,\n            role: 'gridCell',\n          }\n        );\n\n        const gridCellContainer: HTMLDivElement = createElement('div', [\n          createIdentifier(\n            this.id,\n            'player',\n            `${symbolDescription}-grid-cell-container`\n          ),\n          'grid-cell-container',\n        ]);\n\n        gridCellContainer.appendChild(gridCell);\n        cellFragment.appendChild(gridCellContainer);\n      });\n    });\n\n    return cellFragment;\n  }\n\n  private createShipElement(\n    shipType: ShipType,\n    shipLength: ShipLength,\n    gridPlacementValue: string,\n    gridCrossAxis: number,\n    orientation: Orientation\n  ): HTMLDivElement {\n    const shipUnitFragment: DocumentFragment = this.generateShipUnitFragment(\n      shipLength,\n      shipType,\n      this.id\n    );\n\n    const shipContainerElement: HTMLDivElement = createElement(\n      'div',\n      ['ship-container'],\n      {\n        id: createIdentifier(this.id, 'player', `${shipType}-container`),\n        'data-shipType': shipType,\n        'data-length': shipLength.toString(),\n        'data-orientation': orientation,\n        draggable: 'true',\n      }\n    );\n    shipContainerElement.style.display = 'grid';\n    shipContainerElement.appendChild(shipUnitFragment);\n\n    const isHorizontal: boolean = orientation === 'horizontal';\n    if (isHorizontal) {\n      shipContainerElement.style.gridColumn = gridPlacementValue;\n      shipContainerElement.style.gridRow = gridCrossAxis.toString();\n      shipContainerElement.style.gridTemplateColumns = `repeat(${shipLength}, 1fr)`;\n    } else {\n      shipContainerElement.style.gridRow = gridPlacementValue;\n      shipContainerElement.style.gridColumn = gridCrossAxis.toString();\n      shipContainerElement.style.gridTemplateRows = `repeat(${shipLength}, 1fr)`;\n    }\n\n    return shipContainerElement;\n  }\n\n  private generateBoardContainer(boardSize: number): HTMLDivElement {\n    const gameboardContainer: HTMLDivElement = createElement(\n      'div',\n      ['gameboard-container'],\n      {\n        id: createIdentifier(this.id, 'player', 'gameboard-container'),\n      }\n    );\n\n    gameboardContainer.style.setProperty('--grid-size', boardSize.toString());\n\n    this.handleDragListeners(gameboardContainer);\n    this.handleClickListeners(gameboardContainer);\n\n    return gameboardContainer;\n  }\n\n  private generateBoardFragment(boardSize: number): DocumentFragment {\n    const gameboardBackground: HTMLDivElement = createElement(\n      'div',\n      ['gameboard-background'],\n      {\n        id: createIdentifier(this.id, 'player', 'gameboard-background'),\n      }\n    );\n    gameboardBackground.appendChild(\n      this.createBackgroundCellsFragment(\n        this.playerState.gameboardBuilder.board\n      )\n    );\n\n    const gameboard = createElement('div', ['gameboard'], {\n      id: createIdentifier(this.id, 'player', 'gameboard'),\n    });\n    gameboard.style.setProperty('--grid-size', boardSize.toString());\n\n    const boardFragment: DocumentFragment = new DocumentFragment();\n    boardFragment.append(gameboardBackground, gameboard);\n\n    return boardFragment;\n  }\n\n  private generateShipUnitFragment(\n    shipLength: ShipLength,\n    shipType: ShipType,\n    id: string\n  ): DocumentFragment {\n    const shipUnitFragment: DocumentFragment = new DocumentFragment();\n\n    for (let i = 0; i < shipLength; i++) {\n      const isBow: boolean = i === 0;\n      const shipUnit: HTMLDivElement = createElement('div', [\n        'ship-unit',\n        `${shipType}-unit`,\n        createIdentifier(id, 'player', `${shipType}-unit`),\n      ]);\n\n      if (isBow) {\n        shipUnit.classList.add('ship-bow');\n        shipUnit.setAttribute(\n          'id',\n          createIdentifier(id, 'player',`${shipType}-bow`)\n        );\n      }\n\n      shipUnitFragment.appendChild(shipUnit);\n    }\n\n    return shipUnitFragment;\n  }\n\n  private getGridPlacementValue(\n    coordinates: Coordinates,\n    orientation: Orientation,\n    shipLength: ShipLength\n  ): [GridPlacementValue, number] {\n    const isHorizontal = orientation === 'horizontal';\n\n    const [x, y] = coordinates;\n    const gridStartMain = isHorizontal ? x + 1 : y + 1;\n    const gridCrossAxis = isHorizontal ? y + 1 : x + 1;\n\n    return [`${gridStartMain} / span ${shipLength}`, gridCrossAxis];\n  }\n\n  private handleFleetPlacement(\n    fleetBuilder: BattleshipFleetBuilder,\n    fleetElements: Set<HTMLDivElement>\n  ) {\n    this.updateFleetElements(fleetBuilder);\n    this.placeFleetOnGameboard(fleetElements);\n    this.appendFleetClonesToGameboard(fleetElements);\n  }\n\n  private placeFleetOnGameboard(fleetElements: Set<HTMLDivElement>): void {\n    const gameboard =\n      this.boardContainer.querySelector<HTMLDivElement>('.gameboard');\n\n    if (!gameboard) {\n      throw new Error('Gameboard container not found.');\n    }\n\n    fleetElements.forEach((shipElement) => gameboard.appendChild(shipElement));\n  }\n\n  private updateFleetElements = (fleetBuilder: BattleshipFleetBuilder) => {\n    if (this.fleetElements.size) this.fleetElements.clear();\n\n    for (const ship of Object.values(fleetBuilder.fleet)) {\n      const shipType: ShipType = ship.type;\n      const shipLength: ShipLength = ship.length;\n\n      const orientation: Orientation | null =\n        ship.currentplacementConfigurations.orientation;\n\n      if (!orientation) throw new Error('Orientation not set.');\n\n      const coordinatesArray: CoordinatesArray | null =\n        ship.currentplacementConfigurations.coordinatesArray;\n\n      if (!coordinatesArray || coordinatesArray.length === 0) {\n        console.log(`The ${shipType} has not been placed. Continuing...`);\n        continue;\n      }\n\n      const [x, y]: Coordinates = coordinatesArray[0];\n      const [gridPlacementValue, gridCrossAxis]: [GridPlacementValue, number] =\n        this.getGridPlacementValue([x, y], orientation, shipLength);\n\n      const shipElement: HTMLDivElement = this.createShipElement(\n        shipType,\n        shipLength,\n        gridPlacementValue,\n        gridCrossAxis,\n        orientation\n      );\n\n      this.fleetElements.add(shipElement);\n    }\n  };\n\n  private updateGameboard() {\n    this.clearBoardContainer(this.boardContainer);\n\n    const gameboard: DocumentFragment = this.generateBoardFragment(\n      this.playerState.gameboardBuilder.boardSize\n    );\n\n    this.boardContainer.appendChild(gameboard);\n\n    this.handleFleetPlacement(\n      this.playerState.fleetBuilder,\n      this.fleetElements\n    );\n  }\n\n  // 💭 --------------------------------------------------------------\n  // 💭 HTML Drag and Drop API (Repositioning)\n\n  private handleDragListeners(gameboardContainer: HTMLDivElement) {\n    const dragState: DragState = {\n      currentShipInstance: null,\n      initialPlacementConfigurations: null,\n      isValidDropTarget: false,\n      currentDragOverCell: null,\n    };\n\n    gameboardContainer.addEventListener('dragstart', (e: DragEvent) =>\n      this.handleShipDragStart(e, dragState)\n    );\n    gameboardContainer.addEventListener('dragenter', (e: DragEvent) =>\n      this.handleShipDragEnter(e)\n    );\n    gameboardContainer.addEventListener('dragleave', (e: DragEvent) =>\n      this.handleShipDragLeave(e)\n    );\n    gameboardContainer.addEventListener('dragleave', (e: DragEvent) =>\n      this.handleShipDragLeave(e)\n    );\n    gameboardContainer.addEventListener('dragover', (e: DragEvent) =>\n      this.handleShipDragOver(e, dragState)\n    );\n    gameboardContainer.addEventListener('drop', (e: DragEvent) =>\n      this.handleShipDrop(e, dragState)\n    );\n    gameboardContainer.addEventListener('dragend', (e: DragEvent) =>\n      this.handleShipDragEnd(e, dragState)\n    );\n  }\n\n  private handleShipDragStart(e: DragEvent, dragState: DragState) {\n    if (!(e.target instanceof HTMLDivElement))\n      throw new Error('Target element not found or is not an HTMLElement.');\n\n    // Ensure it's a valid ship container\n    if (!e.target.classList.contains('ship-container')) return;\n\n    const snapToClone = (\n      e: DragEvent,\n      boardContainer: HTMLDivElement\n    ): void => {\n      if (!e.target || !(e.target instanceof HTMLDivElement))\n        throw new Error('Target element not found or is not an HTMLElement.');\n\n      const shipContainerElement: HTMLDivElement = e.target;\n      const shipContainerId: string | null =\n        shipContainerElement.getAttribute('id');\n\n      const shipContainerClone: HTMLDivElement | null =\n        boardContainer.querySelector(`#${shipContainerId}-clone`);\n\n      if (!shipContainerClone) throw new Error('Ship clone not found.');\n      if (!shipContainerId)\n        throw new Error(\"Ship container doesn't have an ID.\");\n\n      const shipBoundingRect = shipContainerElement.getBoundingClientRect();\n\n      shipContainerClone.style.height = `${shipBoundingRect.height}px`;\n      shipContainerClone.style.width = `${shipBoundingRect.width}px`;\n\n      const shipBow = shipContainerElement.querySelector(`.ship-bow`);\n      if (!shipBow) throw new Error('Ship bow not found.');\n\n      const shipBowBoundingRect = shipBow?.getBoundingClientRect();\n\n      e.dataTransfer?.setDragImage(\n        shipContainerClone,\n        shipBowBoundingRect.width / 2,\n        shipBowBoundingRect.height / 2\n      );\n\n      // reveal ship container clone\n      shipContainerClone.style.visibility = 'visible'; // Ensure the clone is visible\n      shipContainerClone.style.pointerEvents = 'auto'; // Ensure pointer events work on the clone\n\n      // TODO: Make this less hacky 🫠\n      // enable drag events for grid cells under ships\n      setTimeout(() => {\n        shipContainerElement.style.pointerEvents = 'none';\n      }, 0);\n    };\n\n    const classifyValidCellCoordinates = (\n      boardContainer: HTMLDivElement,\n      shipContainerElement: HTMLDivElement,\n      orientation: Orientation,\n      gameboardController: BattleshipBoardController\n    ): void => {\n      const shipLengthAttr: number | null = Number(\n        shipContainerElement.getAttribute('data-length')\n      );\n      if (!shipLengthAttr || !isShipLength(shipLengthAttr)) {\n        throw new Error('Invalid or missing ship type attribute.');\n      }\n\n      const classifyValidBowCells = (\n        gridCells: NodeListOf<HTMLDivElement>,\n        shipLength: ShipLength,\n        orientation: Orientation\n      ) => {\n        const allValidBowCoordinates: Set<Coordinates> =\n          gameboardController.getAllValidBowCoordinates(\n            orientation,\n            shipLength\n          );\n\n        gridCells.forEach((gridCell: HTMLDivElement) => {\n          const gridCellCoordinates: Coordinates = [\n            Number(gridCell.getAttribute('data-x')),\n            Number(gridCell.getAttribute('data-y')),\n          ];\n\n          for (const validBowCoordinates of allValidBowCoordinates) {\n            if (!areArraysEqual(validBowCoordinates, gridCellCoordinates))\n              continue;\n            gridCell.classList.add('valid-bow-coordinates');\n          }\n        });\n      };\n\n      const shipLength: ShipLength = shipLengthAttr;\n\n      const gridCells: NodeListOf<HTMLDivElement> =\n        boardContainer.querySelectorAll('.grid-cell');\n\n      classifyValidBowCells(gridCells, shipLength, orientation);\n    };\n\n    // Update drag state\n    const setUpShipForDrag = (\n      dragState: DragState,\n      fleet: Fleet,\n      shipType: ShipType\n    ) => {\n      // Ensure the ship type exists in the fleet\n\n      if (!fleet[shipType])\n        throw new Error(`The ${shipType} is not present in the fleet.`);\n\n      // Set the current ship instance and its initial configurations\n      dragState.currentShipInstance = fleet[shipType];\n      dragState.initialPlacementConfigurations =\n        dragState.currentShipInstance.currentplacementConfigurations;\n    };\n\n    const shipContainer: HTMLDivElement = e.target;\n\n    // Get ship type and orientation, ensuring valid attributes and types\n    const shipType: ShipType = getConvertedTypeFromAttr(\n      e.target,\n      'data-shiptype',\n      isShipType\n    );\n\n    const orientation: Orientation = getConvertedTypeFromAttr(\n      e.target,\n      'data-orientation',\n      isOrientation\n    );\n\n    const fleet: Fleet = this.playerState.fleetBuilder.fleet;\n\n    setUpShipForDrag(dragState, fleet, shipType);\n\n    if (!dragState.currentShipInstance)\n      throw new Error(\n        `Drag state hasn't been updated with the current ship instance on drag start. Drag State: ${JSON.stringify(\n          dragState\n        )}`\n      );\n\n    // Remove the piece from the gameboard (non-null ensured by `setUpShipForDrag`)\n    this.playerState.gameboardController.removePiece(\n      dragState.currentShipInstance\n    );\n\n    // Handle snapping and classifying valid cells\n    snapToClone(e, this.boardContainer);\n    classifyValidCellCoordinates(\n      this.boardContainer,\n      shipContainer,\n      orientation,\n      this.playerState.gameboardController\n    );\n  }\n\n  private handleShipDragEnter(e: DragEvent) {\n    if (!(e.target instanceof HTMLDivElement))\n      throw new Error('Target element not found or is not an HTMLElement.');\n\n    // Ensure it's a grid cell\n    if (!e.target.classList.contains('grid-cell')) return;\n\n    const gridCell: HTMLDivElement = e.target;\n\n    // Check if current grid cell is valid for placement\n    const areValidBowCoordinates = gridCell.classList.contains(\n      'valid-bow-coordinates'\n    );\n\n    // Add appropriate visual feedback class to grid cell\n    areValidBowCoordinates\n      ? gridCell.classList.add('placement-is-valid')\n      : gridCell.classList.add('placement-is-invalid');\n  }\n\n  private handleShipDragLeave(e: DragEvent) {\n    if (!(e.target instanceof HTMLDivElement))\n      throw new Error('Target element not found or is not an HTMLElement.');\n\n    if (!e.target.classList.contains('grid-cell')) return;\n\n    const gridCell: HTMLDivElement = e.target;\n\n    // Remove assigned visual feedback class from grid cell\n    if (gridCell.classList.contains('placement-is-valid')) {\n      gridCell.classList.remove('placement-is-valid');\n    } else if (gridCell.classList.contains('placement-is-invalid')) {\n      gridCell.classList.remove('placement-is-invalid');\n    }\n  }\n\n  private handleShipDragOver(e: DragEvent, dragState: DragState) {\n    // Enables the drop event to fire\n    e.preventDefault();\n\n    if (!(e.target instanceof HTMLDivElement))\n      throw new Error('Target element not found or is not an HTMLElement.');\n    if (!e.target.classList.contains('grid-cell')) return;\n\n    const gridCell: HTMLDivElement = e.target;\n\n    // Update drag state for cleanup\n    dragState.currentDragOverCell = gridCell;\n\n    // Prevent further operations for invalid cells\n    if (!gridCell.classList.contains('valid-bow-coordinates')) return;\n  }\n\n  private handleShipDrop(e: DragEvent, dragState: DragState) {\n    e.preventDefault();\n\n    if (!e.target || !(e.target instanceof HTMLDivElement))\n      throw new Error('Target element not found or is not an HTMLElement.');\n\n    if (!e.target.classList.contains('valid-bow-coordinates')) return;\n\n    // Validate and modify state\n    const { coordinatesArray, orientation: initialOrientation } =\n      dragState.initialPlacementConfigurations || {};\n    if (!coordinatesArray || !initialOrientation) {\n      throw new Error('Initial placement configurations are incomplete.');\n    }\n\n    dragState.isValidDropTarget = true;\n\n    const validGridCell: HTMLDivElement = e.target;\n\n    // Retrieve new coordinates from the valid grid cell\n    const xAttr = validGridCell.getAttribute('data-x');\n    const yAttr = validGridCell.getAttribute('data-y');\n    if (!xAttr || !yAttr) {\n      throw new Error('Missing or invalid grid cell coordinates.');\n    }\n    const newCoordinates: Coordinates = [Number(xAttr), Number(yAttr)];\n\n    this.playerState.gameboardController.placePiece({\n      ship: dragState.currentShipInstance!,\n      coordinates: newCoordinates,\n      orientation: initialOrientation,\n    });\n\n    // Re-renders board with new ship placement\n    this.updateGameboard();\n\n    // Reset valid drop target state\n    dragState.isValidDropTarget = false;\n  }\n\n  private handleShipDragEnd(e: DragEvent, dragState: DragState) {\n    if (!(e.target instanceof HTMLDivElement))\n      throw new Error('Target element not found or is not an HTMLElement.');\n\n    if (!e.target.classList.contains('ship-container')) return;\n    const resetDragStyles = (shipContainerElement: HTMLDivElement): void => {\n      // Extract and validate ship container ID\n      const shipContainerId: string | null =\n        shipContainerElement.getAttribute('id');\n\n      // Retrieve and validate ship clone element\n      const shipContainerClone: HTMLDivElement | null =\n        this.boardContainer.querySelector(`#${shipContainerId}-clone`);\n\n      if (!shipContainerId || !shipContainerClone) {\n        throw new Error(\n          `Invalid ship container state. ID: ${shipContainerId}, Clone: ${shipContainerClone}`\n        );\n      }\n\n      // Re-hide drag clone\n      shipContainerClone.style.visibility = 'hidden'; // Ensure the clone is visible\n      shipContainerClone.style.pointerEvents = 'none'; // Ensure pointer events are revoked from clone\n\n      // Remove drag events for grid cells under ships\n      shipContainerElement.style.pointerEvents = 'auto';\n    };\n    const resetShipPosition = (): void => {\n      const { coordinatesArray, orientation: initialOrientation } =\n        dragState.initialPlacementConfigurations || {};\n      if (!coordinatesArray || !initialOrientation) {\n        throw new Error('Initial placement configurations are incomplete.');\n      }\n\n      // Get bow coordinates\n      const initialBowCoordinates: Coordinates = coordinatesArray[0];\n\n      // Re-place ship on logic gameboard\n      this.playerState.gameboardController.placePiece({\n        ship: dragState.currentShipInstance!,\n        coordinates: initialBowCoordinates,\n        orientation: initialOrientation,\n      });\n    };\n    const removeVisualFeedback = (\n      currentDragOverCell: HTMLDivElement,\n      isValidDropTarget: boolean\n    ): void => {\n      const feedbackClass: string = isValidDropTarget\n        ? 'placement-is-valid'\n        : 'placement-is-invalid';\n      currentDragOverCell.classList.remove(feedbackClass);\n    };\n\n    const shipContainerElement: HTMLDivElement = e.target;\n\n    try {\n      resetDragStyles(shipContainerElement);\n\n      const { currentDragOverCell, isValidDropTarget } = dragState;\n      if (!currentDragOverCell)\n        throw new Error(\n          `Current drag over cell is missing. Drag state: ${JSON.stringify(\n            dragState\n          )}`\n        );\n      removeVisualFeedback(currentDragOverCell, isValidDropTarget);\n\n      if (!isValidDropTarget) {\n        resetShipPosition();\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  // 💭 --------------------------------------------------------------\n  // 💭 Handle Ship Click (Rotation)\n\n  private handleClickListeners(gameboardContainer: HTMLDivElement) {\n    \n    gameboardContainer.addEventListener('click', (e: MouseEvent) => {\n      this.handleShipRotation(e);\n    });\n\n  }\n\n  private handleShipRotation(e: MouseEvent) {\n    if (!(e.target instanceof HTMLDivElement))\n      throw new Error('Target element not found or is not an HTMLElement.');\n\n    // Ensure it's a valid ship container\n    if (!e.target.classList.contains('ship-container')) return;\n\n    const shipContainer: HTMLDivElement = e.target;\n\n    const shipType: ShipType = getConvertedTypeFromAttr(\n      shipContainer,\n      'data-shiptype',\n      isShipType\n    );\n    \n    const ship = this.playerState.fleetBuilder.getShip(shipType);\n\n    this.playerState.gameboardController.rotatePiece(ship);\n    this.updateGameboard();\n  };\n\n  // 💭 --------------------------------------------------------------\n  // 💭 Utilities\n\n  // TODO: Do I need this\n  public getId(): string {\n    return this.id;\n  }\n}\n","import { BattleshipBoardController } from \"../../logic/bs-gameboard-controller/bs-gameboard-controller\";\nimport { createElement } from \"../../utilities/random-utilities\";\nimport { Fleet } from \"../../types/logic-types\";\nimport { randomizeBSGameboard } from \"../../setup/randomize-bs-gameboard\";\nimport GlobalEventBus from \"../../utilities/event-bus\";\n\nexport class ShipShufflerButtonComponent {\n  private readonly ShipShufflerButton: HTMLButtonElement;\n  private readonly ShipShufflerButtonContainer: HTMLDivElement;\n  private readonly ShipShufflerButtonTextContent: string = 'Shuffle Ships';\n\n  constructor(\n    private gameboardController: BattleshipBoardController,\n    private fleet: Fleet,\n    private gameboardTargetSelector: string,\n    private id: string = 'ship-shuffler-button',\n    private classes: string[] = ['ship-shuffler-button']\n  ) {\n    this.validateGameboardTarget(this.gameboardTargetSelector);\n\n    this.ShipShufflerButton = this.createShipShufflerButton(\n      this.id,\n      this.classes\n    );\n    this.ShipShufflerButton.classList.add(...this.classes);\n    this.ShipShufflerButton.textContent = this.ShipShufflerButtonTextContent;\n    this.addEventListener(this.ShipShufflerButton);\n\n    this.ShipShufflerButtonContainer = this.createShipShufflerButtonContainer();\n    this.ShipShufflerButtonContainer.appendChild(this.ShipShufflerButton);\n  }\n\n  public render(targetSelector: string) {\n    const target: HTMLElement | null = document.querySelector(targetSelector);\n\n    if (!target) {\n      throw new Error(`Target element not found: \"${targetSelector}.\"`);\n    }\n\n    target.appendChild(this.ShipShufflerButtonContainer);\n  }\n\n  // 💭 --------------------------------------------------------------\n  // 💭 Helpers\n\n  private addEventListener(ShipShufflerButton: HTMLButtonElement) {\n    ShipShufflerButton.addEventListener('click', () => {\n      this.randomizeGameboard();\n      this.updateGameboard(this.gameboardTargetSelector);\n    });\n  }\n\n  private createShipShufflerButton(\n    id: string,\n    classes: string[]\n  ): HTMLButtonElement {\n    const button: HTMLButtonElement = createElement('button', [...classes], {\n      id,\n    });\n    return button;\n  }\n\n  private createShipShufflerButtonContainer(): HTMLDivElement {\n    const container: HTMLDivElement = createElement('div', [\n      'ship-shuffler-button-container',\n    ]);\n    return container;\n  }\n\n  private randomizeGameboard() {\n    this.gameboardController.removeAllPieces(this.fleet);\n    randomizeBSGameboard(this.gameboardController, this.fleet);\n  }\n\n  private updateGameboard(targetSelector: string) {\n    GlobalEventBus.emit('updateGameboard', targetSelector);\n  }\n\n  private validateGameboardTarget(gameboardTargetSelector: string) {\n    if (!document.querySelector(gameboardTargetSelector)) {\n      throw new Error(\n        `Invalid gameboard target selector: \"${gameboardTargetSelector}\"`\n      );\n    }\n  }\n\n  // 💭 --------------------------------------------------------------\n  // 💭 Utilities\n\n  public getId() {\n    return this.id;\n  }\n}","import {\n  Gameboard,\n  ShipSymbolValue,\n  ShipSymbolValueArray\n} from '../../types/logic-types';\nimport {\n  createElement,\n  createIdentifier,\n} from '../../utilities/random-utilities';\nimport { PlayerState } from '../../types/state-types';\n\nexport class BotGameboardComponent {\n  private boardContainer: HTMLDivElement;\n\n  constructor(\n    private readonly id: string,\n    public readonly playerState: PlayerState\n  ) {\n    this.boardContainer = this.generateBoardContainer(\n      this.playerState.gameboardBuilder.boardSize\n    );\n  }\n\n  public render(targetSelector: string): void {\n    const target: HTMLElement | null = document.querySelector(targetSelector);\n\n    if (!target) {\n      throw new Error(\n        `Target element not found with ID - ${this.id} and selector - \"${targetSelector}\".`\n      );\n    }\n\n    const gameboard: DocumentFragment = this.generateBoardFragment(\n      this.playerState.gameboardBuilder.boardSize\n    );\n\n    this.boardContainer.appendChild(gameboard);\n\n    target.appendChild(this.boardContainer);\n  }\n\n  // 💭 --------------------------------------------------------------\n  // 💭 Helpers\n\n  private createBackgroundCellsFragment(\n    gameboard: Gameboard\n  ): DocumentFragment {\n    const cellFragment: DocumentFragment = new DocumentFragment();\n\n    gameboard.forEach((row: ShipSymbolValueArray, rowIndex: number) => {\n      row.forEach((_: ShipSymbolValue, colIndex: number) => {\n        const gridCell: HTMLDivElement = createElement(\n          'div',\n          [\n            `${createIdentifier(this.id, 'bot')}-cell`,\n            'grid-cell',\n          ],\n          {\n            'data-x': colIndex.toString(),\n            'data-y': rowIndex.toString(),\n            'aria-label': `Row ${rowIndex + 1}, Column ${colIndex + 1}`,\n            role: 'gridCell',\n          }\n        );\n\n        const gridCellContainer: HTMLDivElement = createElement('div', [\n          createIdentifier(\n            this.id,\n            'bot',\n            `grid-cell-container`\n          ),\n          'grid-cell-container',\n        ]);\n\n        gridCellContainer.appendChild(gridCell);\n        cellFragment.appendChild(gridCellContainer);\n      });\n    });\n\n    return cellFragment;\n  }\n\n  private generateBoardContainer(boardSize: number): HTMLDivElement {\n    const gameboardContainer: HTMLDivElement = createElement(\n      'div',\n      ['gameboard-container'],\n      {\n        id: createIdentifier(this.id, 'bot', 'gameboard-container'),\n      }\n    );\n\n    gameboardContainer.style.setProperty('--grid-size', boardSize.toString());\n\n    return gameboardContainer;\n  }\n\n  private generateBoardFragment(boardSize: number): DocumentFragment {\n    const gameboardBackground: HTMLDivElement = createElement(\n      'div',\n      ['gameboard-background'],\n      {\n        id: createIdentifier(this.id, 'bot', 'gameboard-background'),\n      }\n    );\n    gameboardBackground.appendChild(\n      this.createBackgroundCellsFragment(\n        this.playerState.gameboardBuilder.board\n      )\n    );\n\n    const gameboard = createElement('div', ['gameboard'], {\n      id: createIdentifier(this.id, 'bot', 'gameboard'),\n    });\n    gameboard.style.setProperty('--grid-size', boardSize.toString());\n\n    const boardFragment: DocumentFragment = new DocumentFragment();\n    boardFragment.append(gameboardBackground, gameboard);\n\n    return boardFragment;\n  }\n\n  // 💭 --------------------------------------------------------------\n  // 💭 Utilities\n\n  // TODO: Do I need this\n  public getId(): string {\n    return this.id;\n  }\n}\n"],"names":["AnglesOfRotation","ShipType","SHIP_SYMBOLS","Carrier","Symbol","Battleship","Cruiser","Submarine","Destroyer","PatrolBoat","sizeLookup","undefined","BattleshipBuilder","seaworthy","rotationalPivotConfigurations","transientAngleOfRotation","coordinatesArray","orientation","currentplacementConfigurations","isPlaced","this","_hitCounter","constructor","type","version","symbol","key","length","Error","hit","isSeaworthy","hitCounter","resetConfigurations","shouldResetShipRotationalData","placementConfigurations","areArraysEqual","arrayOne","arrayTwo","every","value","index","getConvertedTypeFromAttr","element","attribute","typeGuard","attrValue","getAttribute","getRandomInt","min","max","Math","floor","random","createElement","tag","classes","attributes","document","forEach","cls","classList","add","Object","entries","setAttribute","createIdentifier","id","playerType","identifier","extractedNumberString","split","toLowerCase","createPositionObject","x","y","shipLength","bow","stern","isCoordinateInBounds","coordinate","boardSize","areCoordinatesInBounds","coordinates","arePositionsEqual","positionOne","positionTwo","isCoordinates","Array","isArray","isOrientation","includes","isOutOfBounds","isPlacePieceParams","isPosition","proto","getPrototypeOf","prototype","isPlainObject","isShipType","values","BattleshipFleetBuilder","fleet","createFleet","fleetConfigs","shipType","config","createHasbroFleet","carrier","battleship","destroyer","submarine","patrolBoat","createMBFleet","cruiser","getShip","ship","BattleshipBoardBuilder","static","_boardSize","_fillValue","vacant","_board","from","fill","board","fillValue","BattleshipBoardController","playerState","getValidPositions","battleshipBoardBuilder","extractAxisArray","axisIndex","gameboard","map","row","findValidPositionsInAxis","axisArray","isHorizontal","streak","validAxisPositions","i","bowPosition","sternPosition","push","validPositionsPerAxis","validPositions","getValidShipPositions","gameboardBuilder","battleshipBoardController","getAllValidBowCoordinates","allValidBowCoordinates","Set","positionsInAxis","position","movePiece","newBowCoordinates","console","warn","currentOrientation","newPosition","isPositionInBounds","axisArrayKey","createAxisArrayKey","isNewPositionValid","some","placementParameters","relocateShip","placePiece","battleshipBoardRepository","bowX","bowY","errorMessage","isPositionValid","shipConfigurations","validPosition","JSON","stringify","getPlacementCoordinates","placementCoordinates","sternX","sternY","primary","axisEnd","placeOnBoard","shipPlacementCoordinates","shipSymbol","setShipConfigurations","Degrees0","updateOccupiedCoordinatesSet","addShipToFleetCoordinates","placeShip","gameboardRepository","setFleetRotatedPlacePieceParams","fleetBuilder","prettyPrint","table","description","receiveAttack","attackedShip","getShipAt","log","removePiece","isShipValidForRemoval","shipCoordinates","removeShipFromBoard","nullifyShipCoordinatesValue","nullifyShipCoordinateSetValue","resetShipConfigurations","nullifyShipValidRotationalParams","removeAllPieces","keys","error","rotatePiece","getNextPiecePlacementParams","rotationalPositionMap","currentAngle","maxAngle","pop","getMaxAngle","originalBowCoordinates","originalOrientation","nextAngle","getNextAngle","find","angle","nextPlacePieceParams","get","inBoundRotationalPlacePieceForFleet","initialAngle","finalPlacePieceParams","isRotatedPositionValid","updateTransientPlacementParams","areCoordinatesVacant","shipSymbolValue","getShipTypeFromSymbol","angleOfRotation","gameboardSize","newAxisIndexStart","axisIndexEnd","Degrees90","Degrees270","getRotatedPlacePieceParams","applyOffsetToCoordinate","determineRotatedOrientation","Degrees180","getRotatedBowCoordinates","rotationalPivotBowCoordinates","rotatedBowCoordinates","rotationalPivotOrientation","rotatedPiecePlacementParams","createRotatedPiecePlacementParams","rotatedPlacePieceParamsMap","rotatedPlacePieceParams","Map","angleOfRotationString","angleOfRotationToNum","rotatedPlacePieceParamsValue","bowCoordinates","placePieceParams","set","generateRotationalPositionMap","isShipPlaced","setShipRotatedPlacePieceParams","setShipValidRotationalParams","BattleshipBoardRepository","_fleetCoordinates","_inBoundRotationalPlacePieceParamsForFleet","fleetCoordinates","setMemberTemplate","validRotatedPlacePieceParams","createPlayerStateObject","fleetVersion","gameboardController","players","playerOne","playerTwo","randomizeBSGameboard","getValidCoordinatesRecursively","attempts","generateRandomCoordinates","areCoordinatesValid","validPositionsParams","randomOrientation","events","on","eventName","fn","off","filter","listener","emit","data","time","timeEnd","fleetElements","boardContainer","generateBoardContainer","GlobalEventBus","updateGameboard","render","targetSelector","target","querySelector","generateBoardFragment","appendChild","handleFleetPlacement","appendFleetClonesToGameboard","shipElement","shipCloneElement","clearBoardContainer","firstChild","removeChild","createBackgroundCellsFragment","cellFragment","DocumentFragment","rowIndex","colIndex","symbolDescription","gridCell","toString","role","gridCellContainer","createShipElement","gridPlacementValue","gridCrossAxis","shipUnitFragment","generateShipUnitFragment","shipContainerElement","draggable","style","display","gridColumn","gridRow","gridTemplateColumns","gridTemplateRows","gameboardContainer","setProperty","handleDragListeners","handleClickListeners","gameboardBackground","boardFragment","append","isBow","shipUnit","getGridPlacementValue","updateFleetElements","placeFleetOnGameboard","size","clear","dragState","currentShipInstance","initialPlacementConfigurations","isValidDropTarget","currentDragOverCell","addEventListener","e","handleShipDragStart","handleShipDragEnter","handleShipDragLeave","handleShipDragOver","handleShipDrop","handleShipDragEnd","HTMLDivElement","contains","shipContainer","setUpShipForDrag","snapToClone","shipContainerId","shipContainerClone","shipBoundingRect","getBoundingClientRect","height","width","shipBow","shipBowBoundingRect","dataTransfer","setDragImage","visibility","pointerEvents","setTimeout","classifyValidCellCoordinates","shipLengthAttr","Number","classifyValidBowCells","gridCells","gridCellCoordinates","validBowCoordinates","querySelectorAll","remove","preventDefault","initialOrientation","validGridCell","xAttr","yAttr","newCoordinates","resetDragStyles","resetShipPosition","initialBowCoordinates","removeVisualFeedback","feedbackClass","handleShipRotation","getId","ShipShufflerButtonTextContent","gameboardTargetSelector","validateGameboardTarget","ShipShufflerButton","createShipShufflerButton","textContent","ShipShufflerButtonContainer","createShipShufflerButtonContainer","randomizeGameboard","_"],"sourceRoot":""}