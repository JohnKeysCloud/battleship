{"version":3,"file":"index.bundle.js","mappings":"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","sources":["webpack://battleship/./src/typescript/types/logic-types.ts","webpack://battleship/./src/typescript/logic/bs-gameboard-builder/bs-gameboard-builder.ts","webpack://battleship/./src/typescript/logic/bs-gameboard-controller/bs-gameboard-controller.ts","webpack://battleship/./src/typescript/logic/bs-gameboard-controller/method-callbacks/get-valid-ship-positions/get-valid-ship-positions.ts","webpack://battleship/./src/typescript/utilities/logic-utilities.ts","webpack://battleship/./src/typescript/logic/bs-gameboard-controller/method-callbacks/place-ship/place-ship.ts","webpack://battleship/./src/typescript/logic/bs-gameboard-repository/bs-gameboard-repository.ts","webpack://battleship/./src/typescript/logic/bs-ship-builder/bs-ship-builder.ts","webpack://battleship/./src/typescript/logic/bs-fleet-builder/bs-fleet-builder.ts","webpack://battleship/./src/typescript/utilities/random-utilities.ts","webpack://battleship/./src/typescript/state/player-state.ts","webpack://battleship/./src/typescript/setup/randomize-bs-gameboard.ts","webpack://battleship/./src/typescript/utilities/event-bus.ts","webpack://battleship/./src/app.ts","webpack://battleship/./src/typescript/components/player-gameboard-component/player-gameboard-component.ts","webpack://battleship/./src/typescript/components/ship-shuffler-component/ship-shuffler-component.ts","webpack://battleship/./src/typescript/components/bot-gameboard-component/bot-gameboard-component.ts"],"sourcesContent":["import { BattleshipFleetBuilder } from '../logic/bs-fleet-builder/bs-fleet-builder';\nimport { BattleshipBoardBuilder } from '../logic/bs-gameboard-builder/bs-gameboard-builder';\nimport { BattleshipBoardController } from '../logic/bs-gameboard-controller/bs-gameboard-controller';\nimport { BattleshipBoardRepository } from '../logic/bs-gameboard-repository/bs-gameboard-repository';\nimport {\n  BattleshipBuilder,\n  SHIP_SYMBOLS\n} from '../logic/bs-ship-builder/bs-ship-builder';\nimport { PlayerState } from './state-types';\n\n// 💭 --------------------------------------------------------------\n// 💭 Enumerations\n\nexport enum AnglesOfRotation {\n  Degrees0 = 0,\n  Degrees90 = 90,\n  Degrees180 = 180,\n  Degrees270 = 270\n};\nexport enum ShipType {\n  Battleship = 'battleship',\n  Carrier = 'carrier',\n  Cruiser = 'cruiser',\n  Destroyer = 'destroyer',\n  PatrolBoat = 'patrolBoat',\n  Submarine = 'submarine',\n};\n\n// 💭 --------------------------------------------------------------\n// 💭 Types\n\nexport type AngleOfRotation = null | AnglesOfRotation;\nexport type AxisArrayKey = `row-${number}` | `column-${number}`;\nexport type Coordinates = [number, number];\nexport type CoordinatesArray = Coordinates[];\nexport type OccupiedCoordinatesSet = Set<OccupiedCoordinatesSetMemberKey> | null;\nexport type OccupiedCoordinatesSetMemberKey = `[${number}, ${number}]`;\nexport type Fleet = {\n  [key in ShipType]?: BattleshipBuilder;\n};\nexport type FleetConfigs = {\n  [key in ShipType]?: ShipConfig;\n};\nexport type FleetCoordinates = {\n  [key in ShipType]?: OccupiedCoordinatesSet | null;\n};\n\nexport type InBoundRotationalPlacePieceParamsForFleet = {\n  [key in ShipType]?: RotationalPositionMap | null;\n};\nexport type Gameboard = symbol[][];\nexport type OutOfBounds = 'outOfBounds';\nexport type Orientation = 'horizontal' | 'vertical';\nexport type PositionArray = IPosition[];\nexport type RotatedCoordinatesValue = Coordinates | OutOfBounds;\nexport type RotatedPlacePieceParams = {\n  [Key in AnglesOfRotation]?: RotatedPlacePieceParamsValue;\n};\nexport type RotatedPlacePieceParamsValue = IPlacePieceParams | OutOfBounds;\nexport type RotatedPlacePieceConfigurations = IPlacePieceParams | OutOfBounds;\nexport type ShipConfig = {\n  type: ShipType;\n  version?: Version;\n};\nexport type ShipLength = 2 | 3 | 4 | 5;\nexport type ShipSymbols = {\n  [key in ShipType]: symbol; // Each key in ShipType maps to a symbol\n};\nexport type ShipSymbolValueArray = ShipSymbolValue[];\nexport type ShipSymbolValue = typeof SHIP_SYMBOLS[ShipType];\nexport type SizeLookupKey = `${ShipType}-${Version}`;\nexport type RotationalPositionMap = Map<AnglesOfRotation, IPlacePieceParams>;\nexport type Version = 1990 | 2002;\n\n// 💭 --------------------------------------------------------------\n// 💭 Interfaces\n\ninterface IGridGameboard<T> {\n  readonly board: T[][];\n  fillValue: T;\n};\nexport interface IGridGameboardSquare<T> extends IGridGameboard<T> {\n  boardSize: number;\n};\nexport interface IBattlehipFleetBuilderSet {\n  playerOneFleetBuilder: BattleshipFleetBuilder;\n  playerTwoFleetBuilder: BattleshipFleetBuilder;\n}\nexport interface IBattleshipGameboardBuilderSet {\n  playerOneBoardBuilder: BattleshipBoardBuilder;\n  playerTwoBoardBuilder: BattleshipBoardBuilder;\n}\nexport interface IBattleshipFleetBuilderSet {\n  playerOneFleetBuilder: BattleshipFleetBuilder;\n  playerTwoFleetBuilder: BattleshipFleetBuilder;\n}\nexport interface IBattleshipGameboardController extends IGridGameboardController {\n  playerState: Omit<PlayerState, 'gameboardController' | 'fleetBuilder'>;\n  getValidPositions(\n    shipPlacementConfigs: IShipPlacementConfigurations\n  ): IValidPositionsResult;\n  movePiece(ship: BattleshipBuilder, newBowCoordinates: Coordinates): void;\n  placePiece(options: IPlacePieceWrapperParams): void;\n  prettyPrint(): void;\n  removePiece(ship: BattleshipBuilder, resetInitialConfigs: boolean): void;\n  removeAllPieces(fleet: Fleet): void;\n  rotatePiece(ship: BattleshipBuilder): void;\n}\nexport interface IBattleshipGameboardControllerSet {\n  playerOneBoardController: BattleshipBoardController;\n  playerTwoBoardController: BattleshipBoardController;\n}\nexport interface IBattleshipGameboardRepositorySet {\n  playerOneBoardRepository: BattleshipBoardRepository;\n  playerTwoBoardRepository: BattleshipBoardRepository;\n}\ninterface IGridGameboardController {\n  placePiece(...args: any): void;\n  removePiece(...args: any): void;\n  removeAllPieces(...args: any): void;\n}\nexport interface IPlacementConfigurations {\n  coordinatesArray: CoordinatesArray | null;\n  orientation: Orientation | null;\n};\nexport interface IRotationalPivotConfigurations extends IPlacementConfigurations {\n  transientAngleOfRotation: AngleOfRotation;\n};\nexport interface IPlacePieceParams {\n  coordinates: Coordinates;\n  orientation: Orientation;\n};\nexport interface IPlacePieceWrapperParams extends IPlacePieceParams {\n  ship: BattleshipBuilder;\n};\nexport interface IPlacePieceCallbackParams extends IPlacePieceWrapperParams {\n  battleshipBoardBuilder: BattleshipBoardBuilder\n  battleshipBoardController: BattleshipBoardController;\n  battleshipBoardRepository: BattleshipBoardRepository;\n};\nexport interface IPosition {\n  bow: Coordinates; // [rowIndex, colIndex]\n  stern: Coordinates; // [rowIndex, colIndex]\n};\nexport interface IShipOptions {\n  hitCounter: number;\n  length: ShipLength;\n  type: ShipType;\n  version: Version;\n};\nexport interface IShipPlacementConfigurations {\n  orientation: Orientation;\n  shipLength: ShipLength;\n};\nexport interface ITestCaseShipHit {\n  expected: string; // Expected output\n  hits: number; // Function returning the string to be tested\n};\nexport interface ITestCaseValidPositions {\n  shipPlacementConfigs: IShipPlacementConfigurations;\n  validPositions: IValidPositionsResult;\n};\nexport interface IValidPlacementCallbackParams extends IShipPlacementConfigurations {\n  battleshipBoardBuilder: BattleshipBoardBuilder;\n  battleshipBoardController: BattleshipBoardController;\n};\nexport interface IValidPositionsResult {\n  [key: AxisArrayKey]: PositionArray;\n};","import {\n  Gameboard,\n  IGridGameboardSquare,\n} from '../../types/logic-types';\n\nexport class BattleshipBoardBuilder implements IGridGameboardSquare<symbol> {\n  private static readonly vacant: symbol = Symbol('VC');\n\n  private readonly _board: Gameboard;\n  private readonly _boardSize: number = 10;\n  private readonly _fillValue: symbol = BattleshipBoardBuilder.vacant;\n\n  constructor() {\n    this._board = Array.from({ length: this._boardSize }, () =>\n      Array(this._boardSize).fill(this._fillValue)\n    );\n  }\n\n  public get board(): Gameboard {\n    return this._board;\n  }\n\n  public get boardSize(): number {\n    return this._boardSize;\n  }\n\n  public get fillValue(): symbol {\n    return this._fillValue;\n  }\n}","import { BattleshipBuilder } from '../bs-ship-builder/bs-ship-builder';\nimport {\n  AngleOfRotation,\n  AnglesOfRotation,\n  AxisArrayKey,\n  Coordinates,\n  CoordinatesArray,\n  Fleet,\n  IBattleshipGameboardController,\n  IPlacePieceCallbackParams,\n  IPlacePieceParams,\n  IPlacePieceWrapperParams,\n  IPosition,\n  IShipPlacementConfigurations,\n  IValidPlacementCallbackParams,\n  IValidPositionsResult,\n  Orientation,\n  RotatedCoordinatesValue,\n  RotatedPlacePieceParams,\n  RotatedPlacePieceParamsValue,\n  ShipLength,\n  ShipType,\n  RotationalPositionMap,\n  PositionArray,\n} from '../../types/logic-types';\nimport { PlayerState } from '../../types/state-types';\nimport {\n  areCoordinatesInBounds,\n  arePositionsEqual,\n  createAxisArrayKey,\n  createPositionObject,\n  isAngleOfRotation,\n  isOutOfBounds,\n  isPlacePieceParams,\n  isPositionInBounds,\n  isPositionsArray,\n} from '../../utilities/logic-utilities';\nimport { getValidShipPositions } from './method-callbacks/get-valid-ship-positions/get-valid-ship-positions';\nimport { placeShip } from './method-callbacks/place-ship/place-ship';\n\nexport class BattleshipBoardController\n  implements IBattleshipGameboardController\n{\n  constructor(\n    public readonly playerState: Omit<PlayerState, 'gameboardController'>\n  ) {}\n\n  // 💭 --------------------------------------------------------------\n  // 💭 Public\n\n  public getValidPositions({\n    orientation,\n    shipLength,\n  }: IShipPlacementConfigurations): IValidPositionsResult {\n    const validPlacementArg: IValidPlacementCallbackParams = {\n      orientation,\n      shipLength,\n      battleshipBoardBuilder: this.playerState.gameboardBuilder,\n      battleshipBoardController: this,\n    };\n\n    return getValidShipPositions(validPlacementArg);\n  }\n\n  public getAllValidBowCoordinates(\n    orientation: Orientation,\n    shipLength: ShipLength\n  ): Set<Coordinates> {\n    let allValidBowCoordinates: Set<Coordinates> = new Set();\n    const validPositions: IValidPositionsResult = this.getValidPositions({\n      orientation,\n      shipLength,\n    });\n\n    for (const positionsInAxis of Object.values(validPositions)) {\n      if (!isPositionsArray(positionsInAxis))\n        throw new Error(\n          `Expected each value of validPositions to be an array of IPosition objects, but received: ${typeof positionsInAxis}.`\n        );\n\n      positionsInAxis.forEach((position) =>\n        allValidBowCoordinates.add(position.bow)\n      );\n    }\n\n    return allValidBowCoordinates;\n  }\n\n  public movePiece(\n    ship: BattleshipBuilder,\n    newBowCoordinates: Coordinates\n  ): void {\n    if (!ship.isPlaced()) {\n      console.warn(`Invalid Command: The ${ship.type} has not been placed.`);\n      return;\n    }\n\n    const currentOrientation: Orientation =\n      ship.currentplacementConfigurations.orientation!;\n\n    const newPosition: IPosition = createPositionObject(\n      newBowCoordinates,\n      currentOrientation,\n      ship.length\n    );\n\n    if (\n      !isPositionInBounds(\n        newPosition,\n        this.playerState.gameboardBuilder.boardSize\n      )\n    ) {\n      console.warn(\n        `Invalid Command: Position - Bow: [${newPosition.bow}] & Stern: [${newPosition.stern}] is out of bounds for the ${ship.type}.`\n      );\n\n      return;\n    }\n\n    const validPositions: IValidPositionsResult = this.getValidPositions({\n      orientation: currentOrientation,\n      shipLength: ship.length,\n    });\n\n    const isHorizontal: boolean = currentOrientation === 'horizontal';\n    const [x, y]: Coordinates = newBowCoordinates;\n    const axisArrayKey: AxisArrayKey = createAxisArrayKey(\n      isHorizontal ? y : x,\n      isHorizontal\n    );\n\n    const axisArray: PositionArray = validPositions[axisArrayKey];\n\n    const isNewPositionValid: boolean = axisArray.some(\n      (position: IPosition): boolean => arePositionsEqual(position, newPosition)\n    );\n\n    if (isNewPositionValid) {\n      const placementParameters: IPlacePieceWrapperParams = {\n        ship,\n        coordinates: newBowCoordinates,\n        orientation: currentOrientation,\n      };\n      const shouldResetShipRotationalData: boolean = true;\n\n      this.relocateShip(\n        ship,\n        placementParameters,\n        shouldResetShipRotationalData\n      );\n    } else {\n      console.warn(\n        `Invalid Command: Position - Bow: [${newPosition.bow}] & Stern: [${newPosition.stern}] is unavailable for the ${ship.type}.`\n      );\n    }\n  }\n\n  public placePiece({\n    ship,\n    coordinates,\n    orientation,\n  }: IPlacePieceWrapperParams): void {\n    const placeShipArg: IPlacePieceCallbackParams = {\n      ship,\n      coordinates,\n      orientation,\n      battleshipBoardController: this,\n      battleshipBoardBuilder: this.playerState.gameboardBuilder,\n      battleshipBoardRepository: this.playerState.gameboardRepository,\n    };\n\n    placeShip(placeShipArg);\n\n    this.setFleetRotatedPlacePieceParams(this.playerState.fleetBuilder.fleet);\n  }\n\n  public prettyPrint(): void {\n    console.table(\n      this.playerState.gameboardBuilder.board.map((row) =>\n        row.map((symbol) =>\n          symbol.description === 'VC' ? null : symbol.description\n        )\n      )\n    );\n  }\n\n  public receiveAttack(coordinates: Coordinates): void {\n    const attackedShip = this.getShipAt(coordinates);\n\n    if (!attackedShip) {\n      console.log('Missed me with that, bitch!');\n      return;\n    }\n\n    console.log(attackedShip);\n  }\n\n  public removePiece(\n    ship: BattleshipBuilder,\n    shouldResetShipRotationalData: boolean = true\n  ): void {\n    if (!this.isShipValidForRemoval(ship)) return;\n\n    const removeShipFromBoard = (shipCoordinates: CoordinatesArray): void => {\n      shipCoordinates.forEach(([x, y]) => {\n        this.playerState.gameboardBuilder.board[y][x] =\n          this.playerState.gameboardBuilder.fillValue;\n      });\n    };\n    const nullifyShipCoordinateSetValue = (shipType: ShipType): void => {\n      this.playerState.gameboardRepository.nullifyShipCoordinatesValue(\n        shipType\n      );\n    };\n    const resetShipConfigurations = (\n      ship: BattleshipBuilder,\n      shouldResetShipRotationalData: boolean\n    ): void => {\n      if (shouldResetShipRotationalData) {\n        this.playerState.gameboardRepository.nullifyShipValidRotationalParams(\n          ship.type\n        );\n      }\n\n      ship.resetConfigurations(shouldResetShipRotationalData);\n    };\n\n    const shipCoordinates: CoordinatesArray =\n      ship.currentplacementConfigurations.coordinatesArray!;\n\n    removeShipFromBoard(shipCoordinates);\n    nullifyShipCoordinateSetValue(ship.type);\n    resetShipConfigurations(ship, shouldResetShipRotationalData);\n  }\n\n  public removeAllPieces(fleet: Fleet): void {\n    if (!Object.keys(fleet).length) {\n      console.error(\n        'Invalid Command: No ships to remove - Fleet is empty or uninitialized.'\n      );\n      return;\n    }\n\n    for (const ship of Object.values(fleet)) {\n      this.removePiece(ship);\n    }\n  }\n\n  public rotatePiece(ship: BattleshipBuilder): void {\n    const getNextAngle = (\n      rotationalPositionMap: RotationalPositionMap,\n      currentAngle: AngleOfRotation\n    ): AngleOfRotation => {\n      if (currentAngle === null || currentAngle === undefined)\n        throw new Error(\"Current angle doesn't exist\");\n\n      const angles: AnglesOfRotation[] = Array.from(\n        rotationalPositionMap.keys()\n      );\n\n      return (\n        angles.find((angle) => angle > currentAngle) ??\n        AnglesOfRotation.Degrees0\n      );\n    };\n    const getMaxAngle = (\n      rotationalPositionMap: RotationalPositionMap\n    ): AngleOfRotation =>\n      Array.from(rotationalPositionMap.keys()).pop() ??\n      AnglesOfRotation.Degrees0;\n    const getNextPiecePlacementParams = (\n      ship: BattleshipBuilder,\n      rotationalPositionMap: RotationalPositionMap\n    ): IPlacePieceWrapperParams => {\n      const currentAngle: AngleOfRotation =\n        ship.rotationalPivotConfigurations.transientAngleOfRotation;\n\n      const maxAngle: AngleOfRotation = getMaxAngle(rotationalPositionMap);\n\n      if (currentAngle === maxAngle) {\n        const originalBowCoordinates: Coordinates =\n          ship.rotationalPivotConfigurations.coordinatesArray![0];\n        const originalOrientation: Orientation =\n          ship.rotationalPivotConfigurations.orientation!;\n\n        // set current degree of rotation\n        ship.rotationalPivotConfigurations.transientAngleOfRotation =\n          AnglesOfRotation.Degrees0;\n\n        return {\n          ship,\n          coordinates: originalBowCoordinates,\n          orientation: originalOrientation,\n        };\n      }\n\n      const nextAngle: AngleOfRotation = getNextAngle(\n        rotationalPositionMap,\n        currentAngle\n      );\n      const nextPlacePieceParams: IPlacePieceParams | undefined =\n        rotationalPositionMap.get(nextAngle!);\n\n      // set current degree of rotation\n      ship.rotationalPivotConfigurations.transientAngleOfRotation = nextAngle;\n\n      return {\n        ship,\n        coordinates: nextPlacePieceParams!.coordinates,\n        orientation: nextPlacePieceParams!.orientation,\n      };\n    };\n    const updateTransientPlacementParams = (\n      rotationalPositionMap: RotationalPositionMap\n    ): IPlacePieceWrapperParams => {\n      let nextPlacePieceParams: IPlacePieceWrapperParams =\n        getNextPiecePlacementParams(ship, rotationalPositionMap);\n\n      while (\n        ship.rotationalPivotConfigurations.transientAngleOfRotation !==\n        initialAngle\n      ) {\n        if (\n          this.isRotatedPositionValid(\n            nextPlacePieceParams.coordinates,\n            nextPlacePieceParams.orientation,\n            ship.rotationalPivotConfigurations.transientAngleOfRotation,\n            ship.length\n          )\n        ) {\n          break;\n        }\n        nextPlacePieceParams = getNextPiecePlacementParams(\n          ship,\n          rotationalPositionMap\n        );\n      }\n\n      return nextPlacePieceParams;\n    };\n\n    const rotationalPositionMap: RotationalPositionMap =\n      this.playerState.gameboardRepository.inBoundRotationalPlacePieceForFleet[\n        ship.type\n      ]!;\n\n    const initialAngle =\n      ship.rotationalPivotConfigurations.transientAngleOfRotation;\n    \n    /* \n    ┌──────────────────────────────────────────────────────────────────────────────┐\n    │ The coolest part of this whole transient concept is that it                  │\n    │ allows me to name a variable `finalPlacePieceParams`… which implies a         │\n    │ predetermined value, with a function named `updateTransientPlacementParams`… │\n    │ which implies something transient… while the semantic naming of the          │ \n    | key-value pair maintain sound logicality. I am intuit. - 💭                  │\n    └──────────────────────────────────────────────────────────────────────────────┘\n    */ \n\n    const finalPlacePieceParams: IPlacePieceWrapperParams =\n      updateTransientPlacementParams(rotationalPositionMap);\n\n    if (\n      ship.rotationalPivotConfigurations.transientAngleOfRotation ===\n      initialAngle\n    ) {\n      console.warn('No valid rotational position found.');\n      return;\n    }\n\n    const shouldResetShipRotationalData: boolean = false;\n\n    this.relocateShip(\n      ship,\n      finalPlacePieceParams,\n      shouldResetShipRotationalData\n    );\n  }\n\n  // 💭 --------------------------------------------------------------\n  // 💭 Private\n\n  private areCoordinatesVacant(coordinates: Coordinates): boolean {\n    const [x, y] = coordinates;\n    return (\n      this.playerState.gameboardBuilder.board[y][x] ===\n      this.playerState.gameboardBuilder.fillValue\n    );\n  }\n\n  // ? maybe use this with UI? (TODO: create return value type)\n  private getShipAt(coordinates: Coordinates) {\n    if (this.areCoordinatesVacant(coordinates)) return null;\n\n    return this.playerState.gameboardRepository.getShipDataAt(coordinates);\n  }\n\n  private isRotatedPositionValid = (\n    [x, y]: Coordinates,\n    orientation: Orientation,\n    angleOfRotation: AngleOfRotation,\n    shipLength: ShipLength\n  ): boolean => {\n    const isHorizontal = orientation === 'horizontal';\n    const gameboardSize = this.playerState.gameboardBuilder.boardSize;\n    const gameboard = this.playerState.gameboardBuilder.board;\n    const fillValue = this.playerState.gameboardBuilder.fillValue;\n    const newAxisIndexStart = isHorizontal ? x : y;\n\n    let i: number;\n    let axisIndexEnd: number;\n\n    if (\n      (!isHorizontal && angleOfRotation === AnglesOfRotation.Degrees90) ||\n      (isHorizontal && angleOfRotation === AnglesOfRotation.Degrees270) ||\n      angleOfRotation === AnglesOfRotation.Degrees0\n    ) {\n      i = 1;\n      axisIndexEnd = shipLength;\n    } else {\n      i = 0;\n      axisIndexEnd = shipLength - 1;\n    }\n\n    if (newAxisIndexStart + shipLength - 1 >= gameboardSize) return false;\n\n    for (i; i < axisIndexEnd; i++) {\n      const cellValue = isHorizontal\n        ? gameboard[y][x + i]\n        : gameboard[y + i][x];\n\n      if (cellValue !== fillValue) return false;\n    }\n\n    return true;\n  };\n\n  private getRotatedPlacePieceParams(ship: BattleshipBuilder) {\n    const applyOffsetToCoordinate = (\n      coordinate: number,\n      shipLength: ShipLength\n    ): number => {\n      const offset: number = shipLength - 1;\n      return coordinate - offset;\n    };\n    const determineRotatedOrientation = (\n      angleOfRotation: AngleOfRotation,\n      isHorizontal: boolean\n    ): Orientation => {\n      return isHorizontal\n        ? angleOfRotation === AnglesOfRotation.Degrees180\n          ? 'horizontal'\n          : 'vertical'\n        : angleOfRotation === AnglesOfRotation.Degrees180\n        ? 'vertical'\n        : 'horizontal';\n    };\n    const getRotatedBowCoordinates = (\n      angleOfRotation: AngleOfRotation,\n      isHorizontal: boolean,\n      [x, y]: Coordinates\n    ): RotatedCoordinatesValue => {\n      if (\n        angleOfRotation === AnglesOfRotation.Degrees0 ||\n        (angleOfRotation === AnglesOfRotation.Degrees90 && isHorizontal) ||\n        (angleOfRotation === AnglesOfRotation.Degrees270 && !isHorizontal)\n      ) {\n        return rotationalPivotBowCoordinates;\n      }\n\n      const rotatedBowCoordinates: Coordinates = isHorizontal\n        ? angleOfRotation === AnglesOfRotation.Degrees180\n          ? [applyOffsetToCoordinate(x, ship.length), y]\n          : [x, applyOffsetToCoordinate(y, ship.length)] // angleOfRotation === 270\n        : angleOfRotation === AnglesOfRotation.Degrees180\n        ? [x, applyOffsetToCoordinate(y, ship.length)]\n        : [applyOffsetToCoordinate(x, ship.length), y]; // angleOfRotation === 90\n\n      return areCoordinatesInBounds(\n        rotatedBowCoordinates,\n        this.playerState.gameboardBuilder.boardSize\n      )\n        ? rotatedBowCoordinates\n        : 'outOfBounds';\n    };\n    const createRotatedPiecePlacementParams = (\n      rotationalPivotBowCoordinates: Coordinates,\n      rotationalPivotOrientation: Orientation\n    ): RotatedPlacePieceParams => {\n      const isHorizontal = rotationalPivotOrientation === 'horizontal';\n\n      const rotatedPiecePlacementParams: RotatedPlacePieceParams = {};\n\n      const anglesOfRotation: AnglesOfRotation[] = [\n        AnglesOfRotation.Degrees0,\n        AnglesOfRotation.Degrees90,\n        AnglesOfRotation.Degrees180,\n        AnglesOfRotation.Degrees270,\n      ];\n\n      anglesOfRotation.forEach((angleOfRotation) => {\n        const coordinates: RotatedCoordinatesValue =\n          angleOfRotation === AnglesOfRotation.Degrees0\n            ? rotationalPivotBowCoordinates\n            : getRotatedBowCoordinates(\n                angleOfRotation,\n                isHorizontal,\n                rotationalPivotBowCoordinates\n              );\n\n        if (coordinates === 'outOfBounds') {\n          rotatedPiecePlacementParams[angleOfRotation] = 'outOfBounds';\n        } else {\n          rotatedPiecePlacementParams[angleOfRotation] = {\n            coordinates,\n            orientation:\n              angleOfRotation === AnglesOfRotation.Degrees0\n                ? rotationalPivotOrientation\n                : determineRotatedOrientation(angleOfRotation, isHorizontal),\n          };\n        }\n      });\n\n      return rotatedPiecePlacementParams;\n    };\n    const generateRotationalPositionMap = (\n      rotatedPiecePlacementParams: RotatedPlacePieceParams\n    ): RotationalPositionMap => {\n      const rotatedPlacePieceParams: RotationalPositionMap = new Map();\n\n      for (const angleOfRotationString of Object.keys(\n        rotatedPiecePlacementParams\n      )) {\n        const angleOfRotationToNum = +angleOfRotationString as AngleOfRotation;\n\n        if (!isAngleOfRotation(angleOfRotationToNum)) {\n          throw new Error(\n            `Invalid Type: \"${angleOfRotationString}\" doesn't conform to \"AngleOfRotation\".`\n          );\n        }\n\n        const rotatedPlacePieceParamsValue: RotatedPlacePieceParamsValue =\n          rotatedPiecePlacementParams[angleOfRotationToNum]!;\n\n        if (\n          !(\n            isPlacePieceParams(rotatedPlacePieceParamsValue) ||\n            isOutOfBounds(rotatedPlacePieceParamsValue)\n          )\n        ) {\n          throw new Error(\n            `Invalid Type: \"${rotatedPlacePieceParamsValue}\" doesn't conform to \"RotatedPlacePieceParams\".`\n          );\n        }\n\n        if (!isPlacePieceParams(rotatedPlacePieceParamsValue)) continue;\n\n        const { coordinates: bowCoordinates, orientation }: IPlacePieceParams =\n          rotatedPlacePieceParamsValue;\n\n        const placePieceParams: IPlacePieceParams = {\n          coordinates: bowCoordinates,\n          orientation,\n        };\n\n        rotatedPlacePieceParams.set(angleOfRotationToNum, placePieceParams);\n      }\n\n      return rotatedPlacePieceParams;\n    };\n\n    const rotationalPivotBowCoordinates: Coordinates =\n      ship.rotationalPivotConfigurations.coordinatesArray![0];\n    const rotationalPivotOrientation: Orientation =\n      ship.rotationalPivotConfigurations.orientation!;\n    const rotatedPiecePlacementParams: RotatedPlacePieceParams =\n      createRotatedPiecePlacementParams(\n        rotationalPivotBowCoordinates,\n        rotationalPivotOrientation\n      );\n\n    const rotatedPlacePieceParamsMap: RotationalPositionMap =\n      generateRotationalPositionMap(rotatedPiecePlacementParams);\n\n    return rotatedPlacePieceParamsMap;\n  }\n\n  private isShipValidForRemoval(ship: BattleshipBuilder): boolean {\n    if (\n      !ship.currentplacementConfigurations.coordinatesArray ||\n      !this.playerState.gameboardRepository.isShipPlaced(ship.type)\n    ) {\n      console.error(\n        `Error removing ship: ${ship.type} is missing coordinates or not in the fleet.`\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  private relocateShip(\n    ship: BattleshipBuilder,\n    placementParameters: IPlacePieceWrapperParams,\n    shouldResetShipRotationalData: boolean\n  ): void {\n    this.removePiece(ship, shouldResetShipRotationalData);\n    this.placePiece(placementParameters);\n  }\n\n  private setFleetRotatedPlacePieceParams(fleet: Fleet): void {\n    for (const ship of Object.values(fleet)) {\n      if (ship.isPlaced()) this.setShipRotatedPlacePieceParams(ship);\n    }\n  }\n\n  private setShipRotatedPlacePieceParams(ship: BattleshipBuilder): void {\n    const rotatedPlacePieceParams: RotationalPositionMap =\n      this.getRotatedPlacePieceParams(ship);\n\n    this.playerState.gameboardRepository.setShipValidRotationalParams(\n      ship,\n      rotatedPlacePieceParams\n    );\n  }\n}\n","import {\n  AxisArrayKey,\n  Coordinates,\n  Gameboard,\n  IValidPlacementCallbackParams,\n  IValidPositionsResult,\n  Orientation,\n  PositionArray,\n  ShipLength,\n} from '../../../../types/logic-types';\n\nexport function getValidShipPositions({\n  shipLength,\n  orientation,\n  battleshipBoardBuilder\n}: IValidPlacementCallbackParams): IValidPositionsResult {\n  const extractAxisArray = (\n    axisIndex: number,\n    orientation: Orientation,\n    gameboard: Gameboard\n  ): Array<symbol> => { // or symbol[]\n    \n    return orientation === 'horizontal'\n      ? gameboard[axisIndex] // Returns row #<axisIndex>\n      : gameboard.map(row => row[axisIndex]) // `y` values at column-<axisIndex>\n  };\n  const findValidPositionsInAxis = (\n    axisArray: Array<symbol>, // or symbol[]\n    isHorizontal: boolean,\n    axisIndex: number,\n    shipLength: ShipLength\n  ): PositionArray => {\n    let streak: number = 0;\n    let validAxisPositions: PositionArray = [];\n    \n    for (let i = 0; i < axisArray.length; i++) {\n      if (axisArray[i] === battleshipBoardBuilder.fillValue) {\n        streak++;\n        \n        if (streak >= shipLength) {\n          const bowPosition: Coordinates =\n            isHorizontal\n            ? [i - (shipLength - 1), axisIndex]\n            : [axisIndex, i - (shipLength - 1)];\n          \n          const sternPosition: Coordinates =\n            isHorizontal\n              ? [i, axisIndex]\n              : [axisIndex, i];\n\n          validAxisPositions.push({\n            bow: bowPosition,\n            stern: sternPosition,\n          });\n        }\n      } else {\n        streak = 0;\n      }\n    }\n    \n    return validAxisPositions;\n  };\n\n  const validPositionsPerAxis: IValidPositionsResult = {}; \n  const board: Gameboard = battleshipBoardBuilder.board;\n  const isHorizontal = orientation === 'horizontal';\n\n  for (let axisIndex = 0; axisIndex < board.length; axisIndex++) {\n    const axisArray: Array<symbol> = extractAxisArray(axisIndex, orientation, board);\n    const validPositions: PositionArray = findValidPositionsInAxis(\n      axisArray,\n      isHorizontal,\n      axisIndex,\n      shipLength\n    );\n    \n    const axisTemplate: AxisArrayKey =\n      isHorizontal\n        ? `row-${axisIndex}`\n        : `column-${axisIndex}`;\n    \n    validPositionsPerAxis[axisTemplate] = validPositions;\n  }\n\n  return validPositionsPerAxis;\n}","import {\n  AnglesOfRotation,\n  AxisArrayKey,\n  Coordinates,\n  OccupiedCoordinatesSet,\n  OccupiedCoordinatesSetMemberKey,\n  FleetCoordinates,\n  IBattlehipFleetBuilderSet,\n  IBattleshipFleetBuilderSet,\n  IBattleshipGameboardBuilderSet,\n  IBattleshipGameboardControllerSet,\n  IBattleshipGameboardRepositorySet,\n  IPlacePieceParams,\n  IPosition,\n  IShipPlacementConfigurations,\n  Orientation,\n  OutOfBounds,\n  RotatedCoordinatesValue,\n  ShipLength,\n  ShipType,\n  Version,\n  PositionArray\n} from \"../types/logic-types\";\nimport { BattleshipBoardBuilder } from \"../logic/bs-gameboard-builder/bs-gameboard-builder\";\nimport { BattleshipBoardController } from \"../logic/bs-gameboard-controller/bs-gameboard-controller\";\nimport { BattleshipBoardRepository } from \"../logic/bs-gameboard-repository/bs-gameboard-repository\";\nimport { BattleshipFleetBuilder } from \"../logic/bs-fleet-builder/bs-fleet-builder\";\nimport { areArraysEqual } from \"./random-utilities\";\n\n// 💭 --------------------------------------------------------------\n\n// * FACTORY FUNCTIONS\nexport function createBattleshipBoardController(\n  gameboardBuilder: BattleshipBoardBuilder,\n  gameboardRepository: BattleshipBoardRepository,\n  fleetBuilder: BattleshipFleetBuilder\n): BattleshipBoardController {\n  return new BattleshipBoardController({gameboardBuilder, gameboardRepository, fleetBuilder});\n}\nexport function createBattleshipControllerSet(\n  { playerOneBoardBuilder, playerTwoBoardBuilder}: IBattleshipGameboardBuilderSet,\n  { playerOneBoardRepository, playerTwoBoardRepository }: IBattleshipGameboardRepositorySet,\n  { playerOneFleetBuilder, playerTwoFleetBuilder }: IBattleshipFleetBuilderSet,\n): IBattleshipGameboardControllerSet {\n  return {\n    playerOneBoardController: createBattleshipBoardController(\n      playerOneBoardBuilder,\n      playerOneBoardRepository,\n      playerOneFleetBuilder\n    ),\n    playerTwoBoardController: createBattleshipBoardController(\n      playerTwoBoardBuilder,\n      playerTwoBoardRepository,\n      playerTwoFleetBuilder\n    ),\n  };\n}\nexport function createBattleshipBoardBuilderSet(): IBattleshipGameboardBuilderSet {\n  return {\n    playerOneBoardBuilder: new BattleshipBoardBuilder(),\n    playerTwoBoardBuilder: new BattleshipBoardBuilder(),\n  };\n}\nexport function createBattleshipBoardRepositorySet(): IBattleshipGameboardRepositorySet {\n  return {\n    playerOneBoardRepository: new BattleshipBoardRepository(),\n    playerTwoBoardRepository: new BattleshipBoardRepository(),\n  };\n}\nexport function createBattleshipFleetBuilderSet(\n  version: Version = 2002\n): IBattlehipFleetBuilderSet {\n  const createBattleshipFleetBuilder =\n    version === 2002\n      ? BattleshipFleetBuilder.createHasbroFleet\n      : BattleshipFleetBuilder.createMBFleet;\n\n  return {\n    playerOneFleetBuilder: createBattleshipFleetBuilder(),\n    playerTwoFleetBuilder: createBattleshipFleetBuilder(),\n  };\n}\n\n// 💭 --------------------------------------------------------------\n\n// * GENERAL HELPER FUNCTIONS\nexport function createAxisArrayKey(\n  axisIndex: number,\n  isHorizontal: boolean\n): AxisArrayKey {\n  return isHorizontal ? `row-${axisIndex}` : `column-${axisIndex}`;\n}\nexport function createPositionObject(\n  [x, y]: Coordinates,\n  orientation: Orientation,\n  shipLength: ShipLength\n): IPosition {\n  const isHorizontal = orientation === 'horizontal';\n  const bowCoordinates: Coordinates = [x, y];\n  const sternCoordinates: Coordinates = isHorizontal\n    ? [x + shipLength - 1, y]\n    : [x, y + shipLength - 1];\n\n  return {\n    bow: bowCoordinates,\n    stern: sternCoordinates,\n  };\n}\nexport function createShipConfigurations(\n  shipLength: ShipLength,\n  orientation: Orientation\n): IShipPlacementConfigurations {\n  return {\n    orientation,\n    shipLength,\n  };\n}\n\n// 💭 --------------------------------------------------------------\n\n// * BOUND CHECK HELPER FUNCTIONS\nexport const isCoordinateInBounds = (coordinate: number, boardSize: number): boolean =>\n  coordinate >= 0 && coordinate < boardSize;\nexport const areCoordinatesInBounds = (coordinates: Coordinates, boardSize: number): boolean => {\n  return coordinates.every((coordinate) => isCoordinateInBounds(coordinate, boardSize)); \n}\nexport const isPositionInBounds = (position: IPosition, boardSize: number): boolean => {\n  return areCoordinatesInBounds(position.bow, boardSize) && areCoordinatesInBounds(position.stern, boardSize);\n};\n\n// 💭 --------------------------------------------------------------\n\n// * UTILITY FUNCTIONS\nexport const arePositionsEqual = (\n  positionOne: IPosition,\n  positionTwo: IPosition\n): boolean => {\n  return (\n    areArraysEqual(positionOne.bow, positionTwo.bow) &&\n    areArraysEqual(positionOne.stern, positionTwo.stern)\n  );\n};\n\n// 💭 --------------------------------------------------------------\n\n// * TYPE GUARDS\nexport function isAngleOfRotation(\n  value: unknown\n): value is AnglesOfRotation {\n  return Object.values(AnglesOfRotation).includes(value as ShipType);\n};\nexport const isCoordinates = (value: unknown): value is Coordinates => {\n  if (!Array.isArray(value) || value.length !== 2) return false;\n\n  return value.every((coordinate) => typeof coordinate === 'number');\n};\nexport const isOccupiedCoordinatesSet = (value: unknown): value is OccupiedCoordinatesSet => {\n  if (value === null) return true;\n  if (!(value instanceof Set)) return false;\n\n  for (const member of value) {\n    if (!isOccupiedCoordinatesSetMemberKey(member)) {\n      return false;\n    }\n  }\n\n  return true;\n};\nexport const isFleetCoordinates = (\n  value: unknown\n): value is FleetCoordinates => {\n  if (typeof value !== 'object' || value === null) return false;\n\n  for (const key in value) {\n    if (!Object.values(ShipType).includes(key as ShipType)) {\n      return false\n    }\n\n    const OccupiedCoordinatesSetOrNull = (value as FleetCoordinates)[\n      key as ShipType\n    ];\n\n    if (OccupiedCoordinatesSetOrNull !== null && !isOccupiedCoordinatesSet(OccupiedCoordinatesSetOrNull)) {\n      return false;\n    }\n  }\n  return true;\n};\nexport const isPlainObject = (value: unknown): value is object => {\n  if (typeof value !== 'object' || value === null) return false;\n\n  const proto = Object.getPrototypeOf(value);\n  return proto === Object.prototype || proto === null;\n  // ? Why `proto === null`: Object.create(null) is a valid plain object.\n}\nexport const isOrientation = (value: unknown): value is Orientation => {\n  if (typeof value !== 'string') return false;\n  return ['horizontal', 'vertical'].includes(value);\n}\nexport const isOutOfBounds = (value: unknown): value is OutOfBounds => {\n  return (value) === 'outOfBounds';\n};\nexport const isPlacePieceParams = (\n  value: unknown\n): value is IPlacePieceParams => {\n  if (typeof value !== 'object' || value === null) return false;\n\n  if (!isCoordinates((value as IPlacePieceParams).coordinates)) return false;\n\n  return true;\n};\nexport const isPosition = (value: unknown): value is IPosition => {\n  if (!isPlainObject(value)) return false;\n\n  const { bow, stern } = value as IPosition;\n\n  return isCoordinates(bow) && isCoordinates(stern);\n};\nexport const isPositionsArray = (value: unknown): value is PositionArray => {\n  if (!Array.isArray(value)) return false;\n\n  return value.every(position => isPosition(position));\n};\nexport const isOccupiedCoordinatesSetMemberKey = (value: unknown): value is OccupiedCoordinatesSetMemberKey => {\n  if (typeof value !== 'string') return false;\n\n  const match = value.match(/^\\[\\d{1}, \\d{1}\\]$/);\n  return match !== null;\n};\nexport const isRotatedCoordinatesValue = (\n  value: unknown\n): value is RotatedCoordinatesValue => {\n  return isCoordinates(value) || isOutOfBounds(value);\n};\nexport const isShipLength = (value: unknown): value is ShipLength => {\n  return typeof value === 'number' && [2, 3, 4, 5].includes(value);\n}\nexport const isShipType = (\n  value: unknown\n): value is ShipType => {\n  return Object.values(ShipType).includes(value as ShipType);\n};\n\n// 💭 --------------------------------------------------------------\n\nexport const isNotNull = <T>(value: T | null | undefined): value is T => {\n  return value !== null && value !== undefined;\n}","import {\n  AnglesOfRotation,\n  AxisArrayKey,\n  Coordinates,\n  CoordinatesArray,\n  Gameboard,\n  IPlacementConfigurations,\n  IPlacePieceCallbackParams,\n  IPosition,\n  IShipPlacementConfigurations,\n  IValidPositionsResult,\n  Orientation,\n  ShipLength,\n  ShipSymbolValue,\n  ShipType,\n} from '../../../../types/logic-types';\nimport { arePositionsEqual, createPositionObject, isCoordinateInBounds } from '../../../../utilities/logic-utilities';\nimport { BattleshipBuilder } from '../../../bs-ship-builder/bs-ship-builder';\n\nexport function placeShip({\n  ship,\n  coordinates,\n  orientation,\n  battleshipBoardController,\n  battleshipBoardBuilder,\n  battleshipBoardRepository\n}: IPlacePieceCallbackParams): void {  \n  const shipLength: ShipLength = ship.length;\n  const [bowX, bowY]: Coordinates = coordinates;\n  const isHorizontal: boolean = orientation === 'horizontal';\n  const axisStart: number = isHorizontal ? bowX : bowY;\n  const axisEnd = axisStart + shipLength - 1;\n\n  if (!isCoordinateInBounds(axisEnd, battleshipBoardBuilder.boardSize)) {\n    const errorMessage: string = `Invalid Command: The ship placement attempt with the following configurations is out of bounds - Coordinates: ${coordinates}, Length: ${ship.length}, Orientation: ${orientation}.`;\n    throw new Error(errorMessage);\n  };\n\n  if (ship.isPlaced()) {\n    console.warn(`Invalid Command: The ${ship.type} has already been placed.`);\n    return;\n  };\n\n  const isPositionValid = (\n    position: IPosition,\n    shipConfigurations: IShipPlacementConfigurations,\n    axisArrayKey: AxisArrayKey\n  ): boolean => {\n    const validPositions: IValidPositionsResult =\n      battleshipBoardController.getValidPositions(shipConfigurations);\n\n    return validPositions[axisArrayKey].some((validPosition: IPosition) =>\n      arePositionsEqual(position, validPosition)\n    );\n  };\n\n  const position: IPosition = createPositionObject(\n    coordinates,\n    orientation,\n    shipLength,\n  );\n\n  const shipConfigurations: IShipPlacementConfigurations = {\n    shipLength,\n    orientation\n  };\n  const axisArrayKey: AxisArrayKey = isHorizontal\n    ? `row-${bowY}`\n    : `column-${bowX}`; \n    \n  if (isPositionValid(position, shipConfigurations, axisArrayKey)) {\n    const getPlacementCoordinates = (\n      validPosition: IPosition,\n      isHorizontal: Boolean\n    ): CoordinatesArray => {\n      const placementCoordinates: CoordinatesArray = [];\n\n      const [bowX, bowY]: Coordinates = validPosition.bow;\n      const [sternX, sternY]: Coordinates = validPosition.stern;\n\n      const primary: number = isHorizontal\n        ? bowY\n        : bowX;\n      const axisStart: number = isHorizontal\n        ? bowX\n        : bowY;\n      const axisEnd: number = isHorizontal\n        ? sternX\n        : sternY;\n\n      for (let i = axisStart; i <= axisEnd; i++) {\n        placementCoordinates.push(isHorizontal ? [i, primary] : [primary, i]);\n      }\n\n      return placementCoordinates;\n    };\n    const placeOnBoard = (\n      ship: BattleshipBuilder,\n      shipPlacementCoordinates: CoordinatesArray\n    ): void => {\n      const gameboard: Gameboard = battleshipBoardBuilder.board;\n      const shipSymbol: ShipSymbolValue = ship.symbol;\n\n      shipPlacementCoordinates.forEach((coordinates) => {\n        const [x, y]: Coordinates = coordinates;\n        gameboard[y][x] = shipSymbol;\n      });\n    };\n    const setShipConfigurations = (\n      ship: BattleshipBuilder,\n      coordinatesArray: CoordinatesArray,\n      orientation: Orientation\n    ): void => {\n      const placementConfigurations: IPlacementConfigurations = { coordinatesArray, orientation };\n      \n      ship.currentplacementConfigurations = placementConfigurations;\n\n      if (Object.values(ship.rotationalPivotConfigurations).every(value => value === null)) {\n        ship.rotationalPivotConfigurations = {\n          ...placementConfigurations,\n          transientAngleOfRotation: AnglesOfRotation.Degrees0,\n        }\n      }      \n    };\n    const updateOccupiedCoordinatesSet = (\n      shipType: ShipType,\n      placementCoordinates: CoordinatesArray\n    ): void => {\n      battleshipBoardRepository.addShipToFleetCoordinates(\n        shipType,\n        placementCoordinates\n      );\n    };\n\n    const placementCoordinates: CoordinatesArray = getPlacementCoordinates(\n      position,\n      isHorizontal\n    );\n\n    placeOnBoard(ship, placementCoordinates);\n    setShipConfigurations(\n      ship,\n      placementCoordinates,\n      orientation\n    );\n    updateOccupiedCoordinatesSet(ship.type, placementCoordinates);\n  } else {\n    const errorMessage: string = `Invalid Command: \"${JSON.stringify(\n      position\n    )}\" is unavailable for ship with Size: ${shipLength} and Orientation: ${orientation}.`;\n\n    throw new Error(errorMessage);\n  }\n}\n","import { BattleshipBuilder } from \"../bs-ship-builder/bs-ship-builder\";\nimport {\n  Coordinates,\n  CoordinatesArray,\n  OccupiedCoordinatesSetMemberKey,\n  FleetCoordinates,\n  InBoundRotationalPlacePieceParamsForFleet,\n  ShipType,\n  RotationalPositionMap\n} from \"../../types/logic-types\";\nimport { isOccupiedCoordinatesSet, isFleetCoordinates, isShipType } from \"../../utilities/logic-utilities\";\n\nexport class BattleshipBoardRepository {\n  private readonly _fleetCoordinates: FleetCoordinates = {};\n  private readonly _inBoundRotationalPlacePieceParamsForFleet: InBoundRotationalPlacePieceParamsForFleet = {};\n\n  // 💭 --------------------------------------------------------------\n\n  public get fleetCoordinates(): FleetCoordinates {\n    return this._fleetCoordinates;\n  }\n\n  public get inBoundRotationalPlacePieceForFleet(): InBoundRotationalPlacePieceParamsForFleet {\n    return this._inBoundRotationalPlacePieceParamsForFleet;\n  }\n\n  public addShipToFleetCoordinates(\n    shipType: ShipType,\n    placementCoordinates: CoordinatesArray\n  ): void {\n    if (!this.fleetCoordinates[shipType]) {\n      this.fleetCoordinates[shipType] = new Set();\n    }\n\n    placementCoordinates.forEach((coordinates: Coordinates) => {\n      const [x, y]: Coordinates = coordinates;\n      const setMemberTemplate: OccupiedCoordinatesSetMemberKey = `[${x}, ${y}]`;\n      this.fleetCoordinates[shipType]!.add(setMemberTemplate);\n    });\n  }\n\n  public getShipDataAt(coordinates: Coordinates) {\n    if (!isFleetCoordinates(this.fleetCoordinates)) {\n      throw new Error(\n        `Invalid Type: \"${this.fleetCoordinates}\" doesn't conform to \"FleetCoordinates\".`\n      );\n    }\n\n    const validateTypes = (shipType: unknown, OccupiedCoordinatesSet: unknown): void => {\n      if (!isShipType(shipType))\n        throw new Error(\n          `Invalid Type: \"${shipType}\" doesn't conform to \"ShipType\".`\n        );\n      if (!isOccupiedCoordinatesSet(OccupiedCoordinatesSet))\n        throw new Error(\n          `Invalid Type: \"${OccupiedCoordinatesSet}\" doesn't conform to \"OccupiedCoordinatesSet\".`\n        );\n    };\n\n    const [x, y]: Coordinates = coordinates;\n    const coordinateSetMemberKey: OccupiedCoordinatesSetMemberKey = `[${x}, ${y}]`;\n\n    for (const [shipType, occupiedCoordinatesSet] of Object.entries(this.fleetCoordinates)) {\n      if (!isShipType(shipType)) throw new Error('');\n      if (!isOccupiedCoordinatesSet(occupiedCoordinatesSet)) throw new Error();\n\n      validateTypes(shipType, occupiedCoordinatesSet);\n\n      if (occupiedCoordinatesSet?.has(coordinateSetMemberKey)) {\n        return {\n          shipType,\n          occupiedCoordinatesSet\n        }\n      }\n    }\n  }\n\n  public isShipPlaced(shipType: ShipType): boolean {\n    return this.fleetCoordinates[shipType] !== null;\n  }\n\n  public nullifyShipCoordinatesValue(shipType: ShipType): void {\n    this.fleetCoordinates[shipType] = null;\n  }\n\n  public nullifyShipValidRotationalParams(shipType: ShipType): void {\n    this.inBoundRotationalPlacePieceForFleet[shipType] = null;\n  }\n  \n  public setShipValidRotationalParams(\n    ship: BattleshipBuilder,\n    validRotatedPlacePieceParams: RotationalPositionMap\n  ): void {\n    if (!this._inBoundRotationalPlacePieceParamsForFleet[ship.type])\n      this._inBoundRotationalPlacePieceParamsForFleet[ship.type] =\n        validRotatedPlacePieceParams;\n  }\n}","import {\n  IPlacementConfigurations,\n  IRotationalPivotConfigurations,\n  IShipOptions,\n  ShipLength,\n  ShipSymbols,\n  ShipSymbolValue,\n  ShipType,\n  SizeLookupKey,\n  Version\n} from '../../types/logic-types';\n\nexport const SHIP_SYMBOLS: ShipSymbols = {\n  [ShipType.Carrier]: Symbol('CA'),\n  [ShipType.Battleship]: Symbol('BS'),\n  [ShipType.Cruiser]: Symbol('CR'),\n  [ShipType.Submarine]: Symbol('SB'),\n  [ShipType.Destroyer]: Symbol('DD'),\n  [ShipType.PatrolBoat]: Symbol('PB')\n} as const;\n\nconst sizeLookup: Record<SizeLookupKey, ShipLength | undefined> = {\n  'battleship-1990': 4,\n  'battleship-2002': 4,\n  'carrier-1990': 5,\n  'carrier-2002': 5,\n  'cruiser-1990': 3,\n  'cruiser-2002': undefined, // Explicitly mark missing values\n  'destroyer-1990': 2,\n  'destroyer-2002': 3,\n  'patrolBoat-1990': undefined,\n  'patrolBoat-2002': 2,\n  'submarine-1990': 3,\n  'submarine-2002': 3,\n};\n\nexport class BattleshipBuilder implements IShipOptions {\n  public readonly length: ShipLength;\n  public readonly seaworthy: boolean = true;\n  public readonly symbol: ShipSymbolValue;\n  public rotationalPivotConfigurations: IRotationalPivotConfigurations = {\n    transientAngleOfRotation: null,\n    coordinatesArray: null,\n    orientation: null\n  };\n  public currentplacementConfigurations: IPlacementConfigurations = {\n    coordinatesArray: null,\n    orientation: null\n  };\n  public isPlaced = (): boolean => this.currentplacementConfigurations.coordinatesArray !== null;\n  private _hitCounter: number = 0;\n\n  constructor(public readonly type: ShipType, public readonly version: Version = 2002) {\n    this.symbol = SHIP_SYMBOLS[type];\n\n    const key: SizeLookupKey = `${type}-${version}`;\n    const length: ShipLength | undefined = sizeLookup[key]; // Access using the typed key\n    if (length === undefined) {\n      throw new Error(`Invalid Command: ship type/version combination: ${key}.`);\n    }\n\n    this.length = length;\n  }\n\n  public hit = (): string => {\n    if (!this.isSeaworthy()) return 'This ship has already perished.';\n    \n    this._hitCounter++;\n    return `Hit registered. Hit count: ${this.hitCounter}.`; // Return the updated hit counter\n  };\n\n  isSeaworthy = (): boolean => this.hitCounter < this.length;\n\n  public resetConfigurations = (shouldResetShipRotationalData: boolean) => {\n    const placementConfigurations = { coordinatesArray: null, orientation: null };\n\n    this.currentplacementConfigurations = placementConfigurations;\n\n    if (shouldResetShipRotationalData === true) {\n      this.rotationalPivotConfigurations = {\n        ...placementConfigurations,\n        transientAngleOfRotation: null\n      };\n    }\n  };\n\n  public get hitCounter(): number {\n    return this._hitCounter;\n  }\n}","import {\n  Fleet,\n  FleetConfigs,\n  ShipType,\n  Version,\n} from '../../types/logic-types';\nimport {\n  BattleshipBuilder,\n} from '../bs-ship-builder/bs-ship-builder';\nimport { isShipType } from '../../utilities/logic-utilities';\n\nexport class BattleshipFleetBuilder {\n  private constructor(public readonly fleet: Fleet, public readonly version: Version) {}\n\n  private static createFleet(fleetConfigs: FleetConfigs): Fleet {\n    const fleet: Fleet = {};\n\n    for (const [shipType, config] of Object.entries(fleetConfigs)) {\n      if (config && isShipType(shipType)) {\n        fleet[shipType] = new BattleshipBuilder(config.type, config.version);\n      }\n    }\n\n    return fleet;\n  }\n\n  public static createHasbroFleet(): BattleshipFleetBuilder {\n    // 2002\n    return new BattleshipFleetBuilder(\n      BattleshipFleetBuilder.createFleet({\n        carrier: { type: ShipType.Carrier, version: 2002 },\n        battleship: { type: ShipType.Battleship, version: 2002 },\n        destroyer: { type: ShipType.Destroyer, version: 2002 },\n        submarine: { type: ShipType.Submarine, version: 2002 },\n        patrolBoat: { type: ShipType.PatrolBoat, version: 2002 },\n      }),\n      2002\n    );\n  }\n\n  public static createMBFleet(): BattleshipFleetBuilder {\n    // 1990\n    return new BattleshipFleetBuilder(\n      BattleshipFleetBuilder.createFleet({\n        carrier: { type: ShipType.Carrier, version: 1990 },\n        battleship: { type: ShipType.Battleship, version: 1990 },\n        cruiser: { type: ShipType.Cruiser, version: 1990 },\n        submarine: { type: ShipType.Submarine, version: 1990 },\n        destroyer: { type: ShipType.Destroyer, version: 1990 },\n      }),\n      1990\n    );\n  }\n\n  getShip(shipType: ShipType): BattleshipBuilder {\n    const ship = this.fleet[shipType];\n\n    if (!ship) {\n      throw new Error(\n        `Invalid Command: Ship of type ${shipType} not found in fleet.`\n      );\n    }\n\n    return ship;\n  }\n}","export const areArraysEqual = <T>(arrayOne: T[], arrayTwo: T[]) =>\n  arrayOne.length === arrayTwo.length\n  &&\n  arrayOne.every((value, index) => value === arrayTwo[index]);\n\nexport const getConvertedTypeFromAttr = <T extends string>(\n  element: HTMLElement,\n  attribute: string,\n  typeGuard: (value: string) => value is T\n): T => {\n  const attrValue = element.getAttribute(attribute);\n  if (!attrValue || !typeGuard(attrValue)) {\n    throw new Error(`Invalid or missing attribute: ${attribute}`);\n  }\n  return attrValue;\n};\n\nexport const getRandomInt = (min: number, max: number): number =>\n  Math.floor(Math.random() * (max - min + 1)) + min;\n\nexport const isEmptyObject = (obj: Record<PropertyKey, unknown>): boolean => {\n  return (\n    Object.keys(obj).length === 0 &&\n    Object.getOwnPropertySymbols(obj).length === 0\n  );\n};\n\nexport type Range<N extends number, Acc extends number[] = []> =\n  Acc['length'] extends N\n    ? Acc[number]\n    : Range<N, [...Acc, Acc['length']]>;\n    \n\nexport const createElement = <K extends keyof HTMLElementTagNameMap>(\n  tag: K,\n  classes: string[] = [],\n  attributes: Record<string, string> = {}\n): HTMLElementTagNameMap[K] => {\n  const element: HTMLElementTagNameMap[K] = document.createElement(tag);\n  classes.forEach((cls) => element.classList.add(cls));\n  Object.entries(attributes).forEach(([key, value]) =>\n    element.setAttribute(key, value)\n  );\n  return element;\n};\n\nexport const createIdentifier = (id: string, playerType: string, identifier?: string): string => {\n  if (playerType !== 'player' && playerType !== 'bot')\n    throw new Error('`playerType` must be either \"player\" or \"bot\"');\n\n  const extractedNumberString: string = id.split(playerType)[1].toLowerCase();\n  return identifier\n    ? `${playerType}-${extractedNumberString}-${identifier}`\n    : `${playerType}-${extractedNumberString}`;\n}","import { PlayerState } from \"../types/state-types\";\nimport {\n  createBattleshipBoardBuilderSet,\n  createBattleshipBoardRepositorySet,\n  createBattleshipControllerSet,\n  createBattleshipFleetBuilderSet,\n} from \"../utilities/logic-utilities\";\n\nconst { playerOneBoardBuilder, playerTwoBoardBuilder } =\n  createBattleshipBoardBuilderSet();\n\nconst { playerOneBoardRepository, playerTwoBoardRepository } =\n  createBattleshipBoardRepositorySet();\n\nconst { playerOneFleetBuilder, playerTwoFleetBuilder } =\n    createBattleshipFleetBuilderSet();\n\nconst { playerOneBoardController, playerTwoBoardController } =\n  createBattleshipControllerSet(\n    { playerOneBoardBuilder, playerTwoBoardBuilder },\n    { playerOneBoardRepository, playerTwoBoardRepository },\n    { playerOneFleetBuilder, playerTwoFleetBuilder }\n  );\n\nconst playerOne: PlayerState = {\n  gameboardBuilder: playerOneBoardBuilder,\n  gameboardController: playerOneBoardController,\n  gameboardRepository: playerOneBoardRepository,\n  fleetBuilder: playerOneFleetBuilder\n};\n\nconst playerTwo: PlayerState = {\n  gameboardBuilder: playerTwoBoardBuilder,\n  gameboardController: playerTwoBoardController,\n  gameboardRepository: playerTwoBoardRepository,\n  fleetBuilder: playerTwoFleetBuilder\n};\n\nexport const players = {\n  playerOne,\n  playerTwo\n};","import {\n  Coordinates,\n  Fleet,\n  IPlacePieceWrapperParams,\n  IShipPlacementConfigurations,\n  Orientation,\n  IPosition,\n  PositionArray,\n  AxisArrayKey,\n} from '../types/logic-types';\nimport {\n  areArraysEqual,\n  getRandomInt,\n} from '../utilities/random-utilities';\nimport { BattleshipBuilder } from '../logic/bs-ship-builder/bs-ship-builder';\nimport { BattleshipBoardController } from '../logic/bs-gameboard-controller/bs-gameboard-controller';\nimport { isShipType } from '../utilities/logic-utilities';\n\nexport function randomizeBSGameboard(\n  gameboardController: BattleshipBoardController, fleet: Fleet\n) {\n  if (!gameboardController)\n    throw new Error('Invalid Command: `gameboardController` is required to randomize the gameboard.');\n  if (!fleet)\n    throw new Error('Invalid Command: `fleet` is required to randomize the gameboard.');\n\n  const generateRandomCoordinates = (\n    shipLength: number,\n    boardSize: number\n  ): Coordinates => {\n    const max: number = boardSize - shipLength;\n    const xRandom: number = getRandomInt(0, max);\n    const yRandom: number = getRandomInt(0, max);\n\n    return [xRandom, yRandom];\n  };\n  const generateRandomOrientation = (): Orientation => {\n    return Math.random() < 0.5 ? 'horizontal' : 'vertical';\n  };\n  const areCoordinatesValid = (\n    coordinates: Coordinates,\n    ship: BattleshipBuilder,\n    orientation: Orientation\n  ): boolean => {\n    const validPositionsParams: IShipPlacementConfigurations = {\n      shipLength: ship.length,\n      orientation,\n    };\n\n    const validPositions =\n      gameboardController.getValidPositions(validPositionsParams);\n    const [bowX, bowY]: Coordinates = coordinates;\n    const isHorizontal: boolean = orientation === 'horizontal';\n    const axisIndex: number = isHorizontal ? bowY : bowX;\n\n    const axisArrayKey: AxisArrayKey = isHorizontal\n      ? `row-${axisIndex}`\n      : `column-${axisIndex}`;\n    const axisArray: PositionArray = validPositions[axisArrayKey];\n\n    return axisArray.some((position: IPosition) =>\n      areArraysEqual(position.bow, coordinates)\n    );\n  }; \n  const getValidCoordinatesRecursively = (\n    ship: BattleshipBuilder,\n    orientation: Orientation,\n    boardSize: number,\n    attempts: number = 0\n  ): Coordinates => {\n    if (attempts > 100)\n      throw new Error(`Max recursion depth exceeded when placing the ${ship.type}.`);\n\n    const coordinates: Coordinates = generateRandomCoordinates(\n      ship.length,\n      boardSize\n    );\n\n    return areCoordinatesValid(coordinates, ship, orientation)\n      ? coordinates\n      : getValidCoordinatesRecursively(\n          ship,\n          orientation,\n          boardSize,\n          attempts + 1\n        )\n  };\n\n  const boardSize: number = 10;\n\n  for (const shipType in fleet) {\n    if (!isShipType(shipType)) throw new Error(`Invalid Type: \"${shipType}\" doesn't conform to \"ShipType\".`);\n\n    const ship: BattleshipBuilder = fleet[shipType]!;\n    const randomOrientation: Orientation = generateRandomOrientation();\n\n    const coordinates: Coordinates = getValidCoordinatesRecursively(\n      ship,\n      randomOrientation,\n      boardSize\n    );\n\n    const placePieceParams: IPlacePieceWrapperParams = {\n      ship,\n      coordinates,\n      orientation: randomOrientation,\n    };\n    \n    gameboardController.placePiece(placePieceParams);\n  }\n}\n","// 💭 Pub-sub/Mediator Pattern\n\ntype Listener<T = any> = (data: T) => void;\n\nclass EventBus {\n  private events: Record<string, Array<Listener>> = {};\n\n  /**\n   * Register a listener for a specific event.\n   * @param eventName - The name of the event.\n   * @param fn - The callback function to register.\n   */\n  on<T>(eventName: string, fn: Listener<T>): void {\n    this.events[eventName] = this.events[eventName] || [];\n    this.events[eventName].push(fn);\n  }\n\n  /**\n   * Unregister a listener for a specific event.\n   * @param eventName - The name of the event.\n   * @param fn - The callback function to remove.\n   */\n  off<T>(eventName: string, fn: Listener<T>): void {\n    if (this.events[eventName]) {\n      this.events[eventName] = this.events[eventName].filter(\n        (listener) => listener !== fn\n      );\n    }\n  }\n\n  /**\n   * Emit an event, calling all listeners registered for it.\n   * @param eventName - The name of the event.\n   * @param data - The data to pass to the listeners (optional).\n   */\n  emit<T>(eventName: string, data?: T): void {\n    if (this.events[eventName]) {\n      this.events[eventName].forEach((fn) => fn(data));\n    }\n  }\n}\n\nconst GlobalEventBus = new EventBus();\n\nexport default GlobalEventBus;","import './styles/sass/index.scss'\nimport { players } from './typescript/state/player-state';\nimport { randomizeBSGameboard } from './typescript/setup/randomize-bs-gameboard';\n\nimport { BotGameboardComponent } from './typescript/components/bot-gameboard-component/bot-gameboard-component';\nimport { PlayerGameboardComponent } from './typescript/components/player-gameboard-component/player-gameboard-component';\nimport { ShipShufflerButtonComponent } from './typescript/components/ship-shuffler-component/ship-shuffler-component';\n\nfunction init() {\n  const randomizeBSGameboards = () => {\n    randomizeBSGameboard(\n      players.playerOne.gameboardController,\n      players.playerOne.fleetBuilder.fleet\n    );\n    randomizeBSGameboard(\n      players.playerTwo.gameboardController,\n      players.playerTwo.fleetBuilder.fleet\n    );\n  };\n\n  // benchmark board set randomization\n  console.time('randomizeBSGameboards');\n  randomizeBSGameboards();\n  console.timeEnd('randomizeBSGameboards');\n\n  // 💭 --------------------------------------------------------------\n  // 💭 Player\n  const playerGameboardComponent = new PlayerGameboardComponent(\n    'playerOne',\n    players.playerOne\n  );\n  playerGameboardComponent.render('#content');\n\n  const shipShuffler = new ShipShufflerButtonComponent(\n    players.playerOne.gameboardController,\n    players.playerOne.fleetBuilder.fleet,\n    '#content',\n    'player-one-ship-shuffler-button'\n  );\n\n  shipShuffler.render('#content');\n\n  // 💭 --------------------------------------------------------------\n  // 💭 Bot\n  const botGameboardComponent = new BotGameboardComponent('botOne', players.playerTwo);\n  botGameboardComponent.render('#content');\n}\n\n// time all the above stuff\nconsole.time('init');\ninit();\nconsole.timeEnd('init');","import { BattleshipFleetBuilder } from '../../logic/bs-fleet-builder/bs-fleet-builder';\nimport {\n  Coordinates,\n  CoordinatesArray,\n  Fleet,\n  Gameboard,\n  Orientation,\n  ShipLength,\n  ShipSymbolValue,\n  ShipSymbolValueArray,\n  ShipType,\n} from '../../types/logic-types';\nimport {\n  areArraysEqual,\n  createElement,\n  createIdentifier,\n  getConvertedTypeFromAttr\n} from '../../utilities/random-utilities';\nimport { GridPlacementValue } from '../../types/css-types';\nimport { PlayerState } from '../../types/state-types';\nimport GlobalEventBus from '../../utilities/event-bus';\nimport { isOrientation, isShipLength, isShipType } from '../../utilities/logic-utilities';\nimport { DragState } from '../component-types';\nimport { BattleshipBoardController } from '../../logic/bs-gameboard-controller/bs-gameboard-controller';\n\nexport class PlayerGameboardComponent {\n  private boardContainer: HTMLDivElement;\n  private fleetElements: Set<HTMLDivElement> = new Set();\n\n  constructor(\n    private readonly id: string,\n    public readonly playerState: PlayerState\n  ) {\n    this.boardContainer = this.generateBoardContainer(\n      this.playerState.gameboardBuilder.boardSize\n    );\n\n    GlobalEventBus.on('updateGameboard', () => {\n      this.updateGameboard();\n    });\n  }\n\n  public render(targetSelector: string): void {\n    const target: HTMLElement | null = document.querySelector(targetSelector);\n\n    if (!target) {\n      throw new Error(\n        `Target element not found with ID - ${this.id} and selector - \"${targetSelector}\".`\n      );\n    }\n\n    const gameboard: DocumentFragment = this.generateBoardFragment(\n      this.playerState.gameboardBuilder.boardSize\n    );\n\n    this.boardContainer.appendChild(gameboard);\n\n    this.handleFleetPlacement(\n      this.playerState.fleetBuilder,\n      this.fleetElements\n    );\n\n    target.appendChild(this.boardContainer);\n  }\n\n  // 💭 --------------------------------------------------------------\n  // 💭 Helpers\n\n  private appendFleetClonesToGameboard(fleetElements: Set<HTMLDivElement>) {\n    const gameboard: HTMLDivElement | null =\n      this.boardContainer.querySelector('.gameboard');\n\n    if (!gameboard) throw new Error('Gameboard not found');\n\n    fleetElements.forEach((shipElement) => {\n      const shipCloneElement: HTMLDivElement = createElement(\n        'div',\n        ['ship-container-clone'],\n        {\n          id: `${shipElement.getAttribute('id')}-clone`,\n        }\n      );\n\n      gameboard.appendChild(shipCloneElement);\n    });\n  }\n\n  private clearBoardContainer(boardContainer: HTMLDivElement): void {\n    while (boardContainer.firstChild) {\n      boardContainer.removeChild(boardContainer.firstChild);\n    }\n  }\n\n  private createBackgroundCellsFragment(\n    gameboard: Gameboard\n  ): DocumentFragment {\n    const cellFragment: DocumentFragment = new DocumentFragment();\n\n    gameboard.forEach((row: ShipSymbolValueArray, rowIndex) => {\n      row.forEach((symbol: ShipSymbolValue, colIndex) => {\n        const symbolDescription: string = symbol.description!.toLowerCase();\n\n        const gridCell: HTMLDivElement = createElement(\n          'div',\n          [\n            `${createIdentifier(this.id, 'player', symbolDescription)}-cell`,\n            `player-${symbolDescription}-cell`,\n            'grid-cell',\n          ],\n          {\n            'data-x': colIndex.toString(),\n            'data-y': rowIndex.toString(),\n            'aria-label': `Row ${rowIndex + 1}, Column ${colIndex + 1}`,\n            role: 'gridCell',\n          }\n        );\n\n        const gridCellContainer: HTMLDivElement = createElement('div', [\n          createIdentifier(\n            this.id,\n            'player',\n            `${symbolDescription}-grid-cell-container`\n          ),\n          'grid-cell-container',\n        ]);\n\n        gridCellContainer.appendChild(gridCell);\n        cellFragment.appendChild(gridCellContainer);\n      });\n    });\n\n    return cellFragment;\n  }\n\n  private createShipElement(\n    shipType: ShipType,\n    shipLength: ShipLength,\n    gridPlacementValue: string,\n    gridCrossAxis: number,\n    orientation: Orientation\n  ): HTMLDivElement {\n    const shipUnitFragment: DocumentFragment = this.generateShipUnitFragment(\n      shipLength,\n      shipType,\n      this.id\n    );\n\n    const shipContainerElement: HTMLDivElement = createElement(\n      'div',\n      ['ship-container'],\n      {\n        id: createIdentifier(this.id, 'player', `${shipType}-container`),\n        'data-shipType': shipType,\n        'data-length': shipLength.toString(),\n        'data-orientation': orientation,\n        draggable: 'true',\n      }\n    );\n    shipContainerElement.style.display = 'grid';\n    shipContainerElement.appendChild(shipUnitFragment);\n\n    const isHorizontal: boolean = orientation === 'horizontal';\n    if (isHorizontal) {\n      shipContainerElement.style.gridColumn = gridPlacementValue;\n      shipContainerElement.style.gridRow = gridCrossAxis.toString();\n      shipContainerElement.style.gridTemplateColumns = `repeat(${shipLength}, 1fr)`;\n    } else {\n      shipContainerElement.style.gridRow = gridPlacementValue;\n      shipContainerElement.style.gridColumn = gridCrossAxis.toString();\n      shipContainerElement.style.gridTemplateRows = `repeat(${shipLength}, 1fr)`;\n    }\n\n    return shipContainerElement;\n  }\n\n  private generateBoardContainer(boardSize: number): HTMLDivElement {\n    const gameboardContainer: HTMLDivElement = createElement(\n      'div',\n      ['gameboard-container'],\n      {\n        id: createIdentifier(this.id, 'player', 'gameboard-container'),\n      }\n    );\n\n    gameboardContainer.style.setProperty('--grid-size', boardSize.toString());\n\n    this.handleDragListeners(gameboardContainer);\n    this.handleClickListeners(gameboardContainer);\n\n    return gameboardContainer;\n  }\n\n  private generateBoardFragment(boardSize: number): DocumentFragment {\n    const gameboardBackground: HTMLDivElement = createElement(\n      'div',\n      ['gameboard-background'],\n      {\n        id: createIdentifier(this.id, 'player', 'gameboard-background'),\n      }\n    );\n    gameboardBackground.appendChild(\n      this.createBackgroundCellsFragment(\n        this.playerState.gameboardBuilder.board\n      )\n    );\n\n    const gameboard = createElement('div', ['gameboard'], {\n      id: createIdentifier(this.id, 'player', 'gameboard'),\n    });\n    gameboard.style.setProperty('--grid-size', boardSize.toString());\n\n    const boardFragment: DocumentFragment = new DocumentFragment();\n    boardFragment.append(gameboardBackground, gameboard);\n\n    return boardFragment;\n  }\n\n  private generateShipUnitFragment(\n    shipLength: ShipLength,\n    shipType: ShipType,\n    id: string\n  ): DocumentFragment {\n    const shipUnitFragment: DocumentFragment = new DocumentFragment();\n\n    for (let i = 0; i < shipLength; i++) {\n      const isBow: boolean = i === 0;\n      const shipUnit: HTMLDivElement = createElement('div', [\n        'ship-unit',\n        createIdentifier(id, 'player',shipType),\n      ]);\n\n      if (isBow) {\n        shipUnit.classList.add('ship-bow');\n        shipUnit.setAttribute(\n          'id',\n          createIdentifier(id, 'player',`${shipType}-bow`)\n        );\n      }\n\n      shipUnitFragment.appendChild(shipUnit);\n    }\n\n    return shipUnitFragment;\n  }\n\n  private getGridPlacementValue(\n    coordinates: Coordinates,\n    orientation: Orientation,\n    shipLength: ShipLength\n  ): [GridPlacementValue, number] {\n    const isHorizontal = orientation === 'horizontal';\n\n    const [x, y] = coordinates;\n    const gridStartMain = isHorizontal ? x + 1 : y + 1;\n    const gridCrossAxis = isHorizontal ? y + 1 : x + 1;\n\n    return [`${gridStartMain} / span ${shipLength}`, gridCrossAxis];\n  }\n\n  private handleFleetPlacement(\n    fleetBuilder: BattleshipFleetBuilder,\n    fleetElements: Set<HTMLDivElement>\n  ) {\n    this.updateFleetElements(fleetBuilder);\n    this.placeFleetOnGameboard(fleetElements);\n    this.appendFleetClonesToGameboard(fleetElements);\n  }\n\n  private placeFleetOnGameboard(fleetElements: Set<HTMLDivElement>): void {\n    const gameboard =\n      this.boardContainer.querySelector<HTMLDivElement>('.gameboard');\n\n    if (!gameboard) {\n      throw new Error('Gameboard container not found.');\n    }\n\n    fleetElements.forEach((shipElement) => gameboard.appendChild(shipElement));\n  }\n\n  private updateFleetElements = (fleetBuilder: BattleshipFleetBuilder) => {\n    if (this.fleetElements.size) this.fleetElements.clear();\n\n    for (const ship of Object.values(fleetBuilder.fleet)) {\n      const shipType: ShipType = ship.type;\n      const shipLength: ShipLength = ship.length;\n\n      const orientation: Orientation | null =\n        ship.currentplacementConfigurations.orientation;\n\n      if (!orientation) throw new Error('Orientation not set.');\n\n      const coordinatesArray: CoordinatesArray | null =\n        ship.currentplacementConfigurations.coordinatesArray;\n\n      if (!coordinatesArray || coordinatesArray.length === 0) {\n        console.log(`The ${shipType} has not been placed. Continuing...`);\n        continue;\n      }\n\n      const [x, y]: Coordinates = coordinatesArray[0];\n      const [gridPlacementValue, gridCrossAxis]: [GridPlacementValue, number] =\n        this.getGridPlacementValue([x, y], orientation, shipLength);\n\n      const shipElement: HTMLDivElement = this.createShipElement(\n        shipType,\n        shipLength,\n        gridPlacementValue,\n        gridCrossAxis,\n        orientation\n      );\n\n      this.fleetElements.add(shipElement);\n    }\n  };\n\n  private updateGameboard() {\n    this.clearBoardContainer(this.boardContainer);\n\n    const gameboard: DocumentFragment = this.generateBoardFragment(\n      this.playerState.gameboardBuilder.boardSize\n    );\n\n    this.boardContainer.appendChild(gameboard);\n\n    this.handleFleetPlacement(\n      this.playerState.fleetBuilder,\n      this.fleetElements\n    );\n  }\n\n  // 💭 --------------------------------------------------------------\n  // 💭 HTML Drag and Drop API (Repositioning)\n\n  private handleDragListeners(gameboardContainer: HTMLDivElement) {\n    const dragState: DragState = {\n      currentShipInstance: null,\n      initialPlacementConfigurations: null,\n      isValidDropTarget: false,\n      currentDragOverCell: null,\n    };\n\n    gameboardContainer.addEventListener('dragstart', (e: DragEvent) =>\n      this.handleShipDragStart(e, dragState)\n    );\n    gameboardContainer.addEventListener('dragenter', (e: DragEvent) =>\n      this.handleShipDragEnter(e)\n    );\n    gameboardContainer.addEventListener('dragleave', (e: DragEvent) =>\n      this.handleShipDragLeave(e)\n    );\n    gameboardContainer.addEventListener('dragleave', (e: DragEvent) =>\n      this.handleShipDragLeave(e)\n    );\n    gameboardContainer.addEventListener('dragover', (e: DragEvent) =>\n      this.handleShipDragOver(e, dragState)\n    );\n    gameboardContainer.addEventListener('drop', (e: DragEvent) =>\n      this.handleShipDrop(e, dragState)\n    );\n    gameboardContainer.addEventListener('dragend', (e: DragEvent) =>\n      this.handleShipDragEnd(e, dragState)\n    );\n  }\n\n  private handleShipDragStart(e: DragEvent, dragState: DragState) {\n    if (!(e.target instanceof HTMLDivElement))\n      throw new Error('Target element not found or is not an HTMLElement.');\n\n    // Ensure it's a valid ship container\n    if (!e.target.classList.contains('ship-container')) return;\n\n    const snapToClone = (\n      e: DragEvent,\n      boardContainer: HTMLDivElement\n    ): void => {\n      if (!e.target || !(e.target instanceof HTMLDivElement))\n        throw new Error('Target element not found or is not an HTMLElement.');\n\n      const shipContainerElement: HTMLDivElement = e.target;\n      const shipContainerId: string | null =\n        shipContainerElement.getAttribute('id');\n\n      const shipContainerClone: HTMLDivElement | null =\n        boardContainer.querySelector(`#${shipContainerId}-clone`);\n\n      if (!shipContainerClone) throw new Error('Ship clone not found.');\n      if (!shipContainerId)\n        throw new Error(\"Ship container doesn't have an ID.\");\n\n      const shipBoundingRect = shipContainerElement.getBoundingClientRect();\n\n      shipContainerClone.style.height = `${shipBoundingRect.height}px`;\n      shipContainerClone.style.width = `${shipBoundingRect.width}px`;\n\n      const shipBow = shipContainerElement.querySelector(`.ship-bow`);\n      if (!shipBow) throw new Error('Ship bow not found.');\n\n      const shipBowBoundingRect = shipBow?.getBoundingClientRect();\n\n      e.dataTransfer?.setDragImage(\n        shipContainerClone,\n        shipBowBoundingRect.width / 2,\n        shipBowBoundingRect.height / 2\n      );\n\n      // reveal ship container clone\n      shipContainerClone.style.visibility = 'visible'; // Ensure the clone is visible\n      shipContainerClone.style.pointerEvents = 'auto'; // Ensure pointer events work on the clone\n\n      // TODO: Make this less hacky 🫠\n      // enable drag events for grid cells under ships\n      setTimeout(() => {\n        shipContainerElement.style.pointerEvents = 'none';\n      }, 0);\n    };\n\n    const classifyValidCellCoordinates = (\n      boardContainer: HTMLDivElement,\n      shipContainerElement: HTMLDivElement,\n      orientation: Orientation,\n      gameboardController: BattleshipBoardController\n    ): void => {\n      const shipLengthAttr: number | null = Number(\n        shipContainerElement.getAttribute('data-length')\n      );\n      if (!shipLengthAttr || !isShipLength(shipLengthAttr)) {\n        throw new Error('Invalid or missing ship type attribute.');\n      }\n\n      const classifyValidBowCells = (\n        gridCells: NodeListOf<HTMLDivElement>,\n        shipLength: ShipLength,\n        orientation: Orientation\n      ) => {\n        const allValidBowCoordinates: Set<Coordinates> =\n          gameboardController.getAllValidBowCoordinates(\n            orientation,\n            shipLength\n          );\n\n        gridCells.forEach((gridCell: HTMLDivElement) => {\n          const gridCellCoordinates: Coordinates = [\n            Number(gridCell.getAttribute('data-x')),\n            Number(gridCell.getAttribute('data-y')),\n          ];\n\n          for (const validBowCoordinates of allValidBowCoordinates) {\n            if (!areArraysEqual(validBowCoordinates, gridCellCoordinates))\n              continue;\n            gridCell.classList.add('valid-bow-coordinates');\n          }\n        });\n      };\n\n      const shipLength: ShipLength = shipLengthAttr;\n\n      const gridCells: NodeListOf<HTMLDivElement> =\n        boardContainer.querySelectorAll('.grid-cell');\n\n      classifyValidBowCells(gridCells, shipLength, orientation);\n    };\n\n    // Update drag state\n    const setUpShipForDrag = (\n      dragState: DragState,\n      fleet: Fleet,\n      shipType: ShipType\n    ) => {\n      // Ensure the ship type exists in the fleet\n\n      if (!fleet[shipType])\n        throw new Error(`The ${shipType} is not present in the fleet.`);\n\n      // Set the current ship instance and its initial configurations\n      dragState.currentShipInstance = fleet[shipType];\n      dragState.initialPlacementConfigurations =\n        dragState.currentShipInstance.currentplacementConfigurations;\n    };\n\n    const shipContainer: HTMLDivElement = e.target;\n\n    // Get ship type and orientation, ensuring valid attributes and types\n    const shipType: ShipType = getConvertedTypeFromAttr(\n      e.target,\n      'data-shiptype',\n      isShipType\n    );\n\n    const orientation: Orientation = getConvertedTypeFromAttr(\n      e.target,\n      'data-orientation',\n      isOrientation\n    );\n\n    const fleet: Fleet = this.playerState.fleetBuilder.fleet;\n\n    setUpShipForDrag(dragState, fleet, shipType);\n\n    if (!dragState.currentShipInstance)\n      throw new Error(\n        `Drag state hasn't been updated with the current ship instance on drag start. Drag State: ${JSON.stringify(\n          dragState\n        )}`\n      );\n\n    // Remove the piece from the gameboard (non-null ensured by `setUpShipForDrag`)\n    this.playerState.gameboardController.removePiece(\n      dragState.currentShipInstance\n    );\n\n    // Handle snapping and classifying valid cells\n    snapToClone(e, this.boardContainer);\n    classifyValidCellCoordinates(\n      this.boardContainer,\n      shipContainer,\n      orientation,\n      this.playerState.gameboardController\n    );\n  }\n\n  private handleShipDragEnter(e: DragEvent) {\n    if (!(e.target instanceof HTMLDivElement))\n      throw new Error('Target element not found or is not an HTMLElement.');\n\n    // Ensure it's a grid cell\n    if (!e.target.classList.contains('grid-cell')) return;\n\n    const gridCell: HTMLDivElement = e.target;\n\n    // Check if current grid cell is valid for placement\n    const areValidBowCoordinates = gridCell.classList.contains(\n      'valid-bow-coordinates'\n    );\n\n    // Add appropriate visual feedback class to grid cell\n    areValidBowCoordinates\n      ? gridCell.classList.add('placement-is-valid')\n      : gridCell.classList.add('placement-is-invalid');\n  }\n\n  private handleShipDragLeave(e: DragEvent) {\n    if (!(e.target instanceof HTMLDivElement))\n      throw new Error('Target element not found or is not an HTMLElement.');\n\n    if (!e.target.classList.contains('grid-cell')) return;\n\n    const gridCell: HTMLDivElement = e.target;\n\n    // Remove assigned visual feedback class from grid cell\n    if (gridCell.classList.contains('placement-is-valid')) {\n      gridCell.classList.remove('placement-is-valid');\n    } else if (gridCell.classList.contains('placement-is-invalid')) {\n      gridCell.classList.remove('placement-is-invalid');\n    }\n  }\n\n  private handleShipDragOver(e: DragEvent, dragState: DragState) {\n    // Enables the drop event to fire\n    e.preventDefault();\n\n    if (!(e.target instanceof HTMLDivElement))\n      throw new Error('Target element not found or is not an HTMLElement.');\n    if (!e.target.classList.contains('grid-cell')) return;\n\n    const gridCell: HTMLDivElement = e.target;\n\n    // Update drag state for cleanup\n    dragState.currentDragOverCell = gridCell;\n\n    // Prevent further operations for invalid cells\n    if (!gridCell.classList.contains('valid-bow-coordinates')) return;\n  }\n\n  private handleShipDrop(e: DragEvent, dragState: DragState) {\n    e.preventDefault();\n\n    if (!e.target || !(e.target instanceof HTMLDivElement))\n      throw new Error('Target element not found or is not an HTMLElement.');\n\n    if (!e.target.classList.contains('valid-bow-coordinates')) return;\n\n    // Validate and modify state\n    const { coordinatesArray, orientation: initialOrientation } =\n      dragState.initialPlacementConfigurations || {};\n    if (!coordinatesArray || !initialOrientation) {\n      throw new Error('Initial placement configurations are incomplete.');\n    }\n\n    dragState.isValidDropTarget = true;\n\n    const validGridCell: HTMLDivElement = e.target;\n\n    // Retrieve new coordinates from the valid grid cell\n    const xAttr = validGridCell.getAttribute('data-x');\n    const yAttr = validGridCell.getAttribute('data-y');\n    if (!xAttr || !yAttr) {\n      throw new Error('Missing or invalid grid cell coordinates.');\n    }\n    const newCoordinates: Coordinates = [Number(xAttr), Number(yAttr)];\n\n    this.playerState.gameboardController.placePiece({\n      ship: dragState.currentShipInstance!,\n      coordinates: newCoordinates,\n      orientation: initialOrientation,\n    });\n\n    // Re-renders board with new ship placement\n    this.updateGameboard();\n\n    // Reset valid drop target state\n    dragState.isValidDropTarget = false;\n  }\n\n  private handleShipDragEnd(e: DragEvent, dragState: DragState) {\n    if (!(e.target instanceof HTMLDivElement))\n      throw new Error('Target element not found or is not an HTMLElement.');\n\n    if (!e.target.classList.contains('ship-container')) return;\n    const resetDragStyles = (shipContainerElement: HTMLDivElement): void => {\n      // Extract and validate ship container ID\n      const shipContainerId: string | null =\n        shipContainerElement.getAttribute('id');\n\n      // Retrieve and validate ship clone element\n      const shipContainerClone: HTMLDivElement | null =\n        this.boardContainer.querySelector(`#${shipContainerId}-clone`);\n\n      if (!shipContainerId || !shipContainerClone) {\n        throw new Error(\n          `Invalid ship container state. ID: ${shipContainerId}, Clone: ${shipContainerClone}`\n        );\n      }\n\n      // Re-hide drag clone\n      shipContainerClone.style.visibility = 'hidden'; // Ensure the clone is visible\n      shipContainerClone.style.pointerEvents = 'none'; // Ensure pointer events are revoked from clone\n\n      // Remove drag events for grid cells under ships\n      shipContainerElement.style.pointerEvents = 'auto';\n    };\n    const resetShipPosition = (): void => {\n      const { coordinatesArray, orientation: initialOrientation } =\n        dragState.initialPlacementConfigurations || {};\n      if (!coordinatesArray || !initialOrientation) {\n        throw new Error('Initial placement configurations are incomplete.');\n      }\n\n      // Get bow coordinates\n      const initialBowCoordinates: Coordinates = coordinatesArray[0];\n\n      // Re-place ship on logic gameboard\n      this.playerState.gameboardController.placePiece({\n        ship: dragState.currentShipInstance!,\n        coordinates: initialBowCoordinates,\n        orientation: initialOrientation,\n      });\n    };\n    const removeVisualFeedback = (\n      currentDragOverCell: HTMLDivElement,\n      isValidDropTarget: boolean\n    ): void => {\n      const feedbackClass: string = isValidDropTarget\n        ? 'placement-is-valid'\n        : 'placement-is-invalid';\n      currentDragOverCell.classList.remove(feedbackClass);\n    };\n\n    const shipContainerElement: HTMLDivElement = e.target;\n\n    try {\n      resetDragStyles(shipContainerElement);\n\n      const { currentDragOverCell, isValidDropTarget } = dragState;\n      if (!currentDragOverCell)\n        throw new Error(\n          `Current drag over cell is missing. Drag state: ${JSON.stringify(\n            dragState\n          )}`\n        );\n      removeVisualFeedback(currentDragOverCell, isValidDropTarget);\n\n      if (!isValidDropTarget) {\n        resetShipPosition();\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  // 💭 --------------------------------------------------------------\n  // 💭 Handle Ship Click (Rotation)\n\n  private handleClickListeners(gameboardContainer: HTMLDivElement) {\n    \n    gameboardContainer.addEventListener('click', (e: MouseEvent) => {\n      this.handleShipRotation(e);\n    });\n\n  }\n\n  private handleShipRotation(e: MouseEvent) {\n    if (!(e.target instanceof HTMLDivElement))\n      throw new Error('Target element not found or is not an HTMLElement.');\n\n    // Ensure it's a valid ship container\n    if (!e.target.classList.contains('ship-container')) return;\n\n    const shipContainer: HTMLDivElement = e.target;\n\n    const shipType: ShipType = getConvertedTypeFromAttr(\n      shipContainer,\n      'data-shiptype',\n      isShipType\n    );\n    \n    const ship = this.playerState.fleetBuilder.getShip(shipType);\n\n    this.playerState.gameboardController.rotatePiece(ship);\n    this.updateGameboard();\n  };\n\n  // 💭 --------------------------------------------------------------\n  // 💭 Utilities\n\n  // TODO: Do I need this\n  public getId(): string {\n    return this.id;\n  }\n}\n","import { BattleshipBoardController } from \"../../logic/bs-gameboard-controller/bs-gameboard-controller\";\nimport { createElement } from \"../../utilities/random-utilities\";\nimport { Fleet } from \"../../types/logic-types\";\nimport { randomizeBSGameboard } from \"../../setup/randomize-bs-gameboard\";\nimport GlobalEventBus from \"../../utilities/event-bus\";\n\nexport class ShipShufflerButtonComponent {\n  private readonly ShipShufflerButton: HTMLButtonElement;\n  private readonly ShipShufflerButtonContainer: HTMLDivElement;\n  private readonly ShipShufflerButtonTextContent: string = 'Shuffle Ships';\n\n  constructor(\n    private gameboardController: BattleshipBoardController,\n    private fleet: Fleet,\n    private gameboardTargetSelector: string,\n    private id: string = 'ship-shuffler-button',\n    private classes: string[] = ['ship-shuffler-button']\n  ) {\n    this.validateGameboardTarget(this.gameboardTargetSelector);\n\n    this.ShipShufflerButton = this.createShipShufflerButton(\n      this.id,\n      this.classes\n    );\n    this.ShipShufflerButton.classList.add(...this.classes);\n    this.ShipShufflerButton.textContent = this.ShipShufflerButtonTextContent;\n    this.addEventListener(this.ShipShufflerButton);\n\n    this.ShipShufflerButtonContainer = this.createShipShufflerButtonContainer();\n    this.ShipShufflerButtonContainer.appendChild(this.ShipShufflerButton);\n  }\n\n  public render(targetSelector: string) {\n    const target: HTMLElement | null = document.querySelector(targetSelector);\n\n    if (!target) {\n      throw new Error(`Target element not found: \"${targetSelector}.\"`);\n    }\n\n    target.appendChild(this.ShipShufflerButtonContainer);\n  }\n\n  // 💭 --------------------------------------------------------------\n  // 💭 Helpers\n\n  private addEventListener(ShipShufflerButton: HTMLButtonElement) {\n    ShipShufflerButton.addEventListener('click', () => {\n      this.randomizeGameboard();\n      this.updateGameboard(this.gameboardTargetSelector);\n    });\n  }\n\n  private createShipShufflerButton(\n    id: string,\n    classes: string[]\n  ): HTMLButtonElement {\n    const button: HTMLButtonElement = createElement('button', [...classes], {\n      id,\n    });\n    return button;\n  }\n\n  private createShipShufflerButtonContainer(): HTMLDivElement {\n    const container: HTMLDivElement = createElement('div', [\n      'ship-shuffler-button-container',\n    ]);\n    return container;\n  }\n\n  private randomizeGameboard() {\n    this.gameboardController.removeAllPieces(this.fleet);\n    randomizeBSGameboard(this.gameboardController, this.fleet);\n  }\n\n  private updateGameboard(targetSelector: string) {\n    GlobalEventBus.emit('updateGameboard', targetSelector);\n  }\n\n  private validateGameboardTarget(gameboardTargetSelector: string) {\n    if (!document.querySelector(gameboardTargetSelector)) {\n      throw new Error(\n        `Invalid gameboard target selector: \"${gameboardTargetSelector}\"`\n      );\n    }\n  }\n\n  // 💭 --------------------------------------------------------------\n  // 💭 Utilities\n\n  public getId() {\n    return this.id;\n  }\n}","import {\n  Gameboard,\n  ShipSymbolValue,\n  ShipSymbolValueArray\n} from '../../types/logic-types';\nimport {\n  createElement,\n  createIdentifier,\n} from '../../utilities/random-utilities';\nimport { PlayerState } from '../../types/state-types';\n\nexport class BotGameboardComponent {\n  private boardContainer: HTMLDivElement;\n\n  constructor(\n    private readonly id: string,\n    public readonly playerState: PlayerState\n  ) {\n    this.boardContainer = this.generateBoardContainer(\n      this.playerState.gameboardBuilder.boardSize\n    );\n  }\n\n  public render(targetSelector: string): void {\n    const target: HTMLElement | null = document.querySelector(targetSelector);\n\n    if (!target) {\n      throw new Error(\n        `Target element not found with ID - ${this.id} and selector - \"${targetSelector}\".`\n      );\n    }\n\n    const gameboard: DocumentFragment = this.generateBoardFragment(\n      this.playerState.gameboardBuilder.boardSize\n    );\n\n    this.boardContainer.appendChild(gameboard);\n\n    target.appendChild(this.boardContainer);\n  }\n\n  // 💭 --------------------------------------------------------------\n  // 💭 Helpers\n\n  private createBackgroundCellsFragment(\n    gameboard: Gameboard\n  ): DocumentFragment {\n    const cellFragment: DocumentFragment = new DocumentFragment();\n\n    gameboard.forEach((row: ShipSymbolValueArray, rowIndex: number) => {\n      row.forEach((_: ShipSymbolValue, colIndex: number) => {\n        const gridCell: HTMLDivElement = createElement(\n          'div',\n          [\n            `${createIdentifier(this.id, 'bot')}-cell`,\n            'grid-cell',\n          ],\n          {\n            'data-x': colIndex.toString(),\n            'data-y': rowIndex.toString(),\n            'aria-label': `Row ${rowIndex + 1}, Column ${colIndex + 1}`,\n            role: 'gridCell',\n          }\n        );\n\n        const gridCellContainer: HTMLDivElement = createElement('div', [\n          createIdentifier(\n            this.id,\n            'bot',\n            `grid-cell-container`\n          ),\n          'grid-cell-container',\n        ]);\n\n        gridCellContainer.appendChild(gridCell);\n        cellFragment.appendChild(gridCellContainer);\n      });\n    });\n\n    return cellFragment;\n  }\n\n  private generateBoardContainer(boardSize: number): HTMLDivElement {\n    const gameboardContainer: HTMLDivElement = createElement(\n      'div',\n      ['gameboard-container'],\n      {\n        id: createIdentifier(this.id, 'bot', 'gameboard-container'),\n      }\n    );\n\n    gameboardContainer.style.setProperty('--grid-size', boardSize.toString());\n\n    return gameboardContainer;\n  }\n\n  private generateBoardFragment(boardSize: number): DocumentFragment {\n    const gameboardBackground: HTMLDivElement = createElement(\n      'div',\n      ['gameboard-background'],\n      {\n        id: createIdentifier(this.id, 'bot', 'gameboard-background'),\n      }\n    );\n    gameboardBackground.appendChild(\n      this.createBackgroundCellsFragment(\n        this.playerState.gameboardBuilder.board\n      )\n    );\n\n    const gameboard = createElement('div', ['gameboard'], {\n      id: createIdentifier(this.id, 'bot', 'gameboard'),\n    });\n    gameboard.style.setProperty('--grid-size', boardSize.toString());\n\n    const boardFragment: DocumentFragment = new DocumentFragment();\n    boardFragment.append(gameboardBackground, gameboard);\n\n    return boardFragment;\n  }\n\n  // 💭 --------------------------------------------------------------\n  // 💭 Utilities\n\n  // TODO: Do I need this\n  public getId(): string {\n    return this.id;\n  }\n}\n"],"names":["AnglesOfRotation","ShipType","BattleshipBoardBuilder","static","Symbol","_boardSize","_fillValue","vacant","constructor","this","_board","Array","from","length","fill","board","boardSize","fillValue","BattleshipBoardController","playerState","getValidPositions","orientation","shipLength","battleshipBoardBuilder","extractAxisArray","axisIndex","gameboard","map","row","findValidPositionsInAxis","axisArray","isHorizontal","streak","validAxisPositions","i","bowPosition","sternPosition","push","bow","stern","validPositionsPerAxis","validPositions","getValidShipPositions","gameboardBuilder","battleshipBoardController","getAllValidBowCoordinates","allValidBowCoordinates","Set","positionsInAxis","Object","values","isPositionsArray","Error","forEach","position","add","movePiece","ship","newBowCoordinates","isPlaced","console","warn","type","currentOrientation","currentplacementConfigurations","newPosition","createPositionObject","isPositionInBounds","x","y","axisArrayKey","createAxisArrayKey","some","arePositionsEqual","placementParameters","coordinates","shouldResetShipRotationalData","relocateShip","placePiece","battleshipBoardRepository","bowX","bowY","isCoordinateInBounds","errorMessage","isPositionValid","shipConfigurations","validPosition","JSON","stringify","getPlacementCoordinates","placementCoordinates","sternX","sternY","primary","axisEnd","placeOnBoard","shipPlacementCoordinates","shipSymbol","symbol","setShipConfigurations","coordinatesArray","placementConfigurations","rotationalPivotConfigurations","every","value","transientAngleOfRotation","Degrees0","updateOccupiedCoordinatesSet","shipType","addShipToFleetCoordinates","placeShip","gameboardRepository","setFleetRotatedPlacePieceParams","fleetBuilder","fleet","prettyPrint","table","description","receiveAttack","attackedShip","getShipAt","log","removePiece","isShipValidForRemoval","shipCoordinates","removeShipFromBoard","nullifyShipCoordinatesValue","nullifyShipCoordinateSetValue","resetShipConfigurations","nullifyShipValidRotationalParams","resetConfigurations","removeAllPieces","keys","error","rotatePiece","getNextPiecePlacementParams","rotationalPositionMap","currentAngle","maxAngle","pop","getMaxAngle","originalBowCoordinates","originalOrientation","nextAngle","getNextAngle","find","angle","nextPlacePieceParams","get","inBoundRotationalPlacePieceForFleet","initialAngle","finalPlacePieceParams","isRotatedPositionValid","updateTransientPlacementParams","areCoordinatesVacant","getShipDataAt","angleOfRotation","gameboardSize","newAxisIndexStart","axisIndexEnd","Degrees90","Degrees270","getRotatedPlacePieceParams","applyOffsetToCoordinate","coordinate","determineRotatedOrientation","Degrees180","getRotatedBowCoordinates","rotationalPivotBowCoordinates","rotatedBowCoordinates","areCoordinatesInBounds","rotationalPivotOrientation","rotatedPiecePlacementParams","createRotatedPiecePlacementParams","rotatedPlacePieceParamsMap","rotatedPlacePieceParams","Map","angleOfRotationString","angleOfRotationToNum","includes","rotatedPlacePieceParamsValue","isPlacePieceParams","isOutOfBounds","bowCoordinates","placePieceParams","set","generateRotationalPositionMap","isShipPlaced","setShipRotatedPlacePieceParams","setShipValidRotationalParams","BattleshipBoardRepository","_fleetCoordinates","_inBoundRotationalPlacePieceParamsForFleet","fleetCoordinates","setMemberTemplate","isFleetCoordinates","validateTypes","OccupiedCoordinatesSet","isShipType","isOccupiedCoordinatesSet","coordinateSetMemberKey","occupiedCoordinatesSet","entries","has","validRotatedPlacePieceParams","SHIP_SYMBOLS","Carrier","Battleship","Cruiser","Submarine","Destroyer","PatrolBoat","sizeLookup","undefined","BattleshipBuilder","seaworthy","_hitCounter","version","key","hit","isSeaworthy","hitCounter","BattleshipFleetBuilder","createFleet","fleetConfigs","config","createHasbroFleet","carrier","battleship","destroyer","submarine","patrolBoat","createMBFleet","cruiser","getShip","areArraysEqual","arrayOne","arrayTwo","index","getConvertedTypeFromAttr","element","attribute","typeGuard","attrValue","getAttribute","getRandomInt","min","max","Math","floor","random","createElement","tag","classes","attributes","document","cls","classList","setAttribute","createIdentifier","id","playerType","identifier","extractedNumberString","split","toLowerCase","createBattleshipBoardController","positionOne","positionTwo","isCoordinates","isArray","member","isOccupiedCoordinatesSetMemberKey","OccupiedCoordinatesSetOrNull","isOrientation","proto","getPrototypeOf","prototype","isPlainObject","isPosition","match","playerOneBoardBuilder","playerTwoBoardBuilder","playerOneBoardRepository","playerTwoBoardRepository","playerOneFleetBuilder","playerTwoFleetBuilder","createBattleshipFleetBuilder","createBattleshipFleetBuilderSet","playerOneBoardController","playerTwoBoardController","createBattleshipControllerSet","players","playerOne","gameboardController","playerTwo","randomizeBSGameboard","getValidCoordinatesRecursively","attempts","generateRandomCoordinates","areCoordinatesValid","validPositionsParams","randomOrientation","events","on","eventName","fn","off","filter","listener","emit","data","time","timeEnd","fleetElements","boardContainer","generateBoardContainer","GlobalEventBus","updateGameboard","render","targetSelector","target","querySelector","generateBoardFragment","appendChild","handleFleetPlacement","appendFleetClonesToGameboard","shipElement","shipCloneElement","clearBoardContainer","firstChild","removeChild","createBackgroundCellsFragment","cellFragment","DocumentFragment","rowIndex","colIndex","symbolDescription","gridCell","toString","role","gridCellContainer","createShipElement","gridPlacementValue","gridCrossAxis","shipUnitFragment","generateShipUnitFragment","shipContainerElement","draggable","style","display","gridColumn","gridRow","gridTemplateColumns","gridTemplateRows","gameboardContainer","setProperty","handleDragListeners","handleClickListeners","gameboardBackground","boardFragment","append","isBow","shipUnit","getGridPlacementValue","updateFleetElements","placeFleetOnGameboard","size","clear","dragState","currentShipInstance","initialPlacementConfigurations","isValidDropTarget","currentDragOverCell","addEventListener","e","handleShipDragStart","handleShipDragEnter","handleShipDragLeave","handleShipDragOver","handleShipDrop","handleShipDragEnd","HTMLDivElement","contains","shipContainer","setUpShipForDrag","snapToClone","shipContainerId","shipContainerClone","shipBoundingRect","getBoundingClientRect","height","width","shipBow","shipBowBoundingRect","dataTransfer","setDragImage","visibility","pointerEvents","setTimeout","classifyValidCellCoordinates","shipLengthAttr","Number","classifyValidBowCells","gridCells","gridCellCoordinates","validBowCoordinates","querySelectorAll","remove","preventDefault","initialOrientation","validGridCell","xAttr","yAttr","newCoordinates","resetDragStyles","resetShipPosition","initialBowCoordinates","removeVisualFeedback","feedbackClass","handleShipRotation","getId","ShipShufflerButtonTextContent","gameboardTargetSelector","validateGameboardTarget","ShipShufflerButton","createShipShufflerButton","textContent","ShipShufflerButtonContainer","createShipShufflerButtonContainer","randomizeGameboard","_"],"sourceRoot":""}